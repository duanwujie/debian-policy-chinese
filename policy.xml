<?xml version='1.0' encoding='utf-8'?>
<!-- -*- DocBook -*- -->
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
    "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % versiondata SYSTEM "version.xml"> %versiondata;
<!-- current Debian changes file format -->
<!ENTITY changesversion "1.8">
]>

<book lang="en">

  <title>Debian Policy Manual</title>

  <bookinfo>
    <authorgroup>
      <author>
        <othername>
          <link linkend="s-authors">The Debian Policy Mailing List</link>
        </othername>
      </author>
    </authorgroup>

    <releaseinfo>version &version;</releaseinfo>
    <pubdate>&date;</pubdate>

    <abstract>
      <para>
        This manual describes the policy requirements for the Debian
        distribution.  This includes the structure and contents of the
        Debian archive and several design issues of the operating system,
        as well as technical requirements that each package must satisfy
        to be included in the distribution.
      </para>
    </abstract>

    <copyright>
      <year>1996</year>
      <year>1997</year>
      <year>1998</year>
      <holder>Ian Jackson</holder>
      <holder>Christian Schwarz</holder>
    </copyright>
    <legalnotice>
      <para>
        These are the copyright dates of the original Policy manual.
        Since then, this manual has been updated by many others.  No
        comprehensive collection of copyright notices for subsequent work
        exists.
      </para>
      <para>
        This manual is free software; you may redistribute it and/or
        modify it under the terms of the GNU General Public License as
        published by the Free Software Foundation; either version 2 of the
        License, or (at your option) any later version.
      </para>
      <para>
        This is distributed in the hope that it will be useful, but
        WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
        General Public License for more details.
      </para>
      <para>
        A copy of the GNU General Public License is available as
        <filename>/usr/share/common-licenses/GPL</filename> in the Debian
        distribution or on the World Wide Web at <ulink
        url="https://www.gnu.org/licenses/">https://www.gnu.org/licenses/</ulink>.
      </para>
    </legalnotice>
  </bookinfo>

  <chapter id="ch-scope">
    <title>About this manual</title>

    <section id="s1.1">
      <title>Scope</title>

      <para>
        This manual describes the policy requirements for the Debian
        distribution.  This includes the structure and contents of the
        Debian archive and several design issues of the operating system,
        as well as technical requirements that each package must satisfy
        to be included in the distribution.
      </para>
      <para>
        This manual also describes Debian policy as it relates to creating
        Debian packages.  It is not a tutorial on how to build packages,
        nor is it exhaustive where it comes to describing the behavior of
        the packaging system.  Instead, this manual attempts to define the
        interface to the package management system that the developers
        have to be conversant with.
        <footnote>
          <para>
            Informally, the criteria used for inclusion is that the
            material meet one of the following requirements:
          </para>
          <variablelist>
            <varlistentry>
              <term>Standard interfaces</term>
              <listitem>
                <para>
                  The material presented represents an interface to the
                  packaging system that is mandated for use, and is used
                  by, a significant number of packages, and therefore
                  should not be changed without peer review.  Package
                  maintainers can then rely on this interface not
                  changing, and the package management software authors
                  need to ensure compatibility with this interface
                  definition.  (Control file and changelog file formats
                  are examples.)
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Chosen Convention</term>
              <listitem>
                <para>
                  If there are a number of technically viable choices that
                  can be made, but one needs to select one of these
                  options for inter-operability.  The version number
                  format is one example.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
          <para>
            Please note that these are not mutually exclusive; selected
            conventions often become parts of standard interfaces.
          </para>
        </footnote>
      </para>
      <para>
        The footnotes present in this manual are merely informative, and
        are not part of Debian policy itself.
      </para>
      <para>
        The appendices to this manual are not necessarily normative,
        either.  Please see <xref linkend="ap-pkg-scope"/> for more
        information.
      </para>
      <para>
        In the normative part of this manual, the words
        <emphasis>must</emphasis>, <emphasis>should</emphasis> and
        <emphasis>may</emphasis>, and the adjectives
        <emphasis>required</emphasis>, <emphasis>recommended</emphasis>
        and <emphasis>optional</emphasis>, are used to distinguish the
        significance of the various guidelines in this policy document.
        Packages that do not conform to the guidelines denoted by
        <emphasis>must</emphasis> (or <emphasis>required</emphasis>) will
        generally not be considered acceptable for the Debian
        distribution.  Non-conformance with guidelines denoted by
        <emphasis>should</emphasis> (or <emphasis>recommended</emphasis>)
        will generally be considered a bug, but will not necessarily
        render a package unsuitable for distribution.  Guidelines denoted
        by <emphasis>may</emphasis> (or <emphasis>optional</emphasis>) are
        truly optional and adherence is left to the maintainer's
        discretion.
      </para>
      <para>
        These classifications are roughly equivalent to the bug severities
        <emphasis>serious</emphasis> (for <emphasis>must</emphasis> or
        <emphasis>required</emphasis> directive violations),
        <emphasis>minor</emphasis>, <emphasis>normal</emphasis> or
        <emphasis>important</emphasis> (for <emphasis>should</emphasis> or
        <emphasis>recommended</emphasis> directive violations) and
        <emphasis>wishlist</emphasis> (for <emphasis>optional</emphasis>
        items).
        <footnote>
          <para>
            Compare RFC 2119.  Note, however, that these words are used in
            a different way in this document.
          </para>
        </footnote>
      </para>
      <para>
        Much of the information presented in this manual will be useful
        even when building a package which is to be distributed in some
        other way or is intended for local use only.
      </para>
      <para>
        udebs (stripped-down binary packages used by the Debian Installer)
        do not comply with all of the requirements discussed here.  See
        the <ulink
        url="https://d-i.alioth.debian.org/doc/internals/ch03.html">Debian
        Installer internals manual</ulink> for more information about
        them.
      </para>
    </section>

    <section id="s1.2">
      <title>New versions of this document</title>

      <para>
        This manual is distributed via the Debian package <systemitem
        role="package"><ulink
        url="https://packages.debian.org/debian-policy">debian-policy</ulink></systemitem>.
      </para>
      <para>
        The current version of this document is also available from the
        Debian web mirrors at <ulink
        url="https://www.debian.org/doc/debian-policy/">https://www.debian.org/doc/debian-policy/</ulink>.
        Also available from the same directory are several other formats:
        <ulink
        url="https://www.debian.org/doc/debian-policy/policy.html.tar.gz"><filename>policy.html.tar.gz</filename></ulink>,
        <ulink
        url="https://www.debian.org/doc/debian-policy/policy.pdf.gz"><filename>policy.pdf.gz</filename></ulink>,
        and <ulink
        url="https://www.debian.org/doc/debian-policy/policy.ps.gz"><filename>policy.ps.gz</filename></ulink>.
        Included in both the same directory and in the <systemitem
        role="package">debian-policy</systemitem> package is a standalone
        copy of <xref linkend="upgrading-checklist"/>, which indicates
        policy changes between versions of this document.
      </para>
    </section>

    <section id="s-authors">
      <title>Authors and Maintainers</title>

      <para>
        Originally called "Debian GNU/Linux Policy Manual", this manual
        was initially written in 1996 by Ian Jackson.  It was revised on
        November 27th, 1996 by David A.  Morris.  Christian Schwarz added
        new sections on March 15th, 1997, and reworked/restructured it in
        April-July 1997.  Christoph Lameter contributed the "Web
        Standard".  Julian Gilbey largely restructured it in 2001.
      </para>
      <para>
        Since September 1998, the responsibility for the contents of
        this document lies on the <ulink
        url="mailto:debian-policy@lists.debian.org">debian-policy
        mailing list</ulink>.  Proposals are discussed there and
        inserted into policy after a certain consensus is established.
        The current policy process is described in an appendix, <xref
        linkend="ap-process"/>.  The actual editing is done by a group
        of maintainers that have no editorial powers.  These are the
        current maintainers:
      </para>
      <orderedlist numeration="arabic">
        <listitem>
          <para>
            Russ Allbery
          </para>
        </listitem>
        <listitem>
          <para>
            Bill Allombert
          </para>
        </listitem>
        <listitem>
          <para>
            Andreas Barth
          </para>
        </listitem>
        <listitem>
          <para>
            Sean Whitton
          </para>
        </listitem>
      </orderedlist>
      <para>
        While the authors of this document have tried hard to avoid typos
        and other errors, these do still occur.  If you discover an error
        in this manual or if you want to give any comments, suggestions,
        or criticisms please send an email to the Debian Policy Mailing
        List, <email>debian-policy@lists.debian.org</email>, or submit a
        bug report against the <literal>debian-policy</literal> package.
      </para>
      <para>
        Please do not try to reach the individual authors or maintainers
        of the Policy Manual regarding changes to the Policy.
      </para>
    </section>

    <section id="s-related">
      <title>Related documents</title>

      <para>
        There are several other documents other than this Policy Manual
        that are necessary to fully understand some Debian policies and
        procedures.
      </para>
      <para>
        The external "sub-policy" documents are referred to in:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <xref linkend="s-fhs"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="s-virtual-pkg"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="s-menus"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="s-perl"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="s-maintscriptprompt"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="s-emacs"/>
          </para>
        </listitem>
      </itemizedlist>
      <para>
        In addition to those, which carry the weight of policy, there is
        the Debian Developer's Reference.  This document describes
        procedures and resources for Debian developers, but it is
        <emphasis>not</emphasis> normative; rather, it includes things
        that don't belong in the Policy, such as best practices for
        developers.
      </para>
      <para>
        The Developer's Reference is available in the <systemitem
        role="package">developers-reference</systemitem> package.  It's
        also available from the Debian web mirrors at <ulink
        url="https://www.debian.org/doc/developers-reference/">https://www.debian.org/doc/developers-reference/</ulink>.
      </para>
      <para>
        Finally, a <link linkend="s-copyrightformat">specification for
        machine-readable copyright files</link> is maintained as part of
        the <systemitem role="package">debian-policy</systemitem> package
        using the same procedure as the other policy documents.  Use of
        this format is optional.
      </para>
    </section>

    <section id="s-definitions">
      <title>Definitions</title>

      <para>
        The following terms are used in this Policy Manual:
      </para>
      <variablelist>
        <varlistentry>
          <term>ASCII</term>
          <listitem>
            <para>
              The character encoding specified by ANSI X3.4-1986 and its
              predecessor standards, referred to in MIME as US-ASCII, and
              corresponding to an encoding in eight bits per character of
              the first 128 <ulink
              url="http://www.unicode.org/">Unicode</ulink> characters,
              with the eighth bit always zero.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>UTF-8</term>
          <listitem>
            <para>
              The transformation format (sometimes called encoding) of
              <ulink url="http://www.unicode.org/">Unicode</ulink> defined
              by <ulink
              url="https://www.rfc-editor.org/rfc/rfc3629.txt">RFC
              3629</ulink>.  UTF-8 has the useful property of having ASCII
              as a subset, so any text encoded in ASCII is trivially also
              valid UTF-8.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

  </chapter>

  <chapter id="ch-archive">
    <title>The Debian Archive</title>

    <para>
      The Debian system is maintained and distributed as a collection of
      <emphasis>packages</emphasis>.  Since there are so many of them
      (currently well over 15000), they are split into
      <emphasis>sections</emphasis> and given
      <emphasis>priorities</emphasis> to simplify the handling of them.
    </para>
    <para>
      The effort of the Debian project is to build a free operating
      system, but not every package we want to make accessible is
      <emphasis>free</emphasis> in our sense (see the Debian Free Software
      Guidelines, below), or may be imported/exported without
      restrictions.  Thus, the archive is split into areas
      <footnote>
        <para>
          The Debian archive software uses the term "component" internally
          and in the Release file format to refer to the division of an
          archive.  The Debian Social Contract simply refers to "areas."
          This document uses terminology similar to the Social Contract.
        </para>
      </footnote>
      based on their licenses and other restrictions.
    </para>
    <para>
      The aims of this are:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          to allow us to make as much software available as we can
        </para>
      </listitem>
      <listitem>
        <para>
          to allow us to encourage everyone to write free software, and
        </para>
      </listitem>
      <listitem>
        <para>
          to allow us to make it easy for people to produce CD-ROMs of our
          system without violating any licenses, import/export
          restrictions, or any other laws.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      The <emphasis>main</emphasis> archive area forms the
      <emphasis>Debian distribution</emphasis>.
    </para>
    <para>
      Packages in the other archive areas (<literal>contrib</literal>,
      <literal>non-free</literal>) are not considered to be part of the
      Debian distribution, although we support their use and provide
      infrastructure for them (such as our bug-tracking system and mailing
      lists).  This Debian Policy Manual applies to these packages as
      well.
    </para>

    <section id="s-dfsg">
      <title>The Debian Free Software Guidelines</title>

      <para>
        The Debian Free Software Guidelines (DFSG) form our definition of
        "free software".  These are:
      </para>
      <variablelist>
        <varlistentry>
          <term>1. Free Redistribution</term>
          <listitem>
            <para>
              The license of a Debian component may not restrict any party
              from selling or giving away the software as a component of
              an aggregate software distribution containing programs from
              several different sources.  The license may not require a
              royalty or other fee for such sale.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>2. Source Code</term>
          <listitem>
            <para>
              The program must include source code, and must allow
              distribution in source code as well as compiled form.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>3. Derived Works</term>
          <listitem>
            <para>
              The license must allow modifications and derived works, and
              must allow them to be distributed under the same terms as
              the license of the original software.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>4. Integrity of The Author's Source Code</term>
          <listitem>
            <para>
              The license may restrict source-code from being distributed
              in modified form <emphasis>only</emphasis> if the license
              allows the distribution of "patch files" with the source
              code for the purpose of modifying the program at build time.
              The license must explicitly permit distribution of software
              built from modified source code.  The license may require
              derived works to carry a different name or version number
              from the original software.  (This is a compromise.  The
              Debian Project encourages all authors to not restrict any
              files, source or binary, from being modified.)
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>5. No Discrimination Against Persons or Groups</term>
          <listitem>
            <para>
              The license must not discriminate against any person or
              group of persons.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>6. No Discrimination Against Fields of Endeavor</term>
          <listitem>
            <para>
              The license must not restrict anyone from making use of the
              program in a specific field of endeavor.  For example, it
              may not restrict the program from being used in a business,
              or from being used for genetic research.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>7. Distribution of License</term>
          <listitem>
            <para>
              The rights attached to the program must apply to all to whom
              the program is redistributed without the need for execution
              of an additional license by those parties.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>8. License Must Not Be Specific to Debian</term>
          <listitem>
            <para>
              The rights attached to the program must not depend on the
              program's being part of a Debian system.  If the program is
              extracted from Debian and used or distributed without Debian
              but otherwise within the terms of the program's license, all
              parties to whom the program is redistributed must have the
              same rights as those that are granted in conjunction with
              the Debian system.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>9. License Must Not Contaminate Other Software</term>
          <listitem>
            <para>
              The license must not place restrictions on other software
              that is distributed along with the licensed software.  For
              example, the license must not insist that all other programs
              distributed on the same medium must be free software.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>10. Example Licenses</term>
          <listitem>
            <para>
              The "GPL," "BSD," and "Artistic" licenses are examples of
              licenses that we consider <emphasis>free</emphasis>.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="s-sections">
      <title>Archive areas</title>

      <section id="s-main">
        <title>The main archive area</title>

        <para>
          The <emphasis>main</emphasis> archive area comprises the Debian
          distribution.  Only the packages in this area are considered
          part of the distribution.  None of the packages in the
          <emphasis>main</emphasis> archive area require software outside
          of that area to function.  Anyone may use, share, modify and
          redistribute the packages in this archive area
          freely<footnote><para> See <ulink
          url="https://www.debian.org/intro/free">What Does Free
          Mean?</ulink> for more about what we mean by free software.
          </para> </footnote>.
        </para>
        <para>
          Every package in <emphasis>main</emphasis> must comply with the
          DFSG (Debian Free Software Guidelines).
          <footnote>
            <para>
              Debian's FTP Masters publish a <ulink
              url="https://ftp-master.debian.org/REJECT-FAQ.html">REJECT-FAQ</ulink>
              which details the project's current working
              interpretation of the DFSG.
            </para>
          </footnote>
        </para>
        <para>
          In addition, the packages in <emphasis>main</emphasis>
        </para>
        <itemizedlist>
          <listitem>
            <para>
              must not require or recommend a package outside of
              <emphasis>main</emphasis> for compilation or execution
              (thus, the package must not declare a
              <literal>Pre-Depends</literal>, <literal>Depends</literal>,
              <literal>Recommends</literal>,
              <literal>Build-Depends</literal>,
              <literal>Build-Depends-Indep</literal>, or
              <literal>Build-Depends-Arch</literal> relationship on a
              non-<emphasis>main</emphasis> package),
            </para>
          </listitem>
          <listitem>
            <para>
              must not be so buggy that we refuse to support them, and
            </para>
          </listitem>
          <listitem>
            <para>
              must meet all policy requirements presented in this manual.
            </para>
          </listitem>
        </itemizedlist>
      </section>

      <section id="s-contrib">
        <title>The contrib archive area</title>

        <para>
          The <emphasis>contrib</emphasis> archive area contains
          supplemental packages intended to work with the Debian
          distribution, but which require software outside of the
          distribution to either build or function.
        </para>
        <para>
          Every package in <emphasis>contrib</emphasis> must comply with
          the DFSG.
        </para>
        <para>
          In addition, the packages in <emphasis>contrib</emphasis>
        </para>
        <itemizedlist>
          <listitem>
            <para>
              must not be so buggy that we refuse to support them, and
            </para>
          </listitem>
          <listitem>
            <para>
              must meet all policy requirements presented in this manual.
            </para>
          </listitem>
        </itemizedlist>
        <para>
          Examples of packages which would be included in
          <emphasis>contrib</emphasis> are:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              free packages which require <emphasis>contrib</emphasis>,
              <emphasis>non-free</emphasis> packages or packages which are
              not in our archive at all for compilation or execution, and
            </para>
          </listitem>
          <listitem>
            <para>
              wrapper packages or other sorts of free accessories for
              non-free programs.
            </para>
          </listitem>
        </itemizedlist>
      </section>

      <section id="s-non-free">
        <title>The non-free archive area</title>

        <para>
          The <emphasis>non-free</emphasis> archive area contains
          supplemental packages intended to work with the Debian
          distribution that do not comply with the DFSG or have other
          problems that make their distribution problematic.  They may not
          comply with all of the policy requirements in this manual due to
          restrictions on modifications or other limitations.
        </para>
        <para>
          Packages must be placed in <emphasis>non-free</emphasis> if they
          are not compliant with the DFSG or are encumbered by patents or
          other legal issues that make their distribution problematic.
        </para>
        <para>
          In addition, the packages in <emphasis>non-free</emphasis>
        </para>
        <itemizedlist>
          <listitem>
            <para>
              must not be so buggy that we refuse to support them, and
            </para>
          </listitem>
          <listitem>
            <para>
              must meet all policy requirements presented in this manual
              that it is possible for them to meet.
              <footnote>
                <para>
                  It is possible that there are policy requirements which
                  the package is unable to meet, for example, if the
                  source is unavailable.  These situations will need to be
                  handled on a case-by-case basis.
                </para>
              </footnote>
            </para>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section id="s-pkgcopyright">
      <title>Copyright considerations</title>

      <para>
        Every package must be accompanied by a verbatim copy of its
        copyright information and distribution license in the file
        <filename>/usr/share/doc/<replaceable>package</replaceable>/copyright</filename>
        (see <xref linkend="s-copyrightfile"/> for further details).
      </para>
      <para>
        We reserve the right to restrict files from being included
        anywhere in our archives if
      </para>
      <itemizedlist>
        <listitem>
          <para>
            their use or distribution would break a law,
          </para>
        </listitem>
        <listitem>
          <para>
            there is an ethical conflict in their distribution or use,
          </para>
        </listitem>
        <listitem>
          <para>
            we would have to sign a license for them, or
          </para>
        </listitem>
        <listitem>
          <para>
            their distribution would conflict with other project policies.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Programs whose authors encourage the user to make donations are
        fine for the main distribution, provided that the authors do not
        claim that not donating is immoral, unethical, illegal or
        something similar; in such a case they must go in
        <emphasis>non-free</emphasis>.
      </para>
      <para>
        Packages whose copyright permission notices (or patent problems)
        do not even allow redistribution of binaries only, and where no
        special permission has been obtained, must not be placed on the
        Debian FTP site and its mirrors at all.
      </para>
      <para>
        Note that under international copyright law (this applies in the
        United States, too), <emphasis>no</emphasis> distribution or
        modification of a work is allowed without an explicit notice
        saying so.  Therefore a program without a copyright notice
        <emphasis>is</emphasis> copyrighted and you may not do anything to
        it without risking being sued!  Likewise if a program has a
        copyright notice but no statement saying what is permitted then
        nothing is permitted.
      </para>
      <para>
        Many authors are unaware of the problems that restrictive
        copyrights (or lack of copyright notices) can cause for the users
        of their supposedly-free software.  It is often worthwhile
        contacting such authors diplomatically to ask them to modify their
        license terms.  However, this can be a politically difficult thing
        to do and you should ask for advice on the
        <literal>debian-legal</literal> mailing list first, as explained
        below.
      </para>
      <para>
        When in doubt about a copyright, send mail to
        <email>debian-legal@lists.debian.org</email>.  Be prepared to
        provide us with the copyright statement.  Software covered by the
        GPL, public domain software and BSD-like copyrights are safe; be
        wary of the phrases "commercial use prohibited" and "distribution
        restricted".
      </para>
    </section>

    <section id="s-subsections">
      <title>Sections</title>

      <para>
        The packages in the archive areas <emphasis>main</emphasis>,
        <emphasis>contrib</emphasis> and <emphasis>non-free</emphasis> are
        grouped further into <emphasis>sections</emphasis> to simplify
        handling.
      </para>
      <para>
        The archive area and section for each package should be specified
        in the package's <literal>Section</literal> control record (see
        <xref linkend="s-f-Section"/>).  However, the maintainer of the
        Debian archive may override this selection to ensure the
        consistency of the Debian distribution.  The
        <literal>Section</literal> field should be of the form:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <emphasis>section</emphasis> if the package is in the
            <emphasis>main</emphasis> archive area,
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>area/section</emphasis> if the package is in the
            <emphasis>contrib</emphasis> or <emphasis>non-free</emphasis>
            archive areas.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        The Debian archive maintainers provide the authoritative list
        of sections.  At present, they are: admin, cli-mono, comm,
        database, debug, devel, doc, editors, education, electronics,
        embedded, fonts, games, gnome, gnu-r, gnustep, graphics,
        hamradio, haskell, httpd, interpreters, introspection, java,
        javascript, kde, kernel, libdevel, libs, lisp, localization,
        mail, math, metapackages, misc, net, news, ocaml, oldlibs,
        otherosfs, perl, php, python, ruby, rust, science, shells,
        sound, tasks, tex, text, utils, vcs, video, web, x11, xfce,
        zope.  The additional section
        <emphasis>debian-installer</emphasis> contains special
        packages used by the installer and is not used for normal
        Debian packages.
      </para>
      <para>
        For more information about the sections and their definitions, see
        the <ulink url="https://packages.debian.org/unstable/">list of
        sections in unstable</ulink>.
      </para>
    </section>

    <section id="s-priorities">
      <title>Priorities</title>

      <para>
        Each package must have a <emphasis>priority</emphasis> value,
        which is set in the metadata for the Debian archive and is also
        included in the package's control files (see <xref
        linkend="s-f-Priority"/>).  This information is used to control
        which packages are included in standard or minimal Debian
        installations.
      </para>
      <para>
        Most Debian packages will have a priority of
        <literal>optional</literal>.  Priority levels other than
        <literal>optional</literal> are only used for packages that should
        be included by default in a standard installation of Debian.
      </para>
      <para>
        The priority of a package is determined solely by the
        functionality it provides directly to the user.  The priority of a
        package should not be increased merely because another
        higher-priority package depends on it; instead, the tools used to
        construct Debian installations will correctly handle package
        dependencies.  In particular, this means that C-like libraries
        will almost never have a priority above
        <literal>optional</literal>, since they do not provide
        functionality directly to users.  However, as an exception, the
        maintainers of Debian installers may request an increase of the
        priority of a package to resolve installation issues and ensure
        that the correct set of packages is included in a standard or
        minimal install.
      </para>
      <para>
        The following <emphasis>priority levels</emphasis> are recognized
        by the Debian package management tools.
      </para>
      <variablelist>
        <varlistentry>
          <term><literal>required</literal></term>
          <listitem>
            <para>
              Packages which are necessary for the proper functioning of
              the system (usually, this means that dpkg functionality
              depends on these packages).  Removing a
              <literal>required</literal> package may cause your system to
              become totally broken and you may not even be able to use
              <command>dpkg</command> to put things back, so only do so if
              you know what you are doing.
            </para>
            <para>
              Systems with only the <literal>required</literal>
              packages installed have at least enough functionality
              for the sysadmin to boot the system and install more
              software.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>important</literal></term>
          <listitem>
            <para>
              Important programs, including those which one would expect
              to find on any Unix-like system.  If the expectation is that
              an experienced Unix person who found it missing would say
              "What on earth is going on, where is
              <command>foo</command>?", it must be an
              <literal>important</literal> package.
              <footnote>
                <para>
                  This is an important criterion because we are trying to
                  produce, amongst other things, a free Unix.
                </para>
              </footnote>
              Other packages without which the system will not run well or
              be usable must also have priority
              <literal>important</literal>.  This does
              <emphasis>not</emphasis> include Emacs, the X Window System,
              TeX or any other large applications.  The
              <literal>important</literal> packages are just a bare
              minimum of commonly-expected and necessary tools.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>standard</literal></term>
          <listitem>
            <para>
              These packages provide a reasonably small but not too
              limited character-mode system.  This is what will be
              installed by default if the user doesn't select anything
              else.  It doesn't include many large applications.
            </para>
            <para>
              No two packages that both have a priority of
              <literal>standard</literal> or higher may conflict with each
              other.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>optional</literal></term>
          <listitem>
            <para>
              This is the default priority for the majority of the
              archive.  Unless a package should be installed by default on
              standard Debian systems, it should have a priority of
              <literal>optional</literal>.  Packages with a priority of
              <literal>optional</literal> may conflict with each other.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>extra</literal></term>
          <listitem>
            <para>
              <emphasis>This priority is deprecated.</emphasis> Use the
              <literal>optional</literal> priority instead.  This priority
              should be treated as equivalent to
              <literal>optional</literal>.
            </para>
            <para>
              The <literal>extra</literal> priority was previously used
              for packages that conflicted with other packages and
              packages that were only likely to be useful to people with
              specialized requirements.  However, this distinction was
              somewhat arbitrary, not consistently followed, and not
              useful enough to warrant the maintenance effort.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </chapter>

  <chapter id="ch-binary">
    <title>Binary packages</title>

    <para>
      The Debian distribution is based on the Debian package management
      system, called <command>dpkg</command>.  Thus, all packages in the
      Debian distribution must be provided in the <literal>.deb</literal>
      file format.
    </para>
    <para>
      A <literal>.deb</literal> package contains two sets of files: a set
      of files to install on the system when the package is installed, and
      a set of files that provide additional metadata about the package or
      which are executed when the package is installed or removed.  This
      second set of files is called <emphasis>control information
      files</emphasis>.  Among those files are the package maintainer
      scripts and <filename>control</filename>, the <link
      linkend="s-binarycontrolfiles">binary package control file</link>
      that contains the control fields for the package.  Other control
      information files include the <link
      linkend="s-sharedlibs-symbols"><filename>symbols</filename>
      file</link> or <link
      linkend="s-sharedlibs-shlibdeps"><filename>shlibs</filename>
      file</link> used to store shared library dependency information and
      the <filename>conffiles</filename> file that lists the package's
      configuration files (described in <xref linkend="s-config-files"/>).
    </para>
    <para>
      There is unfortunately a collision of terminology here between
      control information files and files in the Debian control file
      format.  Throughout this document, a <emphasis>control
      file</emphasis> refers to a file in the Debian control file format.
      These files are documented in <xref linkend="ch-controlfields"/>.
      Only files referred to specifically as <emphasis>control information
      files</emphasis> are the files included in the control information
      file member of the <filename>.deb</filename> file format used by
      binary packages.  Most control information files are not in the
      Debian control file format.
    </para>

    <section id="s3.1">
      <title>The package name</title>

      <para>
        Every package must have a name that's unique within the Debian
        archive.
      </para>
      <para>
        The package name is included in the control field
        <literal>Package</literal>, the format of which is described in
        <xref linkend="s-f-Package"/>.  The package name is also included
        as a part of the file name of the <literal>.deb</literal> file.
      </para>
    </section>

    <section id="s-versions">
      <title>The version of a package</title>

      <para>
        Every package has a version number recorded in its
        <literal>Version</literal> control file field, described in <xref
        linkend="s-f-Version"/>.
      </para>
      <para>
        The package management system imposes an ordering on version
        numbers, so that it can tell whether packages are being up- or
        downgraded and so that package system front end applications can
        tell whether a package it finds available is newer than the one
        installed on the system.  The version number format has the most
        significant parts (as far as comparison is concerned) at the
        beginning.
      </para>
      <para>
        If an upstream package has problematic version numbers they should
        be converted to a sane form for use in the
        <literal>Version</literal> field.
      </para>

      <section id="s3.2.1">
        <title>Version numbers based on dates</title>

        <para>
          In general, Debian packages should use the same version numbers
          as the upstream sources.  However, upstream version numbers
          based on some date formats (sometimes used for development or
          "snapshot" releases) will not be ordered correctly by the
          package management software.  For example,
          <command>dpkg</command> will consider "96May01" to be greater
          than "96Dec24".
        </para>
        <para>
          To prevent having to use epochs for every new upstream version,
          the date-based portion of any upstream version number should be
          given in a way that sorts correctly: four-digit year first,
          followed by a two-digit numeric month, followed by a two-digit
          numeric date, possibly with punctuation between the components.
        </para>
        <para>
          Native Debian packages (i.e., packages which have been written
          especially for Debian) whose version numbers include dates
          should also follow these rules.  If punctuation is desired
          between the date components, remember that hyphen
          (<literal>-</literal>) cannot be used in native package
          versions.  Period (<literal>.</literal>) is normally a good
          choice.
        </para>
      </section>
    </section>

    <section id="s-maintainer">
      <title>The maintainer of a package</title>

      <para>
        Every package must have a maintainer, except for orphaned packages
        as described below.  The maintainer may be one person or a group
        of people reachable from a common email address, such as a mailing
        list.  The maintainer is responsible for maintaining the Debian
        packaging files, evaluating and responding appropriately to
        reported bugs, uploading new versions of the package (either
        directly or through a sponsor), ensuring that the package is
        placed in the appropriate archive area and included in Debian
        releases as appropriate for the stability and utility of the
        package, and requesting removal of the package from the Debian
        distribution if it is no longer useful or maintainable.
      </para>
      <para>
        The maintainer must be specified in the
        <literal>Maintainer</literal> control field with their correct
        name and a working email address.  The email address given in the
        <literal>Maintainer</literal> control field must accept mail from
        those role accounts in Debian used to send automated mails
        regarding the package.  This includes non-spam mail from the
        bug-tracking system, all mail from the Debian archive maintenance
        software, and other role accounts or automated processes that are
        commonly agreed on by the project.
        <footnote>
          <para>
            A sample implementation of such a whitelist written for the
            Mailman mailing list management software is used for mailing
            lists hosted by alioth.debian.org.
          </para>
        </footnote>
        If one person or team maintains several packages, they should use
        the same form of their name and email address in the
        <literal>Maintainer</literal> fields of those packages.
      </para>
      <para>
        The format of the <literal>Maintainer</literal> control field is
        described in <xref linkend="s-f-Maintainer"/>.
      </para>
      <para>
        If the maintainer of the package is a team of people with a shared
        email address, the <literal>Uploaders</literal> control field must
        be present and must contain at least one human with their personal
        email address.  See <xref linkend="s-f-Uploaders"/> for the syntax
        of that field.
      </para>
      <para>
        An orphaned package is one with no current maintainer.  Orphaned
        packages should have their <literal>Maintainer</literal> control
        field set to <literal>Debian QA Group
        &lt;packages@qa.debian.org&gt;</literal>.  These packages are
        considered maintained by the Debian project as a whole until
        someone else volunteers to take over maintenance.
        <footnote>
          <para>
            The detailed procedure for gracefully orphaning a package can
            be found in the Debian Developer's Reference (see <xref
            linkend="s-related"/>).
          </para>
        </footnote>
      </para>
    </section>

    <section id="s-descriptions">
      <title>The description of a package</title>

      <para>
        Every Debian package must have a <literal>Description</literal>
        control field which contains a synopsis and extended description
        of the package.  Technical information about the format of the
        <literal>Description</literal> field is in <xref
        linkend="s-f-Description"/>.
      </para>
      <para>
        The description should describe the package (the program) to a
        user (system administrator) who has never met it before so that
        they have enough information to decide whether they want to
        install it.  This description should not just be copied verbatim
        from the program's documentation.
      </para>
      <para>
        Put important information first, both in the synopsis and extended
        description.  Sometimes only the first part of the synopsis or of
        the description will be displayed.  You can assume that there will
        usually be a way to see the whole extended description.
      </para>
      <para>
        The description should also give information about the significant
        dependencies and conflicts between this package and others, so
        that the user knows why these dependencies and conflicts have been
        declared.
      </para>
      <para>
        Instructions for configuring or using the package should not be
        included (that is what installation scripts, manual pages, info
        files, etc., are for).  Copyright statements and other
        administrivia should not be included either (that is what the
        copyright file is for).
      </para>

      <section id="s-synopsis">
        <title>The single line synopsis</title>

        <para>
          The single line synopsis should be kept brief - certainly under
          80 characters.
        </para>
        <para>
          Do not include the package name in the synopsis line.  The
          display software knows how to display this already, and you do
          not need to state it.  Remember that in many situations the user
          may only see the synopsis line - make it as informative as you
          can.
        </para>
      </section>

      <section id="s-extendeddesc">
        <title>The extended description</title>

        <para>
          Do not try to continue the single line synopsis into the
          extended description.  This will not work correctly when the
          full description is displayed, and makes no sense where only the
          summary (the single line synopsis) is available.
        </para>
        <para>
          The extended description should describe what the package does
          and how it relates to the rest of the system (in terms of, for
          example, which subsystem it is which part of).
        </para>
        <para>
          The description field needs to make sense to anyone, even people
          who have no idea about any of the things the package deals
          with.
          <footnote>
            <para>
              The blurb that comes with a program in its announcements
              and/or <command>README</command> files is rarely suitable
              for use in a description.  It is usually aimed at people who
              are already in the community where the package is used.
            </para>
          </footnote>
        </para>
      </section>
    </section>

    <section id="s-dependencies">
      <title>Dependencies</title>

      <para>
        Every package must specify the dependency information about other
        packages that are required for the first to work correctly.
      </para>
      <para>
        For example, a dependency entry must be provided for any shared
        libraries required by a dynamically-linked executable binary in a
        package.
      </para>
      <para>
        Packages are not required to declare any dependencies they have on
        other packages which are marked <literal>Essential</literal> (see
        below), and should not do so unless they depend on a particular
        version of that package.
        <footnote>
          <para>
            Essential is needed in part to avoid unresolvable dependency
            loops on upgrade.  If packages add unnecessary dependencies on
            packages in this set, the chances that there <emphasis
            role="strong">will</emphasis> be an unresolvable dependency
            loop caused by forcing these Essential packages to be
            configured first before they need to be is greatly increased.
            It also increases the chances that frontends will be unable to
            <emphasis role="strong">calculate</emphasis> an upgrade path,
            even if one exists.
          </para>
          <para>
            Also, functionality is rarely ever removed from the Essential
            set, but <emphasis>packages</emphasis> have been removed from
            the Essential set when the functionality moved to a different
            package.  So depending on these packages <emphasis>just in
            case</emphasis> they stop being essential does way more harm
            than good.
          </para>
        </footnote>
      </para>
      <para>
        Sometimes, unpacking one package requires that another package be
        first unpacked <emphasis>and</emphasis> configured.  In this case,
        the depending package must specify this dependency in the
        <literal>Pre-Depends</literal> control field.
      </para>
      <para>
        You should not specify a <literal>Pre-Depends</literal> entry for
        a package before this has been discussed on the
        <literal>debian-devel</literal> mailing list and a consensus about
        doing that has been reached.
      </para>
      <para>
        The format of the package interrelationship control fields is
        described in <xref linkend="ch-relationships"/>.
      </para>
    </section>

    <section id="s-virtual-pkg">
      <title>Virtual packages</title>

      <para>
        Sometimes, there are several packages which offer more-or-less the
        same functionality.  In this case, it's useful to define a
        <emphasis>virtual package</emphasis> whose name describes that
        common functionality.  (The virtual packages only exist logically,
        not physically; that's why they are called
        <emphasis>virtual</emphasis>.) The packages with this particular
        function will then <emphasis>provide</emphasis> the virtual
        package.  Thus, any other package requiring that function can
        simply depend on the virtual package without having to specify all
        possible packages individually.
      </para>
      <para>
        All packages should use virtual package names where appropriate,
        and arrange to create new ones if necessary.  They should not use
        virtual package names (except privately, amongst a cooperating
        group of packages) unless they have been agreed upon and appear in
        the list of virtual package names.  (See also <xref
        linkend="s-virtual"/>)
      </para>
      <para>
        The latest version of the authoritative list of virtual package
        names can be found in the <literal>debian-policy</literal>
        package.  It is also available from the Debian web mirrors at
        <ulink
        url="https://www.debian.org/doc/packaging-manuals/virtual-package-names-list.txt">https://www.debian.org/doc/packaging-manuals/virtual-package-names-list.txt</ulink>.
      </para>
      <para>
        The procedure for updating the list is described in the preface to
        the list.
      </para>
    </section>

    <section id="s3.7">
      <title>Base system</title>

      <para>
        The <literal>base system</literal> is a minimum subset of the
        Debian system that is installed before everything else on a new
        system.  Only very few packages are allowed to form part of the
        base system, in order to keep the required disk usage very small.
      </para>
      <para>
        The base system consists of all those packages with priority
        <literal>required</literal> or <literal>important</literal>.  Many
        of them will be tagged <literal>essential</literal> (see below).
      </para>
    </section>

    <section id="s3.8">
      <title>Essential packages</title>

      <para>
        Essential is defined as the minimal set of functionality that must
        be available and usable on the system at all times, even when
        packages are in the "Unpacked" state.  Packages are tagged
        <literal>essential</literal> for a system using the
        <literal>Essential</literal> control field.  The format of the
        <literal>Essential</literal> control field is described in <xref
        linkend="s-f-Essential"/>.
      </para>
      <para>
        Since these packages cannot be easily removed (one has to specify
        an extra <emphasis>force option</emphasis> to
        <command>dpkg</command> to do so), this flag must not be used
        unless absolutely necessary.  A shared library package must not be
        tagged <literal>essential</literal>; dependencies will prevent its
        premature removal, and we need to be able to remove it when it has
        been superseded.
      </para>
      <para>
        Since dpkg will not prevent upgrading of other packages while an
        <literal>essential</literal> package is in an unconfigured state,
        all <literal>essential</literal> packages must supply all of their
        core functionality even when unconfigured.  If the package cannot
        satisfy this requirement it must not be tagged as essential, and
        any packages depending on this package must instead have explicit
        dependency fields as appropriate.
      </para>
      <para>
        Maintainers should take great care in adding any programs,
        interfaces, or functionality to <literal>essential</literal>
        packages.  Packages may assume that functionality provided by
        <literal>essential</literal> packages is always available without
        declaring explicit dependencies, which means that removing
        functionality from the Essential set is very difficult and is
        almost never done.  Any capability added to an
        <literal>essential</literal> package therefore creates an
        obligation to support that capability as part of the Essential set
        in perpetuity.
      </para>
      <para>
        You must not tag any packages <literal>essential</literal> before
        this has been discussed on the <literal>debian-devel</literal>
        mailing list and a consensus about doing that has been reached.
      </para>
    </section>

    <section id="s-maintscripts">
      <title>Maintainer Scripts</title>

      <para>
        The package installation scripts should avoid producing output
        which is unnecessary for the user to see and should rely on
        <command>dpkg</command> to stave off boredom on the part of a user
        installing many packages.  This means, amongst other things, not
        passing the <literal>--verbose</literal> option to
        <command>update-alternatives</command>.
      </para>
      <para>
        Errors which occur during the execution of an installation script
        must be checked and the installation must not continue after an
        error.
      </para>
      <para>
        Note that in general <xref linkend="s-scripts"/> applies to
        package maintainer scripts, too.
      </para>
      <para>
        You should not use <command>dpkg-divert</command> on a file
        belonging to another package without consulting the maintainer of
        that package first.  When adding or removing diversions, package
        maintainer scripts must provide the <literal>--package</literal>
        flag to <command>dpkg-divert</command> and must not use
        <literal>--local</literal>.
      </para>
      <para>
        All packages which supply an instance of a common command name
        (or, in general, filename) should generally use
        <command>update-alternatives</command>, so that they may be
        installed together.  If <command>update-alternatives</command> is
        not used, then each package must use <literal>Conflicts</literal>
        to ensure that other packages are removed.  (In this case, it may
        be appropriate to specify a conflict against earlier versions of
        something that previously did not use
        <command>update-alternatives</command>; this is an exception to
        the usual rule that versioned conflicts should be avoided.)
      </para>

      <section id="s-maintscriptprompt">
        <title>Prompting in maintainer scripts</title>

        <para>
          Package maintainer scripts may prompt the user if necessary.
          Prompting must be done by communicating through a program, such
          as <command>debconf</command>, which conforms to the Debian
          Configuration Management Specification, version 2 or higher.
        </para>
        <para>
          Packages which are essential, or which are dependencies of
          essential packages, may fall back on another prompting method if
          no such interface is available when they are executed.
        </para>
        <para>
          The Debian Configuration Management Specification is included in
          the <filename>debconf_specification</filename> files in the
          <systemitem role="package">debian-policy</systemitem> package.
          It is also available from the Debian web mirrors at <ulink
          url="https://www.debian.org/doc/packaging-manuals/debconf_specification.html">https://www.debian.org/doc/packaging-manuals/debconf_specification.html</ulink>.
        </para>
        <para>
          Packages which use the Debian Configuration Management
          Specification may contain the additional control information
          files <filename>config</filename> and
          <filename>templates</filename>.  <filename>config</filename> is
          an additional maintainer script used for package configuration,
          and <filename>templates</filename> contains templates used for
          user prompting.  The <command>config</command> script might be
          run before the <command>preinst</command> script and before the
          package is unpacked or any of its dependencies or
          pre-dependencies are satisfied.  Therefore it must work using
          only the tools present in <emphasis>essential</emphasis>
          packages.
          <footnote>
            <para>
              <systemitem role="package">Debconf</systemitem> or another
              tool that implements the Debian Configuration Management
              Specification will also be installed, and any versioned
              dependencies on it will be satisfied before preconfiguration
              begins.
            </para>
          </footnote>
        </para>
        <para>
          Packages which use the Debian Configuration Management
          Specification must allow for translation of their user-visible
          messages by using a gettext-based system such as the one
          provided by the <systemitem
          role="package">po-debconf</systemitem> package.
        </para>
        <para>
          Packages should try to minimize the amount of prompting they
          need to do, and they should ensure that the user will only ever
          be asked each question once.  This means that packages should
          try to use appropriate shared configuration files (such as
          <filename>/etc/papersize</filename> and
          <filename>/etc/news/server</filename>), and shared <systemitem
          role="package">debconf</systemitem> variables rather than each
          prompting for their own list of required pieces of information.
        </para>
        <para>
          It also means that an upgrade should not ask the same questions
          again, unless the user has used <literal>dpkg --purge</literal>
          to remove the package's configuration.  The answers to
          configuration questions should be stored in an appropriate place
          in <filename>/etc</filename> so that the user can modify them,
          and how this has been done should be documented.
        </para>
        <para>
          If a package has a vitally important piece of information to
          pass to the user (such as "don't run me as I am, you must edit
          the following configuration files first or you risk your system
          emitting badly-formatted messages"), it should display this in
          the <command>config</command> or <command>postinst</command>
          script and prompt the user to hit return to acknowledge the
          message.  Copyright messages do not count as vitally important
          (they belong in
          <filename>/usr/share/doc/<replaceable>package</replaceable>/copyright</filename>);
          neither do instructions on how to use a program (these should be
          in on-line documentation, where all the users can see them).
        </para>
        <para>
          Any necessary prompting should almost always be confined to the
          <command>config</command> or <command>postinst</command> script.
          If it is done in the <command>postinst</command>, it should be
          protected with a conditional so that unnecessary prompting
          doesn't happen if a package's installation fails and the
          <command>postinst</command> is called with
          <literal>abort-upgrade</literal>,
          <literal>abort-remove</literal> or
          <literal>abort-deconfigure</literal>.
        </para>
      </section>
    </section>
  </chapter>

  <chapter id="ch-source">
    <title>Source packages</title>

    <section id="s-standardsversion">
      <title>Standards conformance</title>

      <para>
        Source packages should specify the most recent version number of
        this policy document with which your package complied when it was
        last updated.
      </para>
      <para>
        This information may be used to file bug reports automatically if
        your package becomes too much out of date.
      </para>
      <para>
        The version is specified in the
        <literal>Standards-Version</literal> control field.  The format of
        the <literal>Standards-Version</literal> field is described in
        <xref linkend="s-f-Standards-Version"/>.
      </para>
      <para>
        You should regularly, and especially if your package has become
        out of date, check for the newest Policy Manual available and
        update your package, if necessary.  When your package complies
        with the new standards you should update the
        <literal>Standards-Version</literal> source package field and
        release it.
        <footnote>
          <para>
            See the file <filename>upgrading-checklist</filename> for
            information about policy which has changed between different
            versions of this document.
          </para>
        </footnote>
      </para>
    </section>

    <section id="s-pkg-relations">
      <title>Package relationships</title>

      <para>
        Source packages should specify which binary packages they require
        to be installed or not to be installed in order to build
        correctly.  For example, if building a package requires a certain
        compiler, then the compiler should be specified as a build-time
        dependency.
      </para>
      <para>
        It is not necessary to explicitly specify build-time relationships
        on a minimal set of packages that are always needed to compile,
        link and put in a Debian package a standard "Hello World!"
        program written in C or C++.  The required packages are called
        <emphasis>build-essential</emphasis>, and an informational list
        can be found in
        <filename>/usr/share/doc/build-essential/list</filename> (which is
        contained in the <literal>build-essential</literal>
        package).
        <footnote>
          <para>
            Rationale:
          </para>
          <itemizedlist>
            <listitem>
              <para>
                This allows maintaining the list separately from the
                policy documents (the list does not need the kind of
                control that the policy documents do).
              </para>
            </listitem>
            <listitem>
              <para>
                Having a separate package allows one to install the
                build-essential packages on a machine, as well as allowing
                other packages such as tasks to require installation of
                the build-essential packages using the depends relation.
              </para>
            </listitem>
            <listitem>
              <para>
                The separate package allows bug reports against the list
                to be categorized separately from the policy management
                process in the BTS.
              </para>
            </listitem>
          </itemizedlist>
        </footnote>
      </para>
      <para>
        When specifying the set of build-time dependencies, one should
        list only those packages explicitly required by the build.  It is
        not necessary to list packages which are required merely because
        some other package in the list of build-time dependencies depends
        on them.
        <footnote>
          <para>
            The reason for this is that dependencies change, and you
            should list all those packages, and <emphasis>only</emphasis>
            those packages that <emphasis>you</emphasis> need directly.
            What others need is their business.  For example, if you only
            link against <filename>libimlib</filename>, you will need to
            build-depend on <systemitem
            role="package">libimlib2-dev</systemitem> but not against any
            <literal>libjpeg*</literal> packages, even though
            <literal>libimlib2-dev</literal> currently depends on them:
            installation of <systemitem
            role="package">libimlib2-dev</systemitem> will automatically
            ensure that all of its run-time dependencies are satisfied.
          </para>
        </footnote>
      </para>
      <para>
        If build-time dependencies are specified, it must be possible to
        build the package and produce working binaries on a system with
        only essential and build-essential packages installed and also
        those required to satisfy the build-time relationships (including
        any implied relationships).  In particular, this means that
        version clauses should be used rigorously in build-time
        relationships so that one cannot produce bad or inconsistently
        configured packages when the relationships are properly satisfied.
      </para>
      <para>
        <xref linkend="ch-relationships"/> explains the technical details.
      </para>
    </section>

    <section id="s4.3">
      <title>Changes to the upstream sources</title>

      <para>
        If changes to the source code are made that are not specific to
        the needs of the Debian system, they should be sent to the
        upstream authors in whatever form they prefer so as to be included
        in the upstream version of the package.
      </para>
      <para>
        If you need to configure the package differently for Debian or for
        Linux, and the upstream source doesn't provide a way to do so, you
        should add such configuration facilities (for example, a new
        <command>autoconf</command> test or <literal>#define</literal>)
        and send the patch to the upstream authors, with the default set
        to the way they originally had it.  You can then easily override
        the default in your <filename>debian/rules</filename> or wherever
        is appropriate.
      </para>
      <para>
        You should make sure that the <command>configure</command> utility
        detects the correct architecture specification string (refer to
        <xref linkend="s-arch-spec"/> for details).
      </para>
      <para>
        If your package includes the scripts <command>config.sub</command>
        and <command>config.guess</command>, you should arrange for the
        versions provided by the package <systemitem
        role="package">autotools-dev</systemitem> be used instead (see
        <systemitem role="package">autotools-dev</systemitem>
        documentation for details how to achieve that).  This ensures that
        these files can be updated distribution-wide at build time when
        introducing new architectures.
      </para>
      <para>
        If you need to edit a <command>Makefile</command> where GNU-style
        <command>configure</command> scripts are used, you should edit the
        <filename>.in</filename> files rather than editing the
        <command>Makefile</command> directly.  This allows the user to
        reconfigure the package if necessary.  You should
        <emphasis>not</emphasis> configure the package and edit the
        generated <command>Makefile</command>!  This makes it impossible
        for someone else to later reconfigure the package without losing
        the changes you made.
      </para>
    </section>

    <section id="s-dpkgchangelog">
      <title>Debian changelog: <filename>debian/changelog</filename></title>

      <para>
        Changes in the Debian version of the package should be briefly
        explained in the Debian changelog file
        <filename>debian/changelog</filename>.
        <footnote>
          <para>
            Mistakes in changelogs are usually best rectified by making a
            new changelog entry rather than "rewriting history" by editing
            old changelog entries.
          </para>
        </footnote>
        This includes modifications made in the Debian package compared to
        the upstream one as well as other changes and updates to the
        package.
        <footnote>
          <para>
            Although there is nothing stopping an author who is also the
            Debian maintainer from using this changelog for all their
            changes, it will have to be renamed if the Debian and upstream
            maintainers become different people.  In such a case, however,
            it might be better to maintain the package as a non-native
            package.
          </para>
        </footnote>
      </para>
      <para>
        The format of the <filename>debian/changelog</filename> allows the
        package building tools to discover which version of the package is
        being built and find out other release-specific information.
      </para>
      <para>
        That format is a series of entries like this:
      </para>
      <programlisting>
<replaceable>package</replaceable> (<replaceable>version</replaceable>) <replaceable>distribution(s)</replaceable>; urgency=<replaceable>urgency</replaceable>
  <replaceable>[optional blank line(s), stripped]</replaceable>
  * <replaceable>change details</replaceable>
  <replaceable>more change details</replaceable>
  <replaceable>[blank line(s), included in output of dpkg-parsechangelog]</replaceable>
  * <replaceable>even more change details</replaceable>
  <replaceable>[optional blank line(s), stripped]</replaceable>
-- <replaceable>maintainer name</replaceable> &lt;<replaceable>email address</replaceable>&gt;<replaceable>[two spaces]</replaceable>  <replaceable>date</replaceable></programlisting>
      <para>
        <replaceable>package</replaceable> and
        <replaceable>version</replaceable> are the source package name and
        version number.
      </para>
      <para>
        <replaceable>distribution(s)</replaceable> lists the distributions
        where this version should be installed when it is uploaded - it is
        copied to the <literal>Distribution</literal> field in the
        <filename>.changes</filename> file.  See <xref
        linkend="s-f-Distribution"/>.
      </para>
      <para>
        <replaceable>urgency</replaceable> is the value for the
        <literal>Urgency</literal> field in the
        <filename>.changes</filename> file for the upload (see <xref
        linkend="s-f-Urgency"/>).  It is not possible to specify an
        urgency containing commas; commas are used to separate
        <literal><replaceable>keyword</replaceable>=<replaceable>value</replaceable></literal>
        settings in the <command>dpkg</command> changelog format (though
        there is currently only one useful
        <replaceable>keyword</replaceable>, <literal>urgency</literal>).
      </para>
      <para>
        The change details may in fact be any series of lines starting
        with at least two spaces, but conventionally each change starts
        with an asterisk and a separating space and continuation lines are
        indented so as to bring them in line with the start of the text
        above.  Blank lines may be used here to separate groups of
        changes, if desired.
      </para>
      <para>
        If this upload resolves bugs recorded in the Bug Tracking System
        (BTS), they may be automatically closed on the inclusion of this
        package into the Debian archive by including the string:
        <literal>closes:  Bug#<replaceable>nnnnn</replaceable></literal>
        in the change details.
        <footnote>
          <para>
            To be precise, the string should match the following Perl
            regular expression:
          </para>
          <screen>/closes:\s*(?:bug)?\#?\s?\d+(?:,\s*(?:bug)?\#?\s?\d+)*/i</screen>
          <para>
            Then all of the bug numbers listed will be closed by the
            archive maintenance software (<command>dak</command>) using
            the <replaceable>version</replaceable> of the changelog entry.
          </para>
        </footnote>
        This information is conveyed via the <literal>Closes</literal>
        field in the <literal>.changes</literal> file (see <xref
        linkend="s-f-Closes"/>).
      </para>
      <para>
        The maintainer name and email address used in the changelog should
        be the details of the person who prepared this release of the
        package.  They are <emphasis>not</emphasis> necessarily those of
        the uploader or usual package maintainer.
        <footnote>
          <para>
            In the case of a sponsored upload, the uploader signs the
            files, but the changelog maintainer name and address are those
            of the person who prepared this release.  If the preparer of
            the release is not one of the usual maintainers of the package
            (as listed in the <link
            linkend="s-f-Maintainer"><literal>Maintainer</literal></link>
            or <link
            linkend="s-f-Uploaders"><literal>Uploaders</literal></link>
            control fields of the package), the first line of the
            changelog is conventionally used to explain why a
            non-maintainer is uploading the package.  The Debian
            Developer's Reference (see <xref linkend="s-related"/>)
            documents the conventions used.
          </para>
        </footnote>
        The information here will be copied to the
        <literal>Changed-By</literal> field in the
        <literal>.changes</literal> file (see <xref
        linkend="s-f-Changed-By"/>), and then later used to send an
        acknowledgement when the upload has been installed.
      </para>
      <para>
        The <replaceable>date</replaceable> has the following format
        <footnote>
          <para>
            This is the same as the format generated by <literal>date
            -R</literal>.
          </para>
        </footnote>
        (compatible and with the same semantics of RFC 2822 and RFC 5322):
      </para>
      <screen>day-of-week, dd month yyyy hh:mm:ss +zzzz</screen>
      <para>
        where:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            day-of week is one of: Mon, Tue, Wed, Thu, Fri, Sat, Sun
          </para>
        </listitem>
        <listitem>
          <para>
            dd is a one- or two-digit day of the month (01-31)
          </para>
        </listitem>
        <listitem>
          <para>
            month is one of: Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
            Oct, Nov, Dec
          </para>
        </listitem>
        <listitem>
          <para>
            yyyy is the four-digit year (e.g.  2010)
          </para>
        </listitem>
        <listitem>
          <para>
            hh is the two-digit hour (00-23)
          </para>
        </listitem>
        <listitem>
          <para>
            mm is the two-digit minutes (00-59)
          </para>
        </listitem>
        <listitem>
          <para>
            ss is the two-digit seconds (00-60)
          </para>
        </listitem>
        <listitem>
          <para>
            +zzzz or -zzzz is the time zone offset from Coordinated
            Universal Time (UTC).  "+" indicates that the time is ahead of
            (i.e., east of) UTC and "-" indicates that the time is behind
            (i.e., west of) UTC.  The first two digits indicate the hour
            difference from UTC and the last two digits indicate the
            number of additional minutes difference from UTC.  The last
            two digits must be in the range 00-59.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        The first "title" line with the package name must start at the
        left hand margin.  The "trailer" line with the maintainer and date
        details must be preceded by exactly one space.  The maintainer
        details and the date must be separated by exactly two spaces.
      </para>
      <para>
        The entire changelog must be encoded in UTF-8.
      </para>
      <para>
        For more information on placement of the changelog files within
        binary packages, please see <xref linkend="s-changelogs"/>.
      </para>
    </section>

    <section id="s-dpkgcopyright">
      <title>Copyright: <filename>debian/copyright</filename></title>

      <para>
        Every package must be accompanied by a verbatim copy of its
        copyright information and distribution license in the file
        <filename>/usr/share/doc/<replaceable>package</replaceable>/copyright</filename>
        (see <xref linkend="s-copyrightfile"/> for further details).  Also
        see <xref linkend="s-pkgcopyright"/> for further considerations
        related to copyrights for packages.
      </para>
    </section>

    <section id="s4.6">
      <title>Error trapping in makefiles</title>

      <para>
        When <command>make</command> invokes a command in a makefile
        (including your package's upstream makefiles and
        <filename>debian/rules</filename>), it does so using
        <command>sh</command>.  This means that <command>sh</command>'s
        usual bad error handling properties apply: if you include a
        miniature script as one of the commands in your makefile you'll
        find that if you don't do anything about it then errors are not
        detected and <command>make</command> will blithely continue after
        problems.
      </para>
      <para>
        Every time you put more than one shell command (this includes
        using a loop) in a makefile command you must make sure that errors
        are trapped.  For simple compound commands, such as changing
        directory and then running a program, using
        <literal>&amp;&amp;</literal> rather than semicolon as a command
        separator is sufficient.  For more complex commands including most
        loops and conditionals you should include a separate <literal>set
        -e</literal> command at the start of every makefile command that's
        actually one of these miniature shell scripts.
      </para>
    </section>

    <section id="s-timestamps">
      <title>Time Stamps</title>

      <para>
        Maintainers should preserve the modification times of the upstream
        source files in a package, as far as is reasonably possible.
        <footnote>
          <para>
            The rationale is that there is some information conveyed by
            knowing the age of the file, for example, you could recognize
            that some documentation is very old by looking at the
            modification time, so it would be nice if the modification
            time of the upstream source would be preserved.
          </para>
        </footnote>
      </para>
    </section>

    <section id="s-restrictions">
      <title>Restrictions on objects in source packages</title>

      <para>
        The source package may not contain any hard links,
        <footnote>
          <para>
            This is not currently detected when building source packages,
            but only when extracting them.
          </para>
          <para>
            Hard links may be permitted at some point in the future, but
            would require a fair amount of work.
          </para>
        </footnote>
        device special files, sockets or setuid or setgid files.
        <footnote>
          <para>
            Setgid directories are allowed.
          </para>
        </footnote>
      </para>
    </section>

    <section id="s-debianrules">
      <title>Main building script: <filename>debian/rules</filename></title>

      <para>
        This file must be an executable makefile, and contains the
        package-specific recipes for compiling the package and building
        binary package(s) from the source.
      </para>
      <para>
        It must start with the line <literal>#!/usr/bin/make -f</literal>,
        so that it can be invoked by saying its name rather than invoking
        <command>make</command> explicitly.  That is, invoking either of
        <literal>make -f debian/rules
        <replaceable>args...</replaceable></literal> or
        <literal>./debian/rules
        <replaceable>args...</replaceable></literal> must result in
        identical behavior.
      </para>
      <para>
        The following targets are required and must be implemented by
        <filename>debian/rules</filename>: <literal>clean</literal>,
        <literal>binary</literal>, <literal>binary-arch</literal>,
        <literal>binary-indep</literal>, <literal>build</literal>,
        <literal>build-arch</literal> and <literal>build-indep</literal>.
        These are the targets called by
        <command>dpkg-buildpackage</command>.
      </para>
      <para>
        Since an interactive <filename>debian/rules</filename> script
        makes it impossible to auto-compile that package and also makes it
        hard for other people to reproduce the same binary package, all
        required targets must be non-interactive.  It also follows that
        any target that these targets depend on must also be
        non-interactive.
      </para>
      <para>
        For packages in the main archive, no required targets may attempt
        network access.
      </para>
      <para>
        The targets are as follows:
      </para>
      <variablelist>
        <varlistentry>
          <term><literal>build</literal> (required)</term>
          <listitem>
            <para>
              The <literal>build</literal> target should perform all the
              configuration and compilation of the package.  If a package
              has an interactive pre-build configuration routine, the
              Debian source package must either be built after this has
              taken place (so that the binary package can be built without
              rerunning the configuration) or the configuration routine
              modified to become non-interactive.  (The latter is
              preferable if there are architecture-specific features
              detected by the configuration routine.)
            </para>
            <para>
              For some packages, notably ones where the same source tree
              is compiled in different ways to produce two binary
              packages, the <literal>build</literal> target does not make
              much sense.  For these packages it is good enough to provide
              two (or more) targets (<literal>build-a</literal> and
              <literal>build-b</literal> or whatever) for each of the ways
              of building the package, and a <literal>build</literal>
              target that does nothing.  The <literal>binary</literal>
              target will have to build the package in each of the
              possible ways and make the binary package out of each.
            </para>
            <para>
              The <literal>build</literal> target must not do anything
              that might require root privilege.
            </para>
            <para>
              The <literal>build</literal> target may need to run the
              <literal>clean</literal> target first - see below.
            </para>
            <para>
              When a package has a configuration and build routine which
              takes a long time, or when the makefiles are poorly
              designed, or when <literal>build</literal> needs to run
              <literal>clean</literal> first, it is a good idea to
              <literal>touch build</literal> when the build process is
              complete.  This will ensure that if <literal>debian/rules
              build</literal> is run again it will not rebuild the whole
              program.
              <footnote>
                <para>
                  Another common way to do this is for
                  <literal>build</literal> to depend on
                  <command>build-stamp</command> and to do nothing else,
                  and for the <command>build-stamp</command> target to do
                  the building and to <literal>touch build-stamp</literal>
                  on completion.  This is especially useful if the build
                  routine creates a file or directory called
                  <literal>build</literal>; in such a case,
                  <literal>build</literal> will need to be listed as a
                  phony target (i.e., as a dependency of the
                  <literal>.PHONY</literal> target).  See the
                  documentation of <command>make</command> for more
                  information on phony targets.
                </para>
              </footnote>
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>build-arch</literal> (required),
            <literal>build-indep</literal> (required)
          </term>
          <listitem>
            <para>
              The <literal>build-arch</literal> target must perform all
              the configuration and compilation required for producing all
              architecture-dependent binary packages (those packages for
              which the body of the <literal>Architecture</literal> field
              in <literal>debian/control</literal> is not
              <literal>all</literal>).  Similarly, the
              <literal>build-indep</literal> target must perform all the
              configuration and compilation required for producing all
              architecture-independent binary packages (those packages for
              which the body of the <literal>Architecture</literal> field
              in <literal>debian/control</literal> is
              <literal>all</literal>).  The <literal>build</literal>
              target should either depend on those targets or take the
              same actions as invoking those targets would
              perform.
              <footnote>
                <para>
                  This split allows binary-only builds to not install the
                  dependencies required for the
                  <literal>build-indep</literal> target and skip any
                  resource-intensive build tasks that are only required
                  when building architecture-independent binary packages.
                </para>
              </footnote>
            </para>
            <para>
              The <literal>build-arch</literal> and
              <literal>build-indep</literal> targets must not do anything
              that might require root privilege.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>binary</literal> (required),
            <literal>binary-arch</literal> (required),
            <literal>binary-indep</literal> (required)
          </term>
          <listitem>
            <para>
              The <literal>binary</literal> target must be all that is
              necessary for the user to build the binary package(s)
              produced from this source package.  It is split into two
              parts: <command>binary-arch</command> builds the binary
              packages which are specific to a particular architecture,
              and <literal>binary-indep</literal> builds those which are
              not.
            </para>
            <para>
              <literal>binary</literal> may be (and commonly is) a target
              with no commands which simply depends on
              <literal>binary-arch</literal> and
              <literal>binary-indep</literal>.
            </para>
            <para>
              Both <literal>binary-*</literal> targets should depend on
              the <literal>build</literal> target, or on the appropriate
              <literal>build-arch</literal> or
              <literal>build-indep</literal> target, so that the package
              is built if it has not been already.  It should then create
              the relevant binary package(s), using
              <command>dpkg-gencontrol</command> to make their control
              files and <command>dpkg-deb</command> to build them and
              place them in the parent of the top level directory.
            </para>
            <para>
              Both the <literal>binary-arch</literal> and
              <literal>binary-indep</literal> targets
              <emphasis>must</emphasis> exist.  If one of them has nothing
              to do (which will always be the case if the source generates
              only a single binary package, whether architecture-dependent
              or not), it must still exist and must always succeed.
            </para>
            <para>
              The <literal>binary</literal> targets must be invoked as
              root.
              <footnote>
                <para>
                  The <command>fakeroot</command> package often allows one
                  to build a package correctly even without being root.
                </para>
              </footnote>
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>clean</literal> (required)</term>
          <listitem>
            <para>
              This must undo any effects that the <literal>build</literal>
              and <literal>binary</literal> targets may have had, except
              that it should leave alone any output files created in the
              parent directory by a run of a <literal>binary</literal>
              target.
            </para>
            <para>
              If a <literal>build</literal> file is touched at the end of
              the <literal>build</literal> target, as suggested above, it
              should be removed as the first action that
              <literal>clean</literal> performs, so that running
              <literal>build</literal> again after an interrupted
              <literal>clean</literal> doesn't think that everything is
              already done.
            </para>
            <para>
              The <literal>clean</literal> target may need to be invoked
              as root if <literal>binary</literal> has been invoked since
              the last <literal>clean</literal>, or if
              <literal>build</literal> has been invoked as root (since
              <literal>build</literal> may create directories, for
              example).
            </para>
            <para>
              The <literal>clean</literal> target cannot be used to
              remove files in the source tree that are not compatible
              with the DFSG.  This is because the files would remain
              in the upstream tarball, and thus in the source package,
              so the source package would continue to violate DFSG.
              Instead, the upstream source should be repacked to
              remove those files.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>get-orig-source</literal> (optional)</term>
          <listitem>
            <para>
              This target fetches the most recent version of the original
              source package from a canonical archive site (via FTP or
              WWW, for example), does any necessary rearrangement to turn
              it into the original source tar file format described below,
              and leaves it in the current directory.
            </para>
            <para>
              This target may be invoked in any directory, and should take
              care to clean up any temporary files it may have left.
            </para>
            <para>
              This target is optional, but providing it if possible is a
              good idea.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>patch</literal> (optional)</term>
          <listitem>
            <para>
              This target performs whatever additional actions are
              required to make the source ready for editing (unpacking
              additional upstream archives, applying patches, etc.).  It
              is recommended to be implemented for any package where
              <literal>dpkg-source -x</literal> does not result in source
              ready for additional modification.  See <xref
              linkend="s-readmesource"/>.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>
        The <literal>build</literal>, <literal>binary</literal> and
        <literal>clean</literal> targets must be invoked with the current
        directory being the package's top-level directory.
      </para>
      <para>
        Additional targets may exist in <filename>debian/rules</filename>,
        either as published or undocumented interfaces or for the
        package's internal use.
      </para>
      <para>
        The architectures we build on and build for are determined by
        <command>make</command> variables using the utility
        <command>dpkg-architecture</command>.  You can determine the
        Debian architecture and the GNU style architecture specification
        string for the build architecture as well as for the host
        architecture.  The build architecture is the architecture on which
        <filename>debian/rules</filename> is run and the package build is
        performed.  The host architecture is the architecture on which the
        resulting package will be installed and run.  The target
        architecture is the architecture of the packages that the compiler
        currently being built will generate.  These are normally the same,
        but may be different in the case of cross-compilation (building
        packages for one architecture on machines of a different
        architecture), building a cross-compiler (a compiler package that
        will generate objects for one architecture, built on a machine of
        a different architecture) or a Canadian cross-compiler (a compiler
        that will generate objects for one architecture, built on a
        machine of a different architecture, that will run on yet a
        different architecture).
      </para>
      <para>
        Here is a list of supported <command>make</command> variables:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <literal>DEB_*_ARCH</literal> (the Debian architecture)
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>DEB_*_ARCH_CPU</literal> (the Debian CPU name)
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>DEB_*_ARCH_BITS</literal> (the Debian CPU pointer
            size in bits)
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>DEB_*_ARCH_ENDIAN</literal> (the Debian CPU endianness)
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>DEB_*_ARCH_OS</literal> (the Debian System name)
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>DEB_*_GNU_TYPE</literal> (the GNU style architecture
            specification string)
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>DEB_*_GNU_CPU</literal> (the CPU part of
            <literal>DEB_*_GNU_TYPE</literal>)
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>DEB_*_GNU_SYSTEM</literal> (the System part of
            <literal>DEB_*_GNU_TYPE</literal>)
          </para>
        </listitem>
      </itemizedlist>
      <para>
        where <literal>*</literal> is either <literal>BUILD</literal> for
        specification of the build architecture, <literal>HOST</literal>
        for specification of the host architecture or
        <literal>TARGET</literal> for specification of the target
        architecture.
      </para>
      <para>
        Backward compatibility can be provided in the rules file by
        setting the needed variables to suitable default values; please
        refer to the documentation of <command>dpkg-architecture</command>
        for details.
      </para>
      <para>
        It is important to understand that the
        <literal>DEB_*_ARCH</literal> string only determines which Debian
        architecture we are building on or for.  It should not be used to
        get the CPU or system information; the
        <literal>DEB_*_ARCH_CPU</literal> and
        <literal>DEB_*_ARCH_OS</literal> variables should be used for
        that.  GNU style variables should generally only be used with
        upstream build systems.
      </para>

      <section id="s-debianrules-options">
        <title>
          <filename>debian/rules</filename> and
          <literal>DEB_BUILD_OPTIONS</literal>
        </title>

        <para>
          Supporting the standardized environment variable
          <literal>DEB_BUILD_OPTIONS</literal> is recommended.  This
          variable can contain several flags to change how a package is
          compiled and built.  Each flag must be in the form
          <replaceable>flag</replaceable> or
          <replaceable>flag</replaceable>=<replaceable>options</replaceable>.
          If multiple flags are given, they must be separated by
          whitespace.
          <footnote>
            <para>
              Some packages support any delimiter, but whitespace is the
              easiest to parse inside a makefile and avoids ambiguity with
              flag values that contain commas.
            </para>
          </footnote>
          <replaceable>flag</replaceable> must start with a lowercase
          letter (<literal>a-z</literal>) and consist only of lowercase
          letters, numbers (<literal>0-9</literal>), and the characters
          <literal>-</literal> and <literal>_</literal> (hyphen and
          underscore).  <replaceable>options</replaceable> must not
          contain whitespace.  The same tag should not be given multiple
          times with conflicting values.  Package maintainers may assume
          that <literal>DEB_BUILD_OPTIONS</literal> will not contain
          conflicting tags.
        </para>
        <para>
          The meaning of the following tags has been standardized:
        </para>
        <variablelist>
          <varlistentry>
            <term>nocheck</term>
            <listitem>
              <para>
                This tag says to not run any build-time test suite
                provided by the package.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>nodoc</term>
            <listitem>
              <para>
                This tag says to skip any build steps that only generate
                package documentation.  Files required by other sections
                of Debian Policy, such as copyright and changelog files,
                must still be generated and put in the package, but other
                generated documentation such as help2man-generated pages,
                Doxygen-generated API documentation, or info pages
                generated from Texinfo sources should be skipped if
                possible.  This option does not change the set of binary
                packages generated by the source package, but
                documentation-only binary packages may be nearly empty
                when built with this option.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>noopt</term>
            <listitem>
              <para>
                The presence of this tag means that the package should be
                compiled with a minimum of optimization.  For C programs,
                it is best to add <literal>-O0</literal> to
                <literal>CFLAGS</literal> (although this is usually the
                default).  Some programs might fail to build or run at
                this level of optimization; it may be necessary to use
                <literal>-O1</literal>, for example.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>nostrip</term>
            <listitem>
              <para>
                This tag means that the debugging symbols should not be
                stripped from the binary during installation, so that
                debugging information may be included in the package.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>parallel=n</term>
            <listitem>
              <para>
                This tag means that the package should be built using up
                to <literal>n</literal> parallel processes if the package
                build system supports this.
                <footnote>
                  <para>
                    Packages built with <literal>make</literal> can often
                    implement this by passing the
                    <literal>-j</literal><replaceable>n</replaceable>
                    option to <literal>make</literal>.
                  </para>
                </footnote>
                If the package build system does not support parallel
                builds, this string must be ignored.  If the package build
                system only supports a lower level of concurrency than
                <replaceable>n</replaceable>, the package should be built
                using as many parallel processes as the package build
                system supports.  It is up to the package maintainer to
                decide whether the package build times are long enough and
                the package build system is robust enough to make
                supporting parallel builds worthwhile.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
        <para>
          Unknown flags must be ignored by
          <filename>debian/rules</filename>.
        </para>
        <para>
          The following makefile snippet is an example of how one may
          implement the build options; you will probably have to massage
          this example in order to make it work for your package.
        </para>
        <programlisting>
CFLAGS = -Wall -g
INSTALL = install
INSTALL_FILE    = $(INSTALL) -p    -o root -g root  -m  644
INSTALL_PROGRAM = $(INSTALL) -p    -o root -g root  -m  755
INSTALL_SCRIPT  = $(INSTALL) -p    -o root -g root  -m  755
INSTALL_DIR     = $(INSTALL) -p -d -o root -g root  -m  755

ifneq (,$(filter noopt,$(DEB_BUILD_OPTIONS)))
    CFLAGS += -O0
else
    CFLAGS += -O2
endif
ifeq (,$(filter nostrip,$(DEB_BUILD_OPTIONS)))
    INSTALL_PROGRAM += -s
endif
ifneq (,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
    NUMJOBS = $(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
    MAKEFLAGS += -j$(NUMJOBS)
endif

build:
        # ...
ifeq (,$(filter nocheck,$(DEB_BUILD_OPTIONS)))
        # Code to run the package test suite.
endif</programlisting>
      </section>
    </section>

    <section id="s-substvars">
      <title>
        Variable substitutions: <filename>debian/substvars</filename>
      </title>

      <para>
        When <command>dpkg-gencontrol</command> generates <link
        linkend="s-binarycontrolfiles">binary package control files</link>
        (<filename>DEBIAN/control</filename>), it performs variable
        substitutions on its output just before writing it.  Variable
        substitutions have the form
        <literal>${<replaceable>variable</replaceable>}</literal>.  The
        optional file <filename>debian/substvars</filename> contains
        variable substitutions to be used; variables can also be set
        directly from <filename>debian/rules</filename> using the
        <literal>-V</literal> option to the source packaging commands, and
        certain predefined variables are also available.
      </para>
      <para>
        The <filename>debian/substvars</filename> file is usually
        generated and modified dynamically by
        <filename>debian/rules</filename> targets, in which case it must
        be removed by the <literal>clean</literal> target.
      </para>
      <para>
        See
        <citerefentry><refentrytitle>deb-substvars</refentrytitle><manvolnum>5</manvolnum></citerefentry>
        for full details about source variable substitutions, including
        the format of <filename>debian/substvars</filename>.
      </para>
    </section>

    <section id="s-debianwatch">
      <title>
        Optional upstream source location: <filename>debian/watch</filename>
      </title>

      <para>
        This is an optional, recommended configuration file for the
        <literal>uscan</literal> utility which defines how to
        automatically scan ftp or http sites for newly available updates
        of the package.  This is used Debian QA tools to help with quality
        control and maintenance of the distribution as a whole.
      </para>
    </section>

    <section id="s-debianfiles">
      <title>Generated files list: <filename>debian/files</filename></title>

      <para>
        This file is not a permanent part of the source tree; it is used
        while building packages to record which files are being generated.
        <command>dpkg-genchanges</command> uses it when it generates a
        <filename>.changes</filename> file.
      </para>
      <para>
        It should not exist in a shipped source package, and so it (and
        any backup files or temporary files such as
        <filename>files.new</filename>)
        <footnote>
          <para>
            <filename>files.new</filename> is used as a temporary file by
            <command>dpkg-gencontrol</command> and
            <command>dpkg-distaddfile</command> - they write a new version
            of <literal>files</literal> here before renaming it, to avoid
            leaving a corrupted copy if an error occurs.
          </para>
        </footnote>
        should be removed by the <literal>clean</literal> target.  It may
        also be wise to ensure a fresh start by emptying or removing it at
        the start of the <literal>binary</literal> target.
      </para>
      <para>
        When <command>dpkg-gencontrol</command> is run for a binary
        package, it adds an entry to <filename>debian/files</filename> for
        the <filename>.deb</filename> file that will be created when
        <literal>dpkg-deb --build</literal> is run for that binary
        package.  So for most packages all that needs to be done with this
        file is to delete it in the <literal>clean</literal> target.
      </para>
      <para>
        If a package upload includes files besides the source package and
        any binary packages whose control files were made with
        <command>dpkg-gencontrol</command> then they should be placed in
        the parent of the package's top-level directory and
        <command>dpkg-distaddfile</command> should be called to add the
        file to the list in <filename>debian/files</filename>.
      </para>
    </section>

    <section id="s-embeddedfiles">
      <title>Convenience copies of code</title>

      <para>
        Some software packages include in their distribution convenience
        copies of code from other software packages, generally so that
        users compiling from source don't have to download multiple
        packages.  Debian packages should not make use of these
        convenience copies unless the included package is explicitly
        intended to be used in this way.
        <footnote>
          <para>
            For example, parts of the GNU build system work like this.
          </para>
        </footnote>
        If the included code is already in the Debian archive in the form
        of a library, the Debian packaging should ensure that binary
        packages reference the libraries already in Debian and the
        convenience copy is not used.  If the included code is not already
        in Debian, it should be packaged separately as a prerequisite if
        possible.
        <footnote>
          <para>
            Having multiple copies of the same code in Debian is
            inefficient, often creates either static linking or shared
            library conflicts, and, most importantly, increases the
            difficulty of handling security vulnerabilities in the
            duplicated code.
          </para>
        </footnote>
      </para>
    </section>

    <section id="s-readmesource">
      <title>
        Source package handling: <filename>debian/README.source</filename>
      </title>
      <para>
        If running <command>dpkg-source -x</command> on a source package
        doesn't produce the source of the package, ready for editing, and
        allow one to make changes and run
        <command>dpkg-buildpackage</command> to produce a modified package
        without taking any additional steps, creating a
        <filename>debian/README.source</filename> documentation file is
        recommended.  This file should explain how to do all of the
        following:
      </para>
      <orderedlist numeration="arabic">
        <listitem>
          <para>
            Generate the fully patched source, in a form ready for
            editing, that would be built to create Debian packages.  Doing
            this with a <literal>patch</literal> target in
            <filename>debian/rules</filename> is recommended; see <xref
            linkend="s-debianrules"/>.
          </para>
        </listitem>
        <listitem>
          <para>
            Modify the source and save those modifications so that they
            will be applied when building the package.
          </para>
        </listitem>
        <listitem>
          <para>
            Remove source modifications that are currently being applied
            when building the package.
          </para>
        </listitem>
        <listitem>
          <para>
            Optionally, document what steps are necessary to upgrade the
            Debian source package to a new upstream version, if
            applicable.
          </para>
        </listitem>
      </orderedlist>
      <para>
        This explanation should include specific commands and mention any
        additional required Debian packages.  It should not assume
        familiarity with any specific Debian packaging system or patch
        management tools.
      </para>
      <para>
        This explanation may refer to a documentation file installed by
        one of the package's build dependencies provided that the
        referenced documentation clearly explains these tasks and is not a
        general reference manual.
      </para>
      <para>
        <filename>debian/README.source</filename> may also include any
        other information that would be helpful to someone modifying the
        source package.  Even if the package doesn't fit the above
        description, maintainers are encouraged to document in a
        <filename>debian/README.source</filename> file any source package
        with a particularly complex or unintuitive source layout or build
        system (for example, a package that builds the same source
        multiple times to generate different binary packages).
      </para>
    </section>
  </chapter>

  <chapter id="ch-controlfields">
    <title>Control files and their fields</title>

    <para>
      The package management system manipulates data represented in a
      common format, known as <emphasis>control data</emphasis>, stored in
      <emphasis>control files</emphasis>.  Control files are used for
      source packages, binary packages and the
      <filename>.changes</filename> files which control the installation
      of uploaded files.
      <footnote>
        <para>
          <command>dpkg</command>'s internal databases are in a similar
          format.
        </para>
      </footnote>
    </para>

    <section id="s-controlsyntax">
      <title>Syntax of control files</title>

      <para>
        A control file consists of one or more paragraphs of fields.
        <footnote>
          <para>
            The paragraphs are also sometimes referred to as stanzas.
          </para>
        </footnote>
        The paragraphs are separated by empty lines.  Parsers may accept
        lines consisting solely of spaces and tabs as paragraph
        separators, but control files should use empty lines.  Some
        control files allow only one paragraph; others allow several, in
        which case each paragraph usually refers to a different package.
        (For example, in source packages, the first paragraph refers to
        the source package, and later paragraphs refer to binary packages
        generated from the source.) The ordering of the paragraphs in
        control files is significant.
      </para>
      <para>
        Each paragraph consists of a series of data fields.  Each field
        consists of the field name followed by a colon and then the
        data/value associated with that field.  The field name is composed
        of US-ASCII characters excluding control characters, space, and
        colon (i.e., characters in the ranges U+0021
        (<literal>!</literal>) through U+0039 (<literal>9</literal>), and
        U+003B (<literal>;</literal>) through U+007E
        (<literal>~</literal>), inclusive).  Field names must not begin
        with the comment character (U+0023 <literal>#</literal>), nor with
        the hyphen character (U+002D <literal>-</literal>).
      </para>
      <para>
        The field ends at the end of the line or at the end of the last
        continuation line (see below).  Horizontal whitespace (spaces and
        tabs) may occur immediately before or after the value and is
        ignored there; it is conventional to put a single space after the
        colon.  For example, a field might be:
      </para>
      <programlisting>Package: libc6</programlisting>
      <para>
        the field name is <literal>Package</literal> and the field value
        <literal>libc6</literal>.
      </para>
      <para>
        Empty field values are only permitted in source package control
        files (<filename>debian/control</filename>).  Such fields are
        ignored.
      </para>
      <para>
        A paragraph must not contain more than one instance of a
        particular field name.
      </para>
      <para>
        There are three types of fields:
      </para>
      <variablelist>
        <varlistentry>
          <term>simple</term>
          <listitem>
            <para>
              The field, including its value, must be a single line.
              Folding of the field is not permitted.  This is the default
              field type if the definition of the field does not specify a
              different type.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>folded</term>
          <listitem>
            <para>
              The value of a folded field is a logical line that may span
              several lines.  The lines after the first are called
              continuation lines and must start with a space or a tab.
              Whitespace, including any newlines, is not significant in
              the field values of folded fields.
              <footnote>
                <para>
                  This folding method is similar to RFC 5322, allowing
                  control files that contain only one paragraph and no
                  multiline fields to be read by parsers written for RFC
                  5322.
                </para>
              </footnote>
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>multiline</term>
          <listitem>
            <para>
              The value of a multiline field may comprise multiple
              continuation lines.  The first line of the value, the part
              on the same line as the field name, often has special
              significance or may have to be empty.  Other lines are added
              following the same syntax as the continuation lines of the
              folded fields.  Whitespace, including newlines, is
              significant in the values of multiline fields.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>
        Whitespace must not appear inside names (of packages,
        architectures, files or anything else) or version numbers, or
        between the characters of multi-character version relationships.
      </para>
      <para>
        The presence and purpose of a field, and the syntax of its value
        may differ between types of control files.
      </para>
      <para>
        Field names are not case-sensitive, but it is usual to capitalize
        the field names using mixed case as shown below.  Field values are
        case-sensitive unless the description of the field says otherwise.
      </para>
      <para>
        Paragraph separators (empty lines), and lines consisting only of
        U+0020 SPACE and U+0009 TAB, are not allowed within field values
        or between fields.  Empty lines in field values are usually
        escaped by representing them by a U+0020 SPACE followed by a
        U+002E (<literal>.</literal>).
      </para>
      <para>
        Lines starting with U+0023 (<literal>#</literal>), without any
        preceding whitespace, are comment lines that are only permitted in
        source package control files
        (<filename>debian/control</filename>).  These comment lines are
        ignored, even between two continuation lines.  They do not end
        logical lines.
      </para>
      <para>
        All control files must be encoded in UTF-8.
      </para>
    </section>

    <section id="s-sourcecontrolfiles">
      <title>
        Source package control files -- <filename>debian/control</filename>
      </title>

      <para>
        The <filename>debian/control</filename> file contains the most
        vital (and version-independent) information about the source
        package and about the binary packages it creates.
      </para>
      <para>
        The first paragraph of the control file contains information about
        the source package in general.  The subsequent paragraphs each
        describe a binary package that the source tree builds.  Each
        binary package built from this source package has a corresponding
        paragraph, except for any automatically-generated debug packages
        that do not require one.
      </para>
      <para>
        The fields in the general paragraph (the first one, for the source
        package) are:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <link linkend="s-f-Source"><literal>Source</literal></link>
            (mandatory)
          </para>
        </listitem>
        <listitem>
          <para>
            <link
            linkend="s-f-Maintainer"><literal>Maintainer</literal></link>
            (mandatory)
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="s-f-Uploaders"><literal>Uploaders</literal></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="s-f-Section"><literal>Section</literal></link>
            (recommended)
          </para>
        </listitem>
        <listitem>
          <para>
            <link
            linkend="s-f-Priority"><literal>Priority</literal></link>
            (recommended)
          </para>
        </listitem>
        <listitem>
          <para>
            <link
            linkend="s-sourcebinarydeps"><literal>Build-Depends</literal>
            et al</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link
            linkend="s-f-Standards-Version"><literal>Standards-Version</literal></link>
            (recommended)
          </para>
        </listitem>
        <listitem>
          <para>
            <link
            linkend="s-f-Homepage"><literal>Homepage</literal></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="s-f-VCS-fields"><literal>Vcs-Browser</literal>,
            <literal>Vcs-Git</literal>, et al.</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link
            linkend="s-f-Testsuite"><literal>Testsuite</literal></link>
          </para>
        </listitem>
      </itemizedlist>
      <para>
        The fields in the binary package paragraphs are:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <link linkend="s-f-Package"><literal>Package</literal></link>
            (mandatory)
          </para>
        </listitem>
        <listitem>
          <para>
            <link
            linkend="s-f-Architecture"><literal>Architecture</literal></link>
            (mandatory)
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="s-f-Section"><literal>Section</literal></link>
            (recommended)
          </para>
        </listitem>
        <listitem>
          <para>
            <link
            linkend="s-f-Priority"><literal>Priority</literal></link>
            (recommended)
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="s-f-Essential"><literal>Essential</literal></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="s-binarydeps"><literal>Depends</literal> et al</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link
            linkend="s-f-Description"><literal>Description</literal></link>
            (mandatory)
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="s-f-Homepage"><literal>Homepage</literal></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link
            linkend="s-built-using"><literal>Built-Using</literal></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link
            linkend="s-f-Package-Type"><literal>Package-Type</literal></link>
          </para>
        </listitem>
      </itemizedlist>
      <para>
        The syntax and semantics of the fields are described below.
      </para>
      <para>
        These fields are used by <command>dpkg-gencontrol</command> to
        generate control files for binary packages (see below), by
        <command>dpkg-genchanges</command> to generate the
        <filename>.changes</filename> file to accompany the upload, and by
        <command>dpkg-source</command> when it creates the
        <filename>.dsc</filename> source control file as part of a source
        archive.  Some fields are folded in
        <filename>debian/control</filename>, but not in any other control
        file.  These tools are responsible for removing the line breaks
        from such fields when using fields from
        <filename>debian/control</filename> to generate other control
        files.  They are also responsible for discarding empty fields.
      </para>
      <para>
        The fields here may contain variable references - their values
        will be substituted by <command>dpkg-gencontrol</command>,
        <command>dpkg-genchanges</command> or
        <command>dpkg-source</command> when they generate output control
        files.  See <xref linkend="s-substvars"/> for details.
      </para>
    </section>

    <section id="s-binarycontrolfiles">
      <title>
        Binary package control files -- <filename>DEBIAN/control</filename>
      </title>

      <para>
        The <filename>DEBIAN/control</filename> file contains the most
        vital (and version-dependent) information about a binary package.
        It consists of a single paragraph.
      </para>
      <para>
        The fields in this file are:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <link linkend="s-f-Package"><literal>Package</literal></link>
            (mandatory)
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="s-f-Source"><literal>Source</literal></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="s-f-Version"><literal>Version</literal></link>
            (mandatory)
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="s-f-Section"><literal>Section</literal></link>
            (recommended)
          </para>
        </listitem>
        <listitem>
          <para>
            <link
            linkend="s-f-Priority"><literal>Priority</literal></link>
            (recommended)
          </para>
        </listitem>
        <listitem>
          <para>
            <link
            linkend="s-f-Architecture"><literal>Architecture</literal></link>
            (mandatory)
          </para>
        </listitem>
        <listitem>
          <para>
            <link
            linkend="s-f-Essential"><literal>Essential</literal></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="s-binarydeps"><literal>Depends</literal> et
            al</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link
            linkend="s-f-Installed-Size"><literal>Installed-Size</literal></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link
            linkend="s-f-Maintainer"><literal>Maintainer</literal></link>
            (mandatory)
          </para>
        </listitem>
        <listitem>
          <para>
            <link
            linkend="s-f-Description"><literal>Description</literal></link>
            (mandatory)
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="s-f-Homepage"><literal>Homepage</literal></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="s-built-using"><literal>Built-Using</literal></link>
          </para>
        </listitem>
      </itemizedlist>
    </section>

    <section id="s-debiansourcecontrolfiles">
      <title>Debian source control files -- <literal>.dsc</literal></title>

      <para>
        This file consists of a single paragraph, possibly surrounded by a
        PGP signature.  The fields of that paragraph are listed below.
        Their syntax is described above, in <xref
        linkend="s-controlsyntax"/>.
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <link linkend="s-f-Format"><literal>Format</literal></link>
            (mandatory)
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="s-f-Source"><literal>Source</literal></link>
            (mandatory)
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="s-f-Binary"><literal>Binary</literal></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link
            linkend="s-f-Architecture"><literal>Architecture</literal></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="s-f-Version"><literal>Version</literal></link>
            (mandatory)
          </para>
        </listitem>
        <listitem>
          <para>
            <link
            linkend="s-f-Maintainer"><literal>Maintainer</literal></link>
            (mandatory)
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="s-f-Uploaders"><literal>Uploaders</literal></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="s-f-Homepage"><literal>Homepage</literal></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="s-f-VCS-fields"><literal>Vcs-Browser</literal>,
            <literal>Vcs-Git</literal>, et al.</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="s-f-Testsuite"><literal>Testsuite</literal></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="s-f-Dgit"><literal>Dgit</literal></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link
            linkend="s-f-Standards-Version"><literal>Standards-Version</literal></link>
            (recommended)
          </para>
        </listitem>
        <listitem>
          <para>
            <link
            linkend="s-sourcebinarydeps"><literal>Build-Depends</literal>
            et al</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link
            linkend="s-f-Package-List"><literal>Package-List</literal></link>
            (recommended)
          </para>
        </listitem>
        <listitem>
          <para>
            <link
            linkend="s-f-Checksums"><literal>Checksums-Sha1</literal> and
            <literal>Checksums-Sha256</literal></link> (mandatory)
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="s-f-Files"><literal>Files</literal></link>
            (mandatory)
          </para>
        </listitem>
      </itemizedlist>
      <para>
        The Debian source control file is generated by
        <command>dpkg-source</command> when it builds the source archive,
        from other files in the source package, described above.  When
        unpacking, it is checked against the files and directories in the
        other parts of the source package.
      </para>
    </section>

    <section id="s-debianchangesfiles">
      <title>Debian changes files -- <filename>.changes</filename></title>

      <para>
        The <filename>.changes</filename> files are used by the Debian
        archive maintenance software to process updates to packages.  They
        consist of a single paragraph, possibly surrounded by a PGP
        signature.  That paragraph contains information from the
        <filename>debian/control</filename> file and other data about the
        source package gathered via <filename>debian/changelog</filename>
        and <filename>debian/rules</filename>.
      </para>
      <para>
        <filename>.changes</filename> files have a format version that is
        incremented whenever the documented fields or their meaning
        change.  This document describes format &changesversion;.
      </para>
      <para>
        The fields in this file are:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <link linkend="s-f-Format"><literal>Format</literal></link>
            (mandatory)
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="s-f-Date"><literal>Date</literal></link>
            (mandatory)
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="s-f-Source"><literal>Source</literal></link>
            (mandatory)
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="s-f-Binary"><literal>Binary</literal></link>
            (mandatory)
          </para>
        </listitem>
        <listitem>
          <para>
            <link
            linkend="s-f-Architecture"><literal>Architecture</literal></link>
            (mandatory)
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="s-f-Version"><literal>Version</literal></link>
            (mandatory)
          </para>
        </listitem>
        <listitem>
          <para>
            <link
            linkend="s-f-Distribution"><literal>Distribution</literal></link>
            (mandatory)
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="s-f-Urgency"><literal>Urgency</literal></link>
            (recommended)
          </para>
        </listitem>
        <listitem>
          <para>
            <link
            linkend="s-f-Maintainer"><literal>Maintainer</literal></link>
            (mandatory)
          </para>
        </listitem>
        <listitem>
          <para>
            <link
            linkend="s-f-Changed-By"><literal>Changed-By</literal></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link
            linkend="s-f-Description"><literal>Description</literal></link>
            (mandatory)
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="s-f-Closes"><literal>Closes</literal></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="s-f-Changes"><literal>Changes</literal></link>
            (mandatory)
          </para>
        </listitem>
        <listitem>
          <para>
            <link
            linkend="s-f-Checksums"><literal>Checksums-Sha1</literal> and
            <literal>Checksums-Sha256</literal></link> (mandatory)
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="s-f-Files"><literal>Files</literal></link>
            (mandatory)
          </para>
        </listitem>
      </itemizedlist>
    </section>

    <section id="s-controlfieldslist">
      <title>List of fields</title>

      <section id="s-f-Source">
        <title><literal>Source</literal></title>

        <para>
          This field identifies the source package name.
        </para>
        <para>
          In <filename>debian/control</filename> or a
          <filename>.dsc</filename> file, this field must contain only the
          name of the source package.
        </para>
        <para>
          In a binary package control file or a
          <filename>.changes</filename> file, the source package name may
          be followed by a version number in parentheses.
          <footnote>
            <para>
              It is customary to leave a space after the package name if a
              version number is specified.
            </para>
          </footnote>
          This version number may be omitted (and is, by
          <command>dpkg-gencontrol</command>) if it has the same value as
          the <literal>Version</literal> field of the binary package in
          question.  The field itself may be omitted from a binary package
          control file when the source package has the same name and
          version as the binary package.
        </para>
        <para>
          Package names (both source and binary, see <xref
          linkend="s-f-Package"/>) must consist only of lower case letters
          (<literal>a-z</literal>), digits (<literal>0-9</literal>), plus
          (<literal>+</literal>) and minus (<literal>-</literal>) signs,
          and periods (<literal>.</literal>).  They must be at least two
          characters long and must start with an alphanumeric character.
        </para>
      </section>

      <section id="s-f-Maintainer">
        <title><literal>Maintainer</literal></title>

        <para>
          The package maintainer's name and email address.  The name must
          come first, then the email address inside angle brackets
          <literal>&lt;&gt;</literal> (in RFC822 format).
        </para>
        <para>
          If the maintainer's name contains a full stop then the whole
          field will not work directly as an email address due to a
          misfeature in the syntax specified in RFC822; a program using
          this field as an address must check for this and correct the
          problem if necessary (for example by putting the name in round
          brackets and moving it to the end, and bringing the email
          address forward).
        </para>
        <para>
          See <xref linkend="s-maintainer"/> for additional requirements
          and information about package maintainers.
        </para>
      </section>

      <section id="s-f-Uploaders">
        <title><literal>Uploaders</literal></title>

        <para>
          List of the names and email addresses of co-maintainers of the
          package, if any.  If the package has other maintainers besides
          the one named in the <link linkend="s-f-Maintainer">Maintainer
          field</link>, their names and email addresses should be listed
          here.  The format of each entry is the same as that of the
          Maintainer field, and multiple entries must be comma separated.
        </para>
        <para>
          This is normally an optional field, but if the
          <literal>Maintainer</literal> control field names a group of
          people and a shared email address, the
          <literal>Uploaders</literal> field must be present and must
          contain at least one human with their personal email address.
        </para>
        <para>
          The Uploaders field in <filename>debian/control</filename> can
          be folded.
        </para>
      </section>

      <section id="s-f-Changed-By">
        <title><literal>Changed-By</literal></title>

        <para>
          The name and email address of the person who prepared this
          version of the package, usually a maintainer.  The syntax is the
          same as for the <link linkend="s-f-Maintainer">Maintainer
          field</link>.
        </para>
      </section>

      <section id="s-f-Section">
        <title><literal>Section</literal></title>

        <para>
          This field specifies an application area into which the package
          has been classified.  See <xref linkend="s-subsections"/>.
        </para>
        <para>
          When it appears in the <filename>debian/control</filename> file,
          it gives the value for the subfield of the same name in the
          <literal>Files</literal> field of the
          <filename>.changes</filename> file.  It also gives the default
          for the same field in the binary packages.
        </para>
      </section>

      <section id="s-f-Priority">
        <title><literal>Priority</literal></title>

        <para>
          This field represents how important it is that the user have the
          package installed.  See <xref linkend="s-priorities"/>.
        </para>
        <para>
          When it appears in the <filename>debian/control</filename> file,
          it gives the value for the subfield of the same name in the
          <literal>Files</literal> field of the
          <filename>.changes</filename> file.  It also gives the default
          for the same field in the binary packages.
        </para>
      </section>

      <section id="s-f-Package">
        <title><literal>Package</literal></title>

        <para>
          The name of the binary package.
        </para>
        <para>
          Binary package names must follow the same syntax and
          restrictions as source package names.  See <xref
          linkend="s-f-Source"/> for the details.
        </para>
      </section>

      <section id="s-f-Architecture">
        <title><literal>Architecture</literal></title>

        <para>
          Depending on context and the control file used, the
          <literal>Architecture</literal> field can include the following
          sets of values:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              A unique single word identifying a Debian machine
              architecture as described in <xref linkend="s-arch-spec"/>.
            </para>
          </listitem>
          <listitem>
            <para>
              An architecture wildcard identifying a set of Debian machine
              architectures, see <xref linkend="s-arch-wildcard-spec"/>.
              <literal>any</literal> matches all Debian machine
              architectures and is the most frequently used.
            </para>
          </listitem>
          <listitem>
            <para>
              <literal>all</literal>, which indicates an
              architecture-independent package.
            </para>
          </listitem>
          <listitem>
            <para>
              <literal>source</literal>, which indicates a source package.
            </para>
          </listitem>
        </itemizedlist>
        <para>
          In the main <filename>debian/control</filename> file in the
          source package, this field may contain the special value
          <literal>all</literal>, the special architecture wildcard
          <literal>any</literal>, or a list of specific and wildcard
          architectures separated by spaces.  If <literal>all</literal> or
          <literal>any</literal> appears, that value must be the entire
          contents of the field.  Most packages will use either
          <literal>all</literal> or <literal>any</literal>.
        </para>
        <para>
          Specifying a specific list of architectures indicates that the
          source will build an architecture-dependent package only on
          architectures included in the list.  Specifying a list of
          architecture wildcards indicates that the source will build an
          architecture-dependent package on only those architectures that
          match any of the specified architecture wildcards.  Specifying a
          list of architectures or architecture wildcards other than
          <literal>any</literal> is for the minority of cases where a
          program is not portable or is not useful on some architectures.
          Where possible, the program should be made portable instead.
        </para>
        <para>
          In the Debian source control file <filename>.dsc</filename>,
          this field contains a list of architectures and architecture
          wildcards separated by spaces.  When the list contains the
          architecture wildcard <literal>any</literal>, the only other
          value allowed in the list is <literal>all</literal>.
        </para>
        <para>
          The list may include (or consist solely of) the special value
          <literal>all</literal>.  In other words, in
          <filename>.dsc</filename> files unlike the
          <filename>debian/control</filename>, <literal>all</literal> may
          occur in combination with specific architectures.  The
          <literal>Architecture</literal> field in the Debian source
          control file <filename>.dsc</filename> is generally constructed
          from the <literal>Architecture</literal> fields in the
          <filename>debian/control</filename> in the source package.
        </para>
        <para>
          Specifying only <literal>any</literal> indicates that the source
          package isn't dependent on any particular architecture and
          should compile fine on any one.  The produced binary package(s)
          will be specific to whatever the current build architecture is.
        </para>
        <para>
          Specifying only <literal>all</literal> indicates that the source
          package will only build architecture-independent packages.
        </para>
        <para>
          Specifying <literal>any all</literal> indicates that the source
          package isn't dependent on any particular architecture.  The set
          of produced binary packages will include at least one
          architecture-dependent package and one architecture-independent
          package.
        </para>
        <para>
          Specifying a list of architectures or architecture wildcards
          indicates that the source will build an architecture-dependent
          package, and will only work correctly on the listed or matching
          architectures.  If the source package also builds at least one
          architecture-independent package, <literal>all</literal> will
          also be included in the list.
        </para>
        <para>
          In a <filename>.changes</filename> file, the
          <literal>Architecture</literal> field lists the architecture(s)
          of the package(s) currently being uploaded.  This will be a
          list; if the source for the package is also being uploaded, the
          special entry <literal>source</literal> is also present.
          <literal>all</literal> will be present if any
          architecture-independent packages are being uploaded.
          Architecture wildcards such as <literal>any</literal> must never
          occur in the <literal>Architecture</literal> field in the
          <filename>.changes</filename> file.
        </para>
        <para>
          See <xref linkend="s-debianrules"/> for information on how to
          get the architecture for the build process.
        </para>
      </section>

      <section id="s-f-Essential">
        <title><literal>Essential</literal></title>

        <para>
          This is a boolean field which may occur only in the control file
          of a binary package or in a per-package fields paragraph of a
          source package control file.
        </para>
        <para>
          If set to <literal>yes</literal> then the package management
          system will refuse to remove the package (upgrading and
          replacing it is still possible).  The other possible value is
          <literal>no</literal>, which is the same as not having the field
          at all.
        </para>
      </section>

      <section id="s5.6.10">
        <title>
          Package interrelationship fields: <literal>Depends</literal>,
          <literal>Pre-Depends</literal>, <literal>Recommends</literal>,
          <literal>Suggests</literal>, <literal>Breaks</literal>,
          <literal>Conflicts</literal>, <literal>Provides</literal>,
          <literal>Replaces</literal>, <literal>Enhances</literal>
        </title>

        <para>
          These fields describe the package's relationships with other
          packages.  Their syntax and semantics are described in <xref
          linkend="ch-relationships"/>.
        </para>
      </section>

      <section id="s-f-Standards-Version">
        <title><literal>Standards-Version</literal></title>

        <para>
          The most recent version of the standards (the policy manual and
          associated texts) with which the package complies.
        </para>
        <para>
          The version number has four components: major and minor version
          number and major and minor patch level.  When the standards
          change in a way that requires every package to change the major
          number will be changed.  Significant changes that will require
          work in many packages will be signaled by a change to the minor
          number.  The major patch level will be changed for any change to
          the meaning of the standards, however small; the minor patch
          level will be changed when only cosmetic, typographical or other
          edits are made which neither change the meaning of the document
          nor affect the contents of packages.
        </para>
        <para>
          Thus only the first three components of the policy version are
          significant in the <emphasis>Standards-Version</emphasis>
          control field, and so either these three components or all four
          components may be specified.<footnote><para> In the past, people
          specified the full version number in the Standards-Version
          field, for example "2.3.0.0".  Since minor patch-level changes
          don't introduce new policy, it was thought it would be better to
          relax policy and only require the first 3 components to be
          specified, in this example "2.3.0".  All four components may
          still be used if someone wishes to do so.  </para> </footnote>
        </para>
      </section>

      <section id="s-f-Version">
        <title><literal>Version</literal></title>

        <para>
          The version number of a package.  The format is:
          [<replaceable>epoch</replaceable><literal>:</literal>]<replaceable>upstream_version</replaceable>[<literal>-</literal><replaceable>debian_revision</replaceable>]
        </para>
        <para>
          The three components here are:
        </para>
        <variablelist>
          <varlistentry>
            <term><replaceable>epoch</replaceable></term>
            <listitem>
              <para>
                This is a single (generally small) unsigned integer.  It
                may be omitted, in which case zero is assumed.  If it is
                omitted then the
                <replaceable>upstream_version</replaceable> may not
                contain any colons.
              </para>
              <para>
                It is provided to allow mistakes in the version numbers of
                older versions of a package, and also a package's previous
                version numbering schemes, to be left behind.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><replaceable>upstream_version</replaceable></term>
            <listitem>
              <para>
                This is the main part of the version number.  It is
                usually the version number of the original ("upstream")
                package from which the <filename>.deb</filename> file has
                been made, if this is applicable.  Usually this will be in
                the same format as that specified by the upstream
                author(s); however, it may need to be reformatted to fit
                into the package management system's format and comparison
                scheme.
              </para>
              <para>
                The comparison behavior of the package management system
                with respect to the
                <replaceable>upstream_version</replaceable> is described
                below.  The <replaceable>upstream_version</replaceable>
                portion of the version number is mandatory.
              </para>
              <para>
                The <replaceable>upstream_version</replaceable> may
                contain only alphanumerics
                <footnote>
                  <para>
                    Alphanumerics are <literal>A-Za-z0-9</literal> only.
                  </para>
                </footnote>
                and the characters <literal>.</literal>
                <literal>+</literal> <literal>-</literal>
                <literal>~</literal> (full stop, plus, hyphen, tilde) and
                should start with a digit.  If there is no
                <replaceable>debian_revision</replaceable> then hyphens
                are not allowed.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><replaceable>debian_revision</replaceable></term>
            <listitem>
              <para>
                This part of the version number specifies the version of
                the Debian package based on the upstream version.  It may
                contain only alphanumerics and the characters
                <literal>+</literal> <literal>.</literal>
                <literal>~</literal> (plus, full stop, tilde) and is
                compared in the same way as the
                <replaceable>upstream_version</replaceable> is.
              </para>
              <para>
                It is optional; if it isn't present then the
                <replaceable>upstream_version</replaceable> may not
                contain a hyphen.  This format represents the case where a
                piece of software was written specifically to be a Debian
                package, where the Debian package source must always be
                identical to the pristine source and therefore no revision
                indication is required.
              </para>
              <para>
                It is conventional to restart the
                <replaceable>debian_revision</replaceable> at
                <literal>1</literal> each time the
                <replaceable>upstream_version</replaceable> is increased.
              </para>
              <para>
                The package management system will break the version
                number apart at the last hyphen in the string (if there is
                one) to determine the
                <replaceable>upstream_version</replaceable> and
                <replaceable>debian_revision</replaceable>.  The absence
                of a <replaceable>debian_revision</replaceable> is
                equivalent to a <replaceable>debian_revision</replaceable>
                of <literal>0</literal>.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
        <para>
          When comparing two version numbers, first the
          <replaceable>epoch</replaceable> of each are compared, then the
          <replaceable>upstream_version</replaceable> if
          <replaceable>epoch</replaceable> is equal, and then
          <replaceable>debian_revision</replaceable> if
          <replaceable>upstream_version</replaceable> is also equal.
          <replaceable>epoch</replaceable> is compared numerically.  The
          <replaceable>upstream_version</replaceable> and
          <replaceable>debian_revision</replaceable> parts are compared by
          the package management system using the following algorithm:
        </para>
        <para>
          The strings are compared from left to right.
        </para>
        <para>
          First the initial part of each string consisting entirely of
          non-digit characters is determined.  These two parts (one of
          which may be empty) are compared lexically.  If a difference is
          found it is returned.  The lexical comparison is a comparison of
          ASCII values modified so that all the letters sort earlier than
          all the non-letters and so that a tilde sorts before anything,
          even the end of a part.  For example, the following parts are in
          sorted order from earliest to latest: <literal>~~</literal>,
          <literal>~~a</literal>, <literal>~</literal>, the empty part,
          <literal>a</literal>.<footnote><para> One common use of
          <literal>~</literal> is for upstream pre-releases.  For example,
          <literal>1.0~beta1~svn1245</literal> sorts earlier than
          <literal>1.0~beta1</literal>, which sorts earlier than
          <literal>1.0</literal>.  </para> </footnote>
        </para>
        <para>
          Then the initial part of the remainder of each string which
          consists entirely of digit characters is determined.  The
          numerical values of these two parts are compared, and any
          difference found is returned as the result of the comparison.
          For these purposes an empty string (which can only occur at the
          end of one or both version strings being compared) counts as
          zero.
        </para>
        <para>
          These two steps (comparing and removing initial non-digit
          strings and initial digit strings) are repeated until a
          difference is found or both strings are exhausted.
        </para>
        <para>
          Note that the purpose of epochs is to allow us to leave behind
          mistakes in version numbering, and to cope with situations where
          the version numbering scheme changes.  It is
          <emphasis>not</emphasis> intended to cope with version numbers
          containing strings of letters which the package management
          system cannot interpret (such as <literal>ALPHA</literal> or
          <literal>pre-</literal>), or with silly
          orderings.
          <footnote>
            <para>
              The author of this manual has heard of a package whose
              versions went <literal>1.1</literal>,
              <literal>1.2</literal>, <literal>1.3</literal>,
              <literal>1</literal>, <literal>2.1</literal>,
              <literal>2.2</literal>, <literal>2</literal> and so forth.
            </para>
          </footnote>
        </para>
      </section>

      <section id="s-f-Description">
        <title><literal>Description</literal></title>

        <para>
          In a source or binary control file, the
          <literal>Description</literal> field contains a description of
          the binary package, consisting of two parts, the synopsis or the
          short description, and the long description.  It is a multiline
          field with the following format:
        </para>
        <programlisting>
Description: <replaceable>single line synopsis</replaceable>
 <replaceable>extended description over several lines</replaceable></programlisting>
        <para>
          The lines in the extended description can have these formats:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              Those starting with a single space are part of a paragraph.
              Successive lines of this form will be word-wrapped when
              displayed.  The leading space will usually be stripped off.
              The line must contain at least one non-whitespace character.
            </para>
          </listitem>
          <listitem>
            <para>
              Those starting with two or more spaces.  These will be
              displayed verbatim.  If the display cannot be panned
              horizontally, the displaying program will line wrap them
              "hard" (i.e., without taking account of word breaks).  If it
              can they will be allowed to trail off to the right.  None,
              one or two initial spaces may be deleted, but the number of
              spaces deleted from each line will be the same (so that you
              can have indenting work correctly, for example).  The line
              must contain at least one non-whitespace character.
            </para>
          </listitem>
          <listitem>
            <para>
              Those containing a single space followed by a single full
              stop character.  These are rendered as blank lines.  This is
              the <emphasis>only</emphasis> way to get a blank
              line.
              <footnote>
                <para>
                  Completely empty lines will not be rendered as blank
                  lines.  Instead, they will cause the parser to think
                  you're starting a whole new record in the control file,
                  and will therefore likely abort with an error.
                </para>
              </footnote>
            </para>
          </listitem>
          <listitem>
            <para>
              Those containing a space, a full stop and some more
              characters.  These are for future expansion.  Do not use
              them.
            </para>
          </listitem>
        </itemizedlist>
        <para>
          Do not use tab characters.  Their effect is not predictable.
        </para>
        <para>
          See <xref linkend="s-descriptions"/> for further information on
          this.
        </para>
        <para>
          In a <filename>.changes</filename> file, the
          <literal>Description</literal> field contains a summary of the
          descriptions for the packages being uploaded.  For this case,
          the first line of the field value (the part on the same line as
          <literal>Description:</literal>) is always empty.  It is a
          multiline field, with one line per package.  Each line is
          indented by one space and contains the name of a binary package,
          a space, a hyphen (<literal>-</literal>), a space, and the short
          description line from that package.
        </para>
      </section>

      <section id="s-f-Distribution">
        <title><literal>Distribution</literal></title>

        <para>
          In a <filename>.changes</filename> file or parsed changelog
          output this contains the (space-separated) name(s) of the
          distribution(s) where this version of the package should be
          installed.  Valid distributions are determined by the archive
          maintainers.
          <footnote>
            <para>
              Example distribution names in the
              Debian archive used in <filename>.changes</filename> files are:
            </para>
            <variablelist>
              <varlistentry>
                <term><emphasis>unstable</emphasis></term>
                <listitem>
                  <para>
                    This distribution value refers to the
                    <emphasis>developmental</emphasis> part of the Debian
                    distribution tree.  Most new packages, new upstream
                    versions of packages and bug fixes go into the
                    <emphasis>unstable</emphasis> directory tree.
                  </para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term><emphasis>experimental</emphasis></term>
                <listitem>
                  <para>
                    The packages with this distribution value are deemed
                    by their maintainers to be high risk.  Oftentimes they
                    represent early beta or developmental packages from
                    various sources that the maintainers want people to
                    try, but are not ready to be a part of the other parts
                    of the Debian distribution tree.
                  </para>
                </listitem>
              </varlistentry>
            </variablelist>
            <para>
              Others are used for updating stable releases or for security
              uploads.  More information is available in the Debian
              Developer's Reference, section "The Debian archive".
            </para>
          </footnote>
          The Debian archive software only supports listing a single
          distribution.  Migration of packages to other distributions is
          handled outside of the upload process.
        </para>
      </section>

      <section id="s-f-Date">
        <title><literal>Date</literal></title>

        <para>
          This field includes the date the package was built or last
          edited.  It must be in the same format as the
          <replaceable>date</replaceable> in a
          <filename>debian/changelog</filename> entry.
        </para>
        <para>
          The value of this field is usually extracted from the
          <filename>debian/changelog</filename> file - see <xref
          linkend="s-dpkgchangelog"/>).
        </para>
      </section>

      <section id="s-f-Format">
        <title><literal>Format</literal></title>

        <para>
          In <link
          linkend="s-debianchangesfiles"><filename>.changes</filename></link>
          files, this field declares the format version of that file.  The
          syntax of the field value is the same as that of a <link
          linkend="s-f-Version">package version number</link> except that
          no epoch or Debian revision is allowed.  The format described in
          this document is <literal>&changesversion;</literal>.
        </para>
        <para>
          In <link
          linkend="s-debiansourcecontrolfiles"><filename>.dsc</filename>
          Debian source control</link> files, this field declares the
          format of the source package.  The field value is used by
          programs acting on a source package to interpret the list of
          files in the source package and determine how to unpack it.  The
          syntax of the field value is a numeric major revision, a period,
          a numeric minor revision, and then an optional subtype after
          whitespace, which if specified is an alphanumeric word in
          parentheses.  The subtype is optional in the syntax but may be
          mandatory for particular source format revisions.
          <footnote>
            <para>
              The source formats currently supported by the Debian archive
              software are <literal>1.0</literal>, <literal>3.0
              (native)</literal>, and <literal>3.0 (quilt)</literal>.
            </para>
          </footnote>
        </para>
      </section>

      <section id="s-f-Urgency">
        <title><literal>Urgency</literal></title>

        <para>
          This is a description of how important it is to upgrade to this
          version from previous ones.  It consists of a single keyword
          taking one of the values <literal>low</literal>,
          <literal>medium</literal>, <literal>high</literal>,
          <literal>emergency</literal>, or
          <literal>critical</literal>
          <footnote>
            <para>
              Other urgency values are supported with configuration
              changes in the archive software but are not used in Debian.
              The urgency affects how quickly a package will be considered
              for inclusion into the <literal>testing</literal>
              distribution and gives an indication of the importance of
              any fixes included in the upload.
              <literal>Emergency</literal> and <literal>critical</literal>
              are treated as synonymous.
            </para>
          </footnote>
          (not case-sensitive) followed by an optional commentary
          (separated by a space) which is usually in parentheses.  For
          example:
        </para>
        <programlisting>
Urgency: low (HIGH for users of diversions)</programlisting>
        <para>
          The value of this field is usually extracted from the
          <filename>debian/changelog</filename> file - see <xref
          linkend="s-dpkgchangelog"/>.
        </para>
      </section>

      <section id="s-f-Changes">
        <title><literal>Changes</literal></title>

        <para>
          This multiline field contains the human-readable changes data,
          describing the differences between the last version and the
          current one.
        </para>
        <para>
          The first line of the field value (the part on the same line as
          <literal>Changes:</literal>) is always empty.  The content of
          the field is expressed as continuation lines, with each line
          indented by at least one space.  Blank lines must be represented
          by a line consisting only of a space and a full stop
          (<literal>.</literal>).
        </para>
        <para>
          The value of this field is usually extracted from the
          <filename>debian/changelog</filename> file - see <xref
          linkend="s-dpkgchangelog"/>).
        </para>
        <para>
          Each version's change information should be preceded by a
          "title" line giving at least the version, distribution(s) and
          urgency, in a human-readable way.
        </para>
        <para>
          If data from several versions is being returned the entry for
          the most recent version should be returned first, and entries
          should be separated by the representation of a blank line (the
          "title" line may also be followed by the representation of a
          blank line).
        </para>
      </section>

      <section id="s-f-Binary">
        <title><literal>Binary</literal></title>

        <para>
          This folded field is a list of binary packages.  Its syntax and
          meaning varies depending on the control file in which it
          appears.
        </para>
        <para>
          When it appears in the <filename>.dsc</filename> file, it lists
          binary packages which a source package can produce, separated by
          commas<footnote><para> A space after each comma is conventional.
          </para> </footnote>.  The source package does not necessarily
          produce all of these binary packages for every architecture.
          The source control file doesn't contain details of which
          architectures are appropriate for which of the binary packages.
        </para>
        <para>
          When it appears in a <filename>.changes</filename> file, it
          lists the names of the binary packages being uploaded, separated
          by whitespace (not commas).
        </para>
      </section>

      <section id="s-f-Installed-Size">
        <title><literal>Installed-Size</literal></title>

        <para>
          This field appears in the control files of binary packages, and
          in the <filename>Packages</filename> files.  It gives an
          estimate of the total amount of disk space required to install
          the named package.  Actual installed size may vary based on
          block size, file system properties, or actions taken by package
          maintainer scripts.
        </para>
        <para>
          The disk space is given as the integer value of the estimated
          installed size in bytes, divided by 1024 and rounded up.
        </para>
      </section>

      <section id="s-f-Files">
        <title><literal>Files</literal></title>

        <para>
          This field contains a list of files with information about each
          one.  The exact information and syntax varies with the context.
        </para>
        <para>
          In all cases, Files is a multiline field.  The first line of the
          field value (the part on the same line as
          <literal>Files:</literal>) is always empty.  The content of the
          field is expressed as continuation lines, one line per file.
          Each line must be indented by one space and contain a number of
          sub-fields, separated by spaces, as described below.
        </para>
        <para>
          In the <filename>.dsc</filename> file, each line contains the
          MD5 checksum, size and filename of the tar file and (if
          applicable) diff file which make up the remainder of the source
          package.
          <footnote>
            <para>
              That is, the parts which are not the
              <literal>.dsc</literal>.
            </para>
          </footnote>
          For example:
        </para>
        <programlisting>
Files:
 c6f698f19f2a2aa07dbb9bbda90a2754 571925 example_1.2.orig.tar.gz
 938512f08422f3509ff36f125f5873ba 6220 example_1.2-1.diff.gz</programlisting>
        <para>
          The exact forms of the filenames are described in <xref
          linkend="s-pkg-sourcearchives"/>.
        </para>
        <para>
          In the <filename>.changes</filename> file this contains one line
          per file being uploaded.  Each line contains the MD5 checksum,
          size, section and priority and the filename.  For example:
        </para>
        <programlisting>
Files:
 4c31ab7bfc40d3cf49d7811987390357 1428 text extra example_1.2-1.dsc
 c6f698f19f2a2aa07dbb9bbda90a2754 571925 text extra example_1.2.orig.tar.gz
 938512f08422f3509ff36f125f5873ba 6220 text extra example_1.2-1.diff.gz
 7c98fe853b3bbb47a00e5cd129b6cb56 703542 text extra example_1.2-1_i386.deb</programlisting>
        <para>
          The <link linkend="s-f-Section">section</link> and <link
          linkend="s-f-Priority">priority</link> are the values of the
          corresponding fields in the main source control file.  If no
          section or priority is specified then <literal>-</literal>
          should be used, though section and priority values must be
          specified for new packages to be installed properly.
        </para>
        <para>
          The special value <literal>byhand</literal> for the section in a
          <literal>.changes</literal> file indicates that the file in
          question is not an ordinary package file and must be installed
          by hand by the distribution maintainers.  If the section is
          <literal>byhand</literal> the priority should be
          <literal>-</literal>.
        </para>
        <para>
          If a new Debian revision of a package is being shipped and no
          new original source archive is being distributed the
          <literal>.dsc</literal> must still contain the
          <literal>Files</literal> field entry for the original source
          archive
          <filename><replaceable>package</replaceable>_<replaceable>upstream-version</replaceable>.orig.tar.gz</filename>,
          but the <filename>.changes</filename> file should leave it out.
          In this case the original source archive on the distribution
          site must match exactly, byte-for-byte, the original source
          archive which was used to generate the <filename>.dsc</filename>
          file and diff which are being uploaded.
        </para>
      </section>

      <section id="s-f-Closes">
        <title><literal>Closes</literal></title>

        <para>
          A space-separated list of bug report numbers that the upload
          governed by the .changes file closes.
        </para>
      </section>

      <section id="s-f-Homepage">
        <title><literal>Homepage</literal></title>

        <para>
          The URL of the web site for this package, preferably (when
          applicable) the site from which the original source can be
          obtained and any additional upstream documentation or
          information may be found.  The content of this field is a simple
          URL without any surrounding characters such as
          <literal>&lt;&gt;</literal>.
        </para>
      </section>

      <section id="s-f-Checksums">
        <title>
          <literal>Checksums-Sha1</literal> and
          <literal>Checksums-Sha256</literal>
        </title>

        <para>
          These multiline fields contain a list of files with a checksum
          and size for each one.  Both <literal>Checksums-Sha1</literal>
          and <literal>Checksums-Sha256</literal> have the same syntax and
          differ only in the checksum algorithm used: SHA-1 for
          <literal>Checksums-Sha1</literal> and SHA-256 for
          <literal>Checksums-Sha256</literal>.
        </para>
        <para>
          <literal>Checksums-Sha1</literal> and
          <literal>Checksums-Sha256</literal> are multiline fields.  The
          first line of the field value (the part on the same line as
          <literal>Checksums-Sha1:</literal> or
          <literal>Checksums-Sha256:</literal>) is always empty.  The
          content of the field is expressed as continuation lines, one
          line per file.  Each line consists of the checksum, a space, the
          file size, a space, and the file name.  For example (from a
          <filename>.changes</filename> file):
        </para>
        <programlisting>
Checksums-Sha1:
 1f418afaa01464e63cc1ee8a66a05f0848bd155c 1276 example_1.0-1.dsc
 a0ed1456fad61116f868b1855530dbe948e20f06 171602 example_1.0.orig.tar.gz
 5e86ecf0671e113b63388dac81dd8d00e00ef298 6137 example_1.0-1.debian.tar.gz
 71a0ff7da0faaf608481195f9cf30974b142c183 548402 example_1.0-1_i386.deb
Checksums-Sha256:
 ac9d57254f7e835bed299926fd51bf6f534597cc3fcc52db01c4bffedae81272 1276 example_1.0-1.dsc
 0d123be7f51e61c4bf15e5c492b484054be7e90f3081608a5517007bfb1fd128 171602 example_1.0.orig.tar.gz
 f54ae966a5f580571ae7d9ef5e1df0bd42d63e27cb505b27957351a495bc6288 6137 example_1.0-1.debian.tar.gz
 3bec05c03974fdecd11d020fc2e8250de8404867a8a2ce865160c250eb723664 548402 example_1.0-1_i386.deb</programlisting>
        <para>
          In the <filename>.dsc</filename> file, these fields list all
          files that make up the source package.  In the
          <filename>.changes</filename> file, these fields list all files
          being uploaded.  The list of files in these fields must match
          the list of files in the <literal>Files</literal> field.
        </para>
      </section>

      <section id="s5.6.25">
        <title><literal>DM-Upload-Allowed</literal></title>

        <para>
          Obsolete, see <link linkend="s-f-DM-Upload-Allowed">below</link>.
        </para>
      </section>

      <section id="s-f-VCS-fields">
        <title>Version Control System (VCS) fields</title>

        <para>
          Debian source packages are increasingly developed using VCSs.
          The purpose of the following fields is to indicate a publicly
          accessible repository where the Debian source package is
          developed.
        </para>
        <variablelist>
          <varlistentry>
            <term><literal>Vcs-Browser</literal></term>
            <listitem>
              <para>
                URL of a web interface for browsing the repository.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>Vcs-Arch</literal>, <literal>Vcs-Bzr</literal>
              (Bazaar), <literal>Vcs-Cvs</literal>,
              <literal>Vcs-Darcs</literal>, <literal>Vcs-Git</literal>,
              <literal>Vcs-Hg</literal> (Mercurial),
              <literal>Vcs-Mtn</literal> (Monotone),
              <literal>Vcs-Svn</literal> (Subversion)
            </term>
            <listitem>
              <para>
                The field name identifies the VCS.  The field's value uses
                the version control system's conventional syntax for
                describing repository locations and should be sufficient
                to locate the repository used for packaging.  Ideally, it
                also locates the branch used for development of new
                versions of the Debian package.
              </para>
              <para>
                In the case of Git, the value consists of a URL,
                optionally followed by the word <literal>-b</literal> and
                the name of a branch in the indicated repository,
                following the syntax of the <literal>git clone</literal>
                command.  If no branch is specified, the packaging should
                be on the default branch.
              </para>
              <para>
                More than one different VCS may be specified for the same
                package.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section id="s-f-Package-List">
        <title><literal>Package-List</literal></title>

        <para>
          Multiline field listing all the packages that can be built from
          the source package, considering every architecture.  The first
          line of the field value is empty.  Each one of the next lines
          describes one binary package, by listing its name, type, section
          and priority separated by spaces.  Fifth and subsequent
          space-separated items may be present and parsers must allow
          them.  See the <link
          linkend="s-f-Package-Type">Package-Type</link> field for a list
          of package types.
        </para>
      </section>

      <section id="s-f-Package-Type">
        <title><literal>Package-Type</literal></title>

        <para>
          Simple field containing a word indicating the type of package:
          <literal>deb</literal> for binary packages and
          <literal>udeb</literal> for micro binary packages.  Other types
          not defined here may be indicated.  In source package control
          files, the <literal>Package-Type</literal> field should be
          omitted instead of giving it a value of <literal>deb</literal>,
          as this value is assumed for paragraphs lacking this field.
        </para>
      </section>

      <section id="s-f-Dgit">
        <title><literal>Dgit</literal></title>

        <para>
          Folded field containing a single git commit hash, presented in
          full, followed optionally by whitespace and other data to be
          defined in future extensions.
        </para>
        <para>
          Declares that the source package corresponds exactly to a
          referenced commit in a Git repository available at the canonical
          location called <emphasis>dgit-repos</emphasis>, used by
          <command>dgit</command>, a bidirectional gateway between the
          Debian archive and Git.  The commit is reachable from at least
          one reference whose name matches <literal>refs/dgit/*</literal>.
          See the manual page of <command>dgit</command> for further
          details.
        </para>
      </section>

      <section id="s-f-Testsuite">
        <title><literal>Testsuite</literal></title>

        <para>
          Simple field containing a comma-separated list of values
          allowing test execution environments to discover packages
          which provide tests.  Currently, the only defined value is
          <literal>autopkgtest</literal>.
        </para>

        <para>
           This field is automatically added to Debian source control
           files by <command>dpkg</command> when a
           <filename>debian/tests/control</filename> file is present
           in the source package.  This field may also be used in
           source package control files if needed in other situations.
        </para>
      </section>
    </section>

    <section id="s5.7">
      <title>User-defined fields</title>

      <para>
        Additional user-defined fields may be added to the source package
        control file.  Such fields will be ignored, and not copied to (for
        example) binary or Debian source control files or upload control
        files.
      </para>
      <para>
        If you wish to add additional unsupported fields to these output
        files you should use the mechanism described here.
      </para>
      <para>
        Fields in the main source control information file with names
        starting <literal>X</literal>, followed by one or more of the
        letters <literal>BCS</literal> and a hyphen <literal>-</literal>,
        will be copied to the output files.  Only the part of the field
        name after the hyphen will be used in the output file.  Where the
        letter <literal>B</literal> is used the field will appear in
        binary package control files, where the letter
        <literal>S</literal> is used in Debian source control files and
        where <literal>C</literal> is used in upload control
        (<literal>.changes</literal>) files.
      </para>
      <para>
        For example, if the main source information control file contains
        the field
      </para>
      <programlisting>
XBS-Comment: I stand between the candle and the star.</programlisting>
      <para>
        then the binary and Debian source control files will contain the
        field
      </para>
      <programlisting>
Comment: I stand between the candle and the star.</programlisting>
    </section>

    <section id="s-obsolete-control-data-fields">
      <title>Obsolete fields</title>

      <para>
        The following fields have been obsoleted and may be found in
        packages conforming with previous versions of the Policy.
      </para>

      <section id="s-f-DM-Upload-Allowed">
        <title><literal>DM-Upload-Allowed</literal></title>

        <para>
          Indicates that Debian Maintainers may upload this package to the
          Debian archive.  The only valid value is <literal>yes</literal>.
          This field was used to regulate uploads by Debian Maintainers,
          See the General Resolution <ulink
          url="https://www.debian.org/vote/2007/vote_003">Endorse the
          concept of Debian Maintainers</ulink> for more details.
        </para>
      </section>
    </section>
  </chapter>

  <chapter id="ch-maintainerscripts">
    <title>Package maintainer scripts and installation procedure</title>

    <section id="s6.1">
      <title>Introduction to package maintainer scripts</title>

      <para>
        It is possible to supply scripts as part of a package which the
        package management system will run for you when your package is
        installed, upgraded or removed.
      </para>
      <para>
        These scripts are the control information files
        <command>preinst</command>, <command>postinst</command>,
        <command>prerm</command> and <command>postrm</command>.  They must
        be proper executable files; if they are scripts (which is
        recommended), they must start with the usual <literal>#!</literal>
        convention.  They should be readable and executable by anyone, and
        must not be world-writable.
      </para>
      <para>
        The package management system looks at the exit status from these
        scripts.  It is important that they exit with a non-zero status if
        there is an error, so that the package management system can stop
        its processing.  For shell scripts this means that you
        <emphasis>almost always</emphasis> need to use <literal>set
        -e</literal> (this is usually true when writing shell scripts, in
        fact).  It is also important, of course, that they exit with a
        zero status if everything went well.
      </para>
      <para>
        Additionally, packages interacting with users using
        <command>debconf</command> in the <command>postinst</command>
        script should install a <command>config</command> script as a
        control information file.  See <xref
        linkend="s-maintscriptprompt"/> for details.
      </para>
      <para>
        When a package is upgraded a combination of the scripts from the
        old and new packages is called during the upgrade procedure.  If
        your scripts are going to be at all complicated you need to be
        aware of this, and may need to check the arguments to your
        scripts.
      </para>
      <para>
        Broadly speaking the <command>preinst</command> is called before
        (a particular version of) a package is unpacked, and the
        <command>postinst</command> afterwards; the
        <command>prerm</command> before (a version of) a package is
        removed and the <command>postrm</command> afterwards.
      </para>
      <para>
        Programs called from maintainer scripts should not normally have a
        path prepended to them.  Before installation is started, the
        package management system checks to see if the programs
        <command>ldconfig</command>, <command>start-stop-daemon</command>,
        and <command>update-rc.d</command> can be found via the
        <literal>PATH</literal> environment variable.  Those programs, and
        any other program that one would expect to be in the
        <literal>PATH</literal>, should thus be invoked without an
        absolute pathname.  Maintainer scripts should also not reset the
        <literal>PATH</literal>, though they might choose to modify it by
        prepending or appending package-specific directories.  These
        considerations really apply to all shell scripts.
      </para>
    </section>

    <section id="s-idempotency">
      <title>Maintainer scripts idempotency</title>

      <para>
        It is necessary for the error recovery procedures that the scripts
        be idempotent.  This means that if it is run successfully, and
        then it is called again, it doesn't bomb out or cause any harm,
        but just ensures that everything is the way it ought to be.  If
        the first call failed, or aborted half way through for some
        reason, the second call should merely do the things that were left
        undone the first time, if any, and exit with a success status if
        everything is OK.
        <footnote>
          <para>
            This is so that if an error occurs, the user interrupts
            <command>dpkg</command> or some other unforeseen circumstance
            happens you don't leave the user with a badly-broken package
            when <command>dpkg</command> attempts to repeat the action.
          </para>
        </footnote>
      </para>
    </section>

    <section id="s-controllingterminal">
      <title>Controlling terminal for maintainer scripts</title>

      <para>
        Maintainer scripts are not guaranteed to run with a controlling
        terminal and may not be able to interact with the user.  They must
        be able to fall back to noninteractive behavior if no controlling
        terminal is available.  Maintainer scripts that prompt via a
        program conforming to the Debian Configuration Management
        Specification (see <xref linkend="s-maintscriptprompt"/>) may
        assume that program will handle falling back to noninteractive
        behavior.
      </para>
      <para>
        For high-priority prompts without a reasonable default answer,
        maintainer scripts may abort if there is no controlling terminal.
        However, this situation should be avoided if at all possible,
        since it prevents automated or unattended installs.  In most
        cases, users will consider this to be a bug in the package.
      </para>
    </section>

    <section id="s-exitstatus">
      <title>Exit status</title>

      <para>
        Each script must return a zero exit status for success, or a
        nonzero one for failure, since the package management system looks
        for the exit status of these scripts and determines what action to
        take next based on that datum.
      </para>
    </section>

    <section id="s-mscriptsinstact">
      <title>Summary of ways maintainer scripts are called</title>

      <para>
        What follows is a summary of all the ways in which maintainer
        scripts may be called along with what facilities those scripts may
        rely on being available at that time.  Script names preceded by
        <replaceable>new-</replaceable> are the scripts from the new
        version of a package being installed, upgraded to, or downgraded
        to.  Script names preceded by <replaceable>old-</replaceable> are
        the scripts from the old version of a package that is being
        upgraded from or downgraded from.
      </para>
      <para>
        The <command>preinst</command> script may be called in the
        following ways:
      </para>
      <variablelist>
        <varlistentry>
          <term>
            <cmdsynopsis>
              <command>new-preinst</command>
              <arg choice="plain">install</arg>

              <command>new-preinst</command>
              <arg choice="plain">install</arg>
              <arg choice="plain"><replaceable>old-version</replaceable></arg>

              <command>new-preinst</command>
              <arg choice="plain">upgrade</arg>
              <arg choice="plain"><replaceable>old-version</replaceable></arg>
            </cmdsynopsis>
          </term>
          <listitem>
            <para>
              The package will not yet be unpacked, so the
              <command>preinst</command> script cannot rely on any files
              included in its package.  Only essential packages and
              pre-dependencies (<literal>Pre-Depends</literal>) may be
              assumed to be available.  Pre-dependencies will have been
              configured at least once, but at the time the
              <command>preinst</command> is called they may only be in an
              "Unpacked" or "Half-Configured" state if a previous version
              of the pre-dependency was completely configured and has not
              been removed since then.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <cmdsynopsis>
              <command>old-preinst</command>
              <arg choice="plain">abort-upgrade</arg>
              <arg choice="plain"><replaceable>new-version</replaceable></arg>
            </cmdsynopsis>
          </term>
          <listitem>
            <para>
              Called during error handling of an upgrade that failed after
              unpacking the new package because the <literal>postrm
              upgrade</literal> action failed.  The unpacked files may be
              partly from the new version or partly missing, so the script
              cannot rely on files included in the package.  Package
              dependencies may not be available.  Pre-dependencies will be
              at least "Unpacked" following the same rules as above,
              except they may be only "Half-Installed" if an upgrade of
              the pre-dependency failed.
              <footnote>
                <para>
                  This can happen if the new version of the package no
                  longer pre-depends on a package that had been partially
                  upgraded.
                </para>
              </footnote>
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>
        The <command>postinst</command> script may be called in the
        following ways:
      </para>
      <variablelist>
        <varlistentry>
          <term>
            <cmdsynopsis>
              <command>postinst</command>
              <arg choice="plain">configure</arg>
              <arg choice="plain"><replaceable>most-recently-configured-version</replaceable></arg>
            </cmdsynopsis>
          </term>
          <listitem>
            <para>
              The files contained in the package will be unpacked.  All
              package dependencies will at least be "Unpacked".  If there
              are no circular dependencies involved, all package
              dependencies will be configured.  For behavior in the case
              of circular dependencies, see the discussion in <xref
              linkend="s-binarydeps"/>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <cmdsynopsis>
              <command>old-postinst</command>
              <arg choice="plain">abort-upgrade</arg>
              <arg choice="plain"><replaceable>new-version</replaceable></arg>

              <command>conflictor's-postinst</command>
              <arg choice="plain">abort-remove</arg>
              <arg choice="plain">in-favour</arg>
              <arg choice="plain"><replaceable>package</replaceable></arg>
              <arg choice="plain"><replaceable>new-version</replaceable></arg>

              <command>postinst</command>
              <arg choice="plain">abort-remove</arg>

              <command>deconfigured's-postinst</command>
              <arg choice="plain">abort-deconfigure</arg>
              <arg choice="plain">in-favour</arg>
              <arg choice="plain"><replaceable>failed-install-package</replaceable></arg>
              <arg choice="plain"><replaceable>version</replaceable></arg>
              <arg>
                <arg choice="plain">removing</arg>
                <arg choice="plain"><replaceable>conflicting-package</replaceable></arg>
                <arg choice="plain"><replaceable>version</replaceable></arg>
              </arg>
            </cmdsynopsis>
          </term>
          <listitem>
            <para>
              The files contained in the package will be unpacked.  All
              package dependencies will at least be "Half-Installed" and
              will have previously been configured and not removed.
              However, dependencies may not be configured or even fully
              unpacked in some error situations.
              <footnote>
                <para>
                  For example, suppose packages foo and bar are
                  "Installed" with foo depending on bar.  If an upgrade of
                  bar were started and then aborted, and then an attempt
                  to remove foo failed because its
                  <command>prerm</command> script failed, foo's
                  <literal>postinst abort-remove</literal> would be called
                  with bar only "Half-Installed".
                </para>
              </footnote>
              The <command>postinst</command> should still attempt any
              actions for which its dependencies are required, since they
              will normally be available, but consider the correct error
              handling approach if those actions fail.  Aborting the
              <command>postinst</command> action if commands or facilities
              from the package dependencies are not available is often the
              best approach.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>
        The <command>prerm</command> script may be called in the following
        ways:
      </para>
      <variablelist>
        <varlistentry>
          <term>
            <cmdsynopsis>
              <command>prerm</command>
              <arg choice="plain">remove</arg>

              <command>old-prerm</command>
              <arg choice="plain">upgrade</arg>
              <arg choice="plain"><replaceable>new-version</replaceable></arg>

              <command>conflictor's-prerm</command>
              <arg choice="plain">remove</arg>
              <arg choice="plain">in-favour</arg>
              <arg choice="plain"><replaceable>package</replaceable></arg>
              <arg choice="plain"><replaceable>new-version</replaceable></arg>

              <command>deconfigured's-prerm</command>
              <arg choice="plain">deconfigure</arg>
              <arg choice="plain">in-favour</arg>
              <arg choice="plain"><replaceable>package-being-installed</replaceable></arg>
              <arg choice="plain"><replaceable>version</replaceable></arg>
              <arg>
                <arg choice="plain">removing</arg>
                <arg choice="plain"><replaceable>conflicting-package</replaceable></arg>
                <arg choice="plain"><replaceable>version</replaceable></arg>
              </arg>
            </cmdsynopsis>
          </term>
          <listitem>
            <para>
              The package whose <command>prerm</command> is being called
              will be at least "Half-Installed".  All package dependencies
              will at least be "Half-Installed" and will have previously
              been configured and not removed.  If there was no error, all
              dependencies will at least be "Unpacked", but these actions
              may be called in various error states where dependencies are
              only "Half-Installed" due to a partial upgrade.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <cmdsynopsis>
              <command>new-prerm</command>
              <arg choice="plain">failed-upgrade</arg>
              <arg choice="plain"><replaceable>old-version</replaceable></arg>
            </cmdsynopsis>
          </term>
          <listitem>
            <para>
              Called during error handling when <literal>prerm
              upgrade</literal> fails.  The new package will not yet be
              unpacked, and all the same constraints as for
              <literal>preinst upgrade</literal> apply.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>
        The <command>postrm</command> script may be called in the
        following ways:
      </para>
      <variablelist>
        <varlistentry>
          <term>
            <cmdsynopsis>
              <command>postrm</command>
              <arg choice="plain">remove</arg>

              <command>postrm</command>
              <arg choice="plain">purge</arg>

              <command>old-postrm</command>
              <arg choice="plain">upgrade</arg>
              <arg choice="plain"><replaceable>new-version</replaceable></arg>

              <command>disappearer's-postrm</command>
              <arg choice="plain">disappear</arg>
              <arg choice="plain"><replaceable>overwriter</replaceable></arg>
              <arg choice="plain"><replaceable>overwriter-version</replaceable></arg>
            </cmdsynopsis>
          </term>
          <listitem>
            <para>
              The <command>postrm</command> script is called after the
              package's files have been removed or replaced.  The package
              whose <command>postrm</command> is being called may have
              previously been deconfigured and only be "Unpacked", at
              which point subsequent package changes do not consider its
              dependencies.  Therefore, all <command>postrm</command>
              actions may only rely on essential packages and must
              gracefully skip any actions that require the package's
              dependencies if those dependencies are unavailable.
              <footnote>
                <para>
                  This is often done by checking whether the command or
                  facility the <command>postrm</command> intends to call
                  is available before calling it.  For example:
                </para>
                <programlisting>
if [ "$1" = purge ] &amp;&amp; [ -e /usr/share/debconf/confmodule ]; then
    . /usr/share/debconf/confmodule db_purge
fi</programlisting>
                <para>
                  in <command>postrm</command> purges the
                  <command>debconf</command> configuration for the package
                  if <systemitem role="package">debconf</systemitem> is
                  installed.
                </para>
              </footnote>
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <cmdsynopsis>
              <command>new-postrm</command>
              <arg choice="plain">failed-upgrade</arg>
              <arg choice="plain"><replaceable>old-version</replaceable></arg>
            </cmdsynopsis>
          </term>
          <listitem>
            <para>
              Called when the old <literal>postrm upgrade</literal> action
              fails.  The new package will be unpacked, but only essential
              packages and pre-dependencies can be relied on.
              Pre-dependencies will either be configured or will be
              "Unpacked" or "Half-Configured" but previously had been
              configured and was never removed.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <cmdsynopsis>
              <command>new-postrm</command>
              <arg choice="plain">abort-install</arg>

              <command>new-postrm</command>
              <arg choice="plain">abort-install</arg>
              <arg choice="plain"><replaceable>old-version</replaceable></arg>

              <command>new-postrm</command>
              <arg choice="plain">abort-upgrade</arg>
              <arg choice="plain"><replaceable>old-version</replaceable></arg>
            </cmdsynopsis>
          </term>
          <listitem>
            <para>
              Called before unpacking the new package as part of the error
              handling of <command>preinst</command> failures.  May assume
              the same state as <command>preinst</command> can assume.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="s-unpackphase">
      <title>Details of unpack phase of installation or upgrade</title>

      <para>
        The procedure on installation/upgrade/overwrite/disappear (i.e.,
        when running <literal>dpkg --unpack</literal>, or the unpack stage
        of <literal>dpkg --install</literal>) is as follows.  In each
        case, if a major error occurs (unless listed below) the actions
        are, in general, run backwards - this means that the maintainer
        scripts are run with different arguments in reverse order.  These
        are the "error unwind" calls listed below.
      </para>
      <orderedlist numeration="arabic">
        <listitem>
          <para>
            Notify the currently installed package:
          </para>
          <orderedlist numeration="loweralpha">
            <listitem>
              <para>
                If a version of the package is already "Installed", call
              </para>
              <screen><replaceable>old-prerm</replaceable> upgrade <replaceable>new-version</replaceable></screen>
            </listitem>
            <listitem>
              <para>
                If the script runs but exits with a non-zero exit status,
                <command>dpkg</command> will attempt:
              </para>
              <screen><replaceable>new-prerm</replaceable> failed-upgrade <replaceable>old-version</replaceable></screen>
              <para>
                If this works, the upgrade continues.  If this does not
                work, the error unwind:
              </para>
              <screen><replaceable>old-postinst</replaceable> abort-upgrade <replaceable>new-version</replaceable></screen>
              <para>
                If this works, then the old-version is "Installed", if
                not, the old version is in a "Half-Configured" state.
              </para>
            </listitem>
          </orderedlist>
        </listitem>
        <listitem>
          <para>
            If a "conflicting" package is being removed at the same time,
            or if any package will be broken (due to
            <literal>Breaks</literal>):
          </para>
          <orderedlist numeration="loweralpha">
            <listitem>
              <para>
                If <literal>--auto-deconfigure</literal> is specified,
                call, for each package to be deconfigured due to
                <literal>Breaks</literal>:
              </para>
              <screen>
<replaceable>deconfigured's-prerm</replaceable> deconfigure \
    in-favour <replaceable>package-being-installed</replaceable> <replaceable>version</replaceable></screen>
              <para>
                Error unwind:
              </para>
              <screen>
<replaceable>deconfigured's-postinst</replaceable> abort-deconfigure \
    in-favour <replaceable>package-being-installed-but-failed</replaceable> <replaceable>version</replaceable></screen>
              <para>
                The deconfigured packages are marked as requiring
                configuration, so that if <literal>--install</literal> is
                used they will be configured again if possible.
              </para>
            </listitem>
            <listitem>
              <para>
                If any packages depended on a conflicting package being
                removed and <literal>--auto-deconfigure</literal> is
                specified, call, for each such package:
              </para>
              <screen>
<replaceable>deconfigured's-prerm</replaceable> deconfigure \
    in-favour <replaceable>package-being-installed</replaceable> <replaceable>version</replaceable> \
    removing <replaceable>conflicting-package</replaceable> <replaceable>version</replaceable></screen>
              <para>
                Error unwind:
              </para>
              <screen>
<replaceable>deconfigured's-postinst</replaceable> abort-deconfigure \
    in-favour <replaceable>package-being-installed-but-failed</replaceable> <replaceable>version</replaceable> \
    removing <replaceable>conflicting-package</replaceable> <replaceable>version</replaceable></screen>
              <para>
                The deconfigured packages are marked as requiring
                configuration, so that if <literal>--install</literal> is
                used they will be configured again if possible.
              </para>
            </listitem>
            <listitem>
              <para>
                To prepare for removal of each conflicting package, call:
              </para>
              <screen>
<replaceable>conflictor's-prerm</replaceable> remove \
    in-favour <replaceable>package</replaceable> <replaceable>new-version</replaceable></screen>
              <para>
                Error unwind:
              </para>
              <screen>
<replaceable>conflictor's-postinst</replaceable> abort-remove \
    in-favour <replaceable>package</replaceable> <replaceable>new-version</replaceable></screen>
            </listitem>
          </orderedlist>
        </listitem>
        <listitem>
          <para>
            Run the <command>preinst</command> of the new package:
          </para>
          <orderedlist numeration="loweralpha">
            <listitem>
              <para>
                If the package is being upgraded, call:
              </para>
              <screen><replaceable>new-preinst</replaceable> upgrade <replaceable>old-version</replaceable></screen>
              <para>
                If this fails, we call:
              </para>
              <screen><replaceable>new-postrm</replaceable> abort-upgrade <replaceable>old-version</replaceable></screen>
              <orderedlist numeration="lowerroman">
                <listitem>
                  <para>
                    If that works, then
                  </para>
                  <screen><replaceable>old-postinst</replaceable> abort-upgrade <replaceable>new-version</replaceable></screen>
                  <para>
                    is called.  If this works, then the old version is in
                    an "Installed" state, or else it is left in an
                    "Unpacked" state.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    If it fails, then the old version is left in an
                    "Half-Installed" state.
                  </para>
                </listitem>
              </orderedlist>
            </listitem>
            <listitem>
              <para>
                Otherwise, if the package had some configuration files
                from a previous version installed (i.e., it is in the
                "Config-Files" state):
              </para>
              <screen><replaceable>new-preinst</replaceable> install <replaceable>old-version</replaceable></screen>
              <para>
                Error unwind:
              </para>
              <screen><replaceable>new-postrm</replaceable> abort-install <replaceable>old-version</replaceable></screen>
              <para>
                If this fails, the package is left in a "Half-Installed"
                state, which requires a reinstall.  If it works, the
                packages is left in a "Config-Files" state.
              </para>
            </listitem>
            <listitem>
              <para>
                Otherwise (i.e., the package was completely purged):
              </para>
              <screen><replaceable>new-preinst</replaceable> install</screen>
              <para>
                Error unwind:
              </para>
              <screen><replaceable>new-postrm</replaceable> abort-install</screen>
              <para>
                If the error-unwind fails, the package is in a
                "Half-Installed" phase, and requires a reinstall.  If the
                error unwind works, the package is in the "Not-Installed"
                state.
              </para>
            </listitem>
          </orderedlist>
        </listitem>
        <listitem>
          <para>
            The new package's files are unpacked, overwriting any that may
            be on the system already, for example any from the old version
            of the same package or from another package.  Backups of the
            old files are kept temporarily, and if anything goes wrong the
            package management system will attempt to put them back as
            part of the error unwind.
          </para>
          <para>
            It is an error for a package to contain files which are on the
            system in another package, unless <literal>Replaces</literal>
            is used (see <xref linkend="s-replaces"/>).
          </para>
          <para>
            It is a more serious error for a package to contain a plain
            file or other kind of non-directory where another package has
            a directory (again, unless <literal>Replaces</literal> is
            used).  This error can be overridden if desired using
            <literal>--force-overwrite-dir</literal>, but this is not
            advisable.
          </para>
          <para>
            Packages which overwrite each other's files produce behavior
            which, though deterministic, is hard for the system
            administrator to understand.  It can easily lead to "missing"
            programs if, for example, a package is unpacked which
            overwrites a file from another package, and is then removed
            again.
            <footnote>
              <para>
                Part of the problem is due to what is arguably a bug in
                <command>dpkg</command>.
              </para> 
            </footnote>
          </para>
          <para>
            A directory will never be replaced by a symbolic link to a
            directory or vice versa; instead, the existing state (symlink
            or not) will be left alone and <command>dpkg</command> will
            follow the symlink if there is one.
          </para>
        </listitem>
        <listitem>
          <para>
            If the package is being upgraded:
          </para>
          <orderedlist numeration="loweralpha">
            <listitem>
              <para>
                Call:
              </para>
              <screen><replaceable>old-postrm</replaceable> upgrade <replaceable>new-version</replaceable></screen>
            </listitem>
            <listitem>
              <para>
                If this fails, <command>dpkg</command> will attempt:
              </para>
              <screen><replaceable>new-postrm</replaceable> failed-upgrade <replaceable>old-version</replaceable></screen>
              <para>
                If this works, installation continues.  If not, Error unwind:
              </para>
              <screen><replaceable>old-preinst</replaceable> abort-upgrade <replaceable>new-version</replaceable></screen>
              <para>
                If this fails, the old version is left in a
                "Half-Installed" state.  If it works, dpkg now calls:
              </para>
              <screen><replaceable>new-postrm</replaceable> abort-upgrade <replaceable>old-version</replaceable></screen>
              <para>
                If this fails, the old version is left in a
                "Half-Installed" state.  If it works, dpkg now calls:
              </para>
              <screen><replaceable>old-postinst</replaceable> abort-upgrade <replaceable>new-version</replaceable></screen>
              <para>
                If this fails, the old version is in an "Unpacked" state.
              </para>
            </listitem>
          </orderedlist>
          <para>
            This is the point of no return.  If <command>dpkg</command>
            gets this far, it won't back off past this point if an error
            occurs.  This will leave the package in a fairly bad state,
            which will require a successful re-installation to clear up,
            but it's when <command>dpkg</command> starts doing things that
            are irreversible.
          </para>
        </listitem>
        <listitem>
          <para>
            Any files which were in the old version of the package but not
            in the new are removed.
          </para>
        </listitem>
        <listitem>
          <para>
            The new file list replaces the old.
          </para>
        </listitem>
        <listitem>
          <para>
            The new maintainer scripts replace the old.
          </para>
        </listitem>
        <listitem>
          <para>
            Any packages all of whose files have been overwritten during
            the installation, and which aren't required for dependencies,
            are considered to have been removed.  For each such package
          </para>
          <orderedlist numeration="loweralpha">
            <listitem>
              <para>
                <command>dpkg</command> calls:
              </para>
              <screen>
<replaceable>disappearer's-postrm</replaceable> disappear \
    <replaceable>overwriter</replaceable> <replaceable>overwriter-version</replaceable></screen>
            </listitem>
            <listitem>
              <para>
                The package's maintainer scripts are removed.
              </para>
            </listitem>
            <listitem>
              <para>
                It is noted in the status database as being in a sane
                state, namely "Not-Installed" (any conffiles it may have
                are ignored, rather than being removed by
                <command>dpkg</command>).  Note that disappearing packages
                do not have their prerm called, because
                <command>dpkg</command> doesn't know in advance that the
                package is going to vanish.
              </para>
            </listitem>
          </orderedlist>
        </listitem>
        <listitem>
          <para>
            Any files in the package we're unpacking that are also listed
            in the file lists of other packages are removed from those
            lists.  (This will lobotomize the file list of the
            "conflicting" package if there is one.)
          </para>
        </listitem>
        <listitem>
          <para>
            The backup files made during installation, above, are deleted.
          </para>
        </listitem>
        <listitem>
          <para>
            The new package's status is now sane, and recorded as "Unpacked".
          </para>
          <para>
            Here is another point of no return: if the conflicting
            package's removal fails we do not unwind the rest of the
            installation.  The conflicting package is left in a
            half-removed limbo.
          </para>
        </listitem>
        <listitem>
          <para>
            If there was a conflicting package we go and do the removal
            actions (described below), starting with the removal of the
            conflicting package's files (any that are also in the package
            being unpacked have already been removed from the conflicting
            package's file list, and so do not get removed now).
          </para>
        </listitem>
      </orderedlist>
    </section>

    <section id="s-configdetails">
      <title>Details of configuration</title>

      <para>
        When we configure a package (this happens with <literal>dpkg
        --install</literal> and <literal>dpkg --configure</literal>), we
        first update any <literal>conffile</literal>s and then call:
      </para>
      <screen><replaceable>postinst</replaceable> configure <replaceable>most-recently-configured-version</replaceable></screen>
      <para>
        No attempt is made to unwind after errors during configuration.
        If the configuration fails, the package is in a "Half-Configured"
        state, and an error message is generated.
      </para>
      <para>
        If there is no most recently configured version
        <command>dpkg</command> will pass a null argument.
        <footnote>
          <para>
            Historical note: Truly ancient (pre-1997) versions of
            <command>dpkg</command> passed
            <literal>&lt;unknown&gt;</literal> (including the angle
            brackets) in this case.  Even older ones did not pass a second
            argument at all, under any circumstance.  Note that upgrades
            using such an old dpkg version are unlikely to work for other
            reasons, even if this old argument behavior is handled by your
            postinst script.
          </para>
        </footnote>
      </para>
    </section>

    <section id="s-removedetails">
      <title>Details of removal and/or configuration purging</title>

      <orderedlist numeration="arabic">
        <listitem>
          <screen><replaceable>prerm</replaceable> remove</screen>
          <para>
            If prerm fails during replacement due to conflict
          </para>
          <screen>
<replaceable>conflictor's-postinst</replaceable> abort-remove \
    in-favour <replaceable>package</replaceable> <replaceable>new-version</replaceable></screen>
          <para>
            Or else we call:
          </para>
          <screen><replaceable>postinst</replaceable> abort-remove</screen>
          <para>
            If this fails, the package is in a "Half-Configured" state, or
            else it remains "Installed".
          </para>
        </listitem>
        <listitem>
          <para>
            The package's files are removed (except
            <literal>conffile</literal>s).
          </para>
        </listitem>
        <listitem>
          <screen><replaceable>postrm</replaceable> remove</screen>
          <para>
            If it fails, there's no error unwind, and the package is in an
            "Half-Installed" state.
          </para>
        </listitem>
        <listitem>
          <para>
            All the maintainer scripts except the
            <command>postrm</command> are removed.
          </para>
          <para>
            If we aren't purging the package we stop here.  Note that
            packages which have no <command>postrm</command> and no
            <literal>conffile</literal>s are automatically purged when
            removed, as there is no difference except for the
            <command>dpkg</command> status.
          </para>
        </listitem>
        <listitem>
          <para>
            The <literal>conffile</literal>s and any backup files
            (<literal>~</literal>-files, <literal>#*#</literal> files,
            <literal>%</literal>-files,
            <literal>.dpkg-{old,new,tmp}</literal>, etc.) are removed.
          </para>
        </listitem>
        <listitem>
          <screen><replaceable>postrm</replaceable> purge</screen>
          <para>
            If this fails, the package remains in a "Config-Files" state.
          </para>
        </listitem>
        <listitem>
          <para>
            The package's file list is removed.
          </para>
        </listitem>
      </orderedlist>
    </section>
  </chapter>

  <chapter id="ch-relationships">
    <title>Declaring relationships between packages</title>

    <section id="s-depsyntax">
      <title>Syntax of relationship fields</title>

      <para>
        These fields all have a uniform syntax.  They are a list of
        package names separated by commas.
      </para>
      <para>
        In the <literal>Depends</literal>, <literal>Recommends</literal>,
        <literal>Suggests</literal>, <literal>Pre-Depends</literal>,
        <literal>Build-Depends</literal>,
        <literal>Build-Depends-Indep</literal> and
        <literal>Build-Depends-Arch</literal> control fields of the
        package, which declare dependencies on other packages, the package
        names listed may also include lists of alternative package names,
        separated by vertical bar (pipe) symbols <literal>|</literal>.  In
        such a case, that part of the dependency can be satisfied by any
        one of the alternative packages.
      </para>
      <para>
        All of the fields except for <literal>Provides</literal> may
        restrict their applicability to particular versions of each named
        package.  This is done in parentheses after each individual
        package name; the parentheses should contain a relation from the
        list below followed by a version number, in the format described
        in <xref linkend="s-f-Version"/>.
      </para>
      <para>
        The relations allowed are <literal>&lt;&lt;</literal>,
        <literal>&lt;=</literal>, <literal>=</literal>,
        <literal>&gt;=</literal> and <literal>&gt;&gt;</literal> for
        strictly earlier, earlier or equal, exactly equal, later or equal
        and strictly later, respectively.
        <footnote>
          <para>
            The relations <literal>&lt;</literal> and
            <literal>&gt;</literal> were previously allowed, but they were
            confusingly defined to mean earlier/later or equal rather than
            strictly earlier/later.  <command>dpkg</command> still
            supports them with a warning, but they are no longer allowed
            by Debian Policy.
          </para>
        </footnote>
      </para>
      <para>
        Whitespace may appear at any point in the version specification
        subject to the rules in <xref linkend="s-controlsyntax"/>, and
        must appear where it's necessary to disambiguate; it is not
        otherwise significant.  All of the relationship fields can only be
        folded in source package control files.  For consistency and in
        case of future changes to <command>dpkg</command> it is
        recommended that a single space be used after a version
        relationship and before a version number; it is also conventional
        to put a single space after each comma, on either side of each
        vertical bar, and before each open parenthesis.  When opening a
        continuation line in a relationship field, it is conventional to
        do so after a comma and before the space following that comma.
      </para>
      <para>
        For example, a list of dependencies might appear as:
      </para>
      <programlisting>
Package: mutt
Version: 1.3.17-1
Depends: libc6 (&gt;= 2.2.1), exim | mail-transport-agent</programlisting>
      <para>
        Relationships may be restricted to a certain set of architectures.
        This is indicated in brackets after each individual package name
        and the optional version specification.  The brackets enclose a
        non-empty list of Debian architecture names in the format
        described in <xref linkend="s-arch-spec"/>, separated by
        whitespace.  Exclamation marks may be prepended to each of the
        names.  (It is not permitted for some names to be prepended with
        exclamation marks while others aren't.)
      </para>
      <para>
        For build relationship fields (<literal>Build-Depends</literal>,
        <literal>Build-Depends-Indep</literal>,
        <literal>Build-Depends-Arch</literal>,
        <literal>Build-Conflicts</literal>,
        <literal>Build-Conflicts-Indep</literal> and
        <literal>Build-Conflicts-Arch</literal>), if the current Debian
        host architecture is not in this list and there are no exclamation
        marks in the list, or it is in the list with a prepended
        exclamation mark, the package name and the associated version
        specification are ignored completely for the purposes of defining
        the relationships.
      </para>
      <para>
        For example:
      </para>
      <programlisting>
Source: glibc
Build-Depends-Indep: texinfo
Build-Depends: kernel-headers-2.2.10 [!hurd-i386],
 hurd-dev [hurd-i386], gnumach-dev [hurd-i386]</programlisting>
      <para>
        requires <literal>kernel-headers-2.2.10</literal> on all
        architectures other than hurd-i386 and requires
        <literal>hurd-dev</literal> and <literal>gnumach-dev</literal>
        only on hurd-i386.  Here is another example showing multiple
        architectures separated by spaces:
      </para>
      <programlisting>
Build-Depends:
 libluajit5.1-dev [i386 amd64 kfreebsd-i386 armel armhf powerpc mips],
 liblua5.1-dev [hurd-i386 ia64 kfreebsd-amd64 s390x sparc],</programlisting>
      <para>
        For binary relationship fields and the
        <literal>Built-Using</literal> field, the architecture restriction
        syntax is only supported in the source package control file
        <filename>debian/control</filename>.  When the corresponding
        binary package control file is generated, the relationship will
        either be omitted or included without the architecture restriction
        based on the architecture of the binary package.  This means that
        architecture restrictions must not be used in binary relationship
        fields for architecture-independent packages
        (<literal>Architecture: all</literal>).
      </para>
      <para>
        For example:
      </para>
      <programlisting>Depends: foo [i386], bar [amd64]</programlisting>
      <para>
        becomes <literal>Depends: foo</literal> when the package is built
        on the <literal>i386</literal> architecture, <literal>Depends:
        bar</literal> when the package is built on the
        <literal>amd64</literal> architecture, and omitted entirely in
        binary packages built on all other architectures.
      </para>
      <para>
        If the architecture-restricted dependency is part of a set of
        alternatives using <literal>|</literal>, that alternative is
        ignored completely on architectures that do not match the
        restriction.  For example:
      </para>
      <programlisting>Build-Depends: foo [!i386] | bar [!amd64]</programlisting>
      <para>
        is equivalent to <literal>bar</literal> on the i386 architecture,
        to <literal>foo</literal> on the amd64 architecture, and to
        <literal>foo | bar</literal> on all other architectures.
      </para>
      <para>
        Relationships may also be restricted to a certain set of
        architectures using architecture wildcards in the format described
        in <xref linkend="s-arch-wildcard-spec"/>.  The syntax for
        declaring such restrictions is the same as declaring restrictions
        using a certain set of architectures without architecture
        wildcards.  For example:
      </para>
      <programlisting>Build-Depends: foo [linux-any], bar [any-i386], baz [!linux-any]</programlisting>
      <para>
        is equivalent to <literal>foo</literal> on architectures using the
        Linux kernel and any cpu, <literal>bar</literal> on architectures
        using any kernel and an i386 cpu, and <literal>baz</literal> on
        any architecture using a kernel other than Linux.
      </para>
      <para>
        Note that the binary package relationship fields such as
        <literal>Depends</literal> appear in one of the binary package
        sections of the control file, whereas the build-time relationships
        such as <literal>Build-Depends</literal> appear in the source
        package section of the control file (which is the first section).
      </para>
    </section>

    <section id="s-binarydeps">
      <title>
        Binary Dependencies - <literal>Depends</literal>,
        <literal>Recommends</literal>, <literal>Suggests</literal>,
        <literal>Enhances</literal>, <literal>Pre-Depends</literal>
      </title>
      <para>
        Packages can declare in their control file that they have certain
        relationships to other packages - for example, that they may not
        be installed at the same time as certain other packages, and/or
        that they depend on the presence of others.
      </para>
      <para>
        This is done using the <literal>Depends</literal>,
        <literal>Pre-Depends</literal>, <literal>Recommends</literal>,
        <literal>Suggests</literal>, <literal>Enhances</literal>,
        <literal>Breaks</literal> and <literal>Conflicts</literal> control
        fields.  <literal>Breaks</literal> is described in <xref
        linkend="s-breaks"/>, and <literal>Conflicts</literal> is
        described in <xref linkend="s-conflicts"/>.  The rest are
        described below.
      </para>
      <para>
        These seven fields are used to declare a dependency relationship
        by one package on another.  Except for <literal>Enhances</literal>
        and <literal>Breaks</literal>, they appear in the depending
        (binary) package's control file.  (<literal>Enhances</literal>
        appears in the recommending package's control file, and
        <literal>Breaks</literal> appears in the version of depended-on
        package which causes the named package to break).
      </para>
      <para>
        A <literal>Depends</literal> field takes effect
        <emphasis>only</emphasis> when a package is to be configured.  It
        does not prevent a package being on the system in an unconfigured
        state while its dependencies are unsatisfied, and it is possible
        to replace a package whose dependencies are satisfied and which is
        properly installed with a different version whose dependencies are
        not and cannot be satisfied; when this is done the depending
        package will be left unconfigured (since attempts to configure it
        will give errors) and will not function properly.  If it is
        necessary, a <literal>Pre-Depends</literal> field can be used,
        which has a partial effect even when a package is being unpacked,
        as explained in detail below.  (The other three dependency fields,
        <literal>Recommends</literal>, <literal>Suggests</literal> and
        <literal>Enhances</literal>, are only used by the various
        front-ends to <command>dpkg</command> such as
        <command>apt-get</command>, <command>aptitude</command>, and
        <command>dselect</command>.)
      </para>
      <para>
        Since <literal>Depends</literal> only places requirements on the
        order in which packages are configured, packages in an
        installation run are usually all unpacked first and all configured
        later.
        <footnote>
          <para>
            This approach makes dependency resolution easier.  If two
            packages A and B are being upgraded, the installed package A
            depends on exactly the installed package B, and the new
            package A depends on exactly the new package B (a common
            situation when upgrading shared libraries and their
            corresponding development packages), satisfying the
            dependencies at every stage of the upgrade would be
            impossible.  This relaxed restriction means that both new
            packages can be unpacked together and then configured in their
            dependency order.
          </para>
        </footnote>
      </para>
      <para>
        If there is a circular dependency among packages being installed
        or removed, installation or removal order honoring the dependency
        order is impossible, requiring the dependency loop be broken at
        some point and the dependency requirements violated for at least
        one package.  Packages involved in circular dependencies may not
        be able to rely on their dependencies being configured before they
        themselves are configured, depending on which side of the break of
        the circular dependency loop they happen to be on.  If one of the
        packages in the loop has no <command>postinst</command> script,
        then the cycle will be broken at that package; this ensures that
        all <command>postinst</command> scripts are run with their
        dependencies properly configured if this is possible.  Otherwise
        the breaking point is arbitrary.  Packages should therefore avoid
        circular dependencies where possible, particularly if they have
        <command>postinst</command> scripts.
      </para>
      <para>
        The meaning of the five dependency fields is as follows:
      </para>
      <variablelist>
        <varlistentry>
          <term><literal>Depends</literal></term>
          <listitem>
            <para>
              This declares an absolute dependency.  A package will not be
              configured unless all of the packages listed in its
              <literal>Depends</literal> field have been correctly
              configured (unless there is a circular dependency as
              described above).
            </para>
            <para>
              The <literal>Depends</literal> field should be used if the
              depended-on package is required for the depending package to
              provide a significant amount of functionality.
            </para>
            <para>
              The <literal>Depends</literal> field should also be used if
              the <command>postinst</command> or <command>prerm</command>
              scripts require the depended-on package to be unpacked or
              configured in order to run.  In the case of
              <literal>postinst configure</literal>, the depended-on
              packages will be unpacked and configured first.  (If both
              packages are involved in a dependency loop, this might not
              work as expected; see the explanation a few paragraphs
              back.) In the case of <command>prerm</command> or other
              <command>postinst</command> actions, the package
              dependencies will normally be at least unpacked, but they
              may be only "Half-Installed" if a previous upgrade of the
              dependency failed.
            </para>
            <para>
              Finally, the <literal>Depends</literal> field should be used
              if the depended-on package is needed by the
              <command>postrm</command> script to fully clean up after the
              package removal.  There is no guarantee that package
              dependencies will be available when
              <command>postrm</command> is run, but the depended-on
              package is more likely to be available if the package
              declares a dependency (particularly in the case of
              <literal>postrm remove</literal>).  The
              <command>postrm</command> script must gracefully skip
              actions that require a dependency if that dependency isn't
              available.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>Recommends</literal></term>
          <listitem>
            <para>
              This declares a strong, but not absolute, dependency.
            </para>
            <para>
              The <literal>Recommends</literal> field should list packages
              that would be found together with this one in all but
              unusual installations.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>Suggests</literal></term>
          <listitem>
            <para>
              This is used to declare that one package may be more useful
              with one or more others.  Using this field tells the
              packaging system and the user that the listed packages are
              related to this one and can perhaps enhance its usefulness,
              but that installing this one without them is perfectly
              reasonable.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>Enhances</literal></term>
          <listitem>
            <para>
              This field is similar to Suggests but works in the opposite
              direction.  It is used to declare that a package can enhance
              the functionality of another package.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>Pre-Depends</literal></term>
          <listitem>
            <para>
              This field is like <literal>Depends</literal>, except that
              it also forces <command>dpkg</command> to complete
              installation of the packages named before even starting the
              installation of the package which declares the
              pre-dependency, as follows:
            </para>
            <para>
              When a package declaring a pre-dependency is about to be
              <emphasis>unpacked</emphasis> the pre-dependency can be
              satisfied if the depended-on package is either fully
              configured, <emphasis>or even if</emphasis> the depended-on
              package(s) are only in the "Unpacked" or the
              "Half-Configured" state, provided that they have been
              configured correctly at some point in the past (and not
              removed or partially removed since).  In this case, both the
              previously-configured and currently "Unpacked" or
              "Half-Configured" versions must satisfy any version clause
              in the <literal>Pre-Depends</literal> field.
            </para>
            <para>
              When the package declaring a pre-dependency is about to be
              <emphasis>configured</emphasis>, the pre-dependency will be
              treated as a normal <literal>Depends</literal>.  It will be
              considered satisfied only if the depended-on package has
              been correctly configured.  However, unlike with
              <literal>Depends</literal>, <literal>Pre-Depends</literal>
              does not permit circular dependencies to be broken.  If a
              circular dependency is encountered while attempting to honor
              <literal>Pre-Depends</literal>, the installation will be
              aborted.
            </para>
            <para>
              <literal>Pre-Depends</literal> are also required if the
              <command>preinst</command> script depends on the named
              package.  It is best to avoid this situation if possible.
            </para>
            <para>
              <literal>Pre-Depends</literal> should be used sparingly,
              preferably only by packages whose premature upgrade or
              installation would hamper the ability of the system to
              continue with any upgrade that might be in progress.
            </para>
            <para>
              You should not specify a <literal>Pre-Depends</literal>
              entry for a package before this has been discussed on the
              <literal>debian-devel</literal> mailing list and a consensus
              about doing that has been reached.  See <xref
              linkend="s-dependencies"/>.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>
        When selecting which level of dependency to use you should
        consider how important the depended-on package is to the
        functionality of the one declaring the dependency.  Some packages
        are composed of components of varying degrees of importance.  Such
        a package should list using <literal>Depends</literal> the
        package(s) which are required by the more important components.
        The other components' requirements may be mentioned as Suggestions
        or Recommendations, as appropriate to the components' relative
        importance.
      </para>
    </section>

    <section id="s-breaks">
      <title>
        Packages which break other packages - <literal>Breaks</literal>
      </title>

      <para>
        When one binary package declares that it breaks another,
        <command>dpkg</command> will refuse to allow the package which
        declares <literal>Breaks</literal> to be unpacked unless the
        broken package is deconfigured first, and it will refuse to allow
        the broken package to be reconfigured.
      </para>
      <para>
        A package will not be regarded as causing breakage merely because
        its configuration files are still installed; it must be at least
        "Half-Installed".
      </para>
      <para>
        A special exception is made for packages which declare that they
        break their own package name or a virtual package which they
        provide (see below): this does not count as a real breakage.
      </para>
      <para>
        Normally a <literal>Breaks</literal> entry will have an "earlier
        than" version clause; such a <literal>Breaks</literal> is
        introduced in the version of an (implicit or explicit) dependency
        which violates an assumption or reveals a bug in earlier versions
        of the broken package, or which takes over a file from earlier
        versions of the package named in <literal>Breaks</literal>.  This
        use of <literal>Breaks</literal> will inform higher-level package
        management tools that the broken package must be upgraded before
        the new one.
      </para>
      <para>
        If the breaking package also overwrites some files from the older
        package, it should use <literal>Replaces</literal> to ensure this
        goes smoothly.  See <xref linkend="s-replaces"/> for a full
        discussion of taking over files from other packages, including how
        to use <literal>Breaks</literal> in those cases.
      </para>
      <para>
        Many of the cases where <literal>Breaks</literal> should be used
        were previously handled with <literal>Conflicts</literal> because
        <literal>Breaks</literal> did not yet exist.  Many
        <literal>Conflicts</literal> fields should now be
        <literal>Breaks</literal>.  See <xref linkend="s-conflicts"/> for
        more information about the differences.
      </para>
    </section>

    <section id="s-conflicts">
      <title>Conflicting binary packages - <literal>Conflicts</literal></title>

      <para>
        When one binary package declares a conflict with another using a
        <literal>Conflicts</literal> field, <command>dpkg</command> will
        refuse to allow them to be unpacked on the system at the same
        time.  This is a stronger restriction than
        <literal>Breaks</literal>, which prevents the broken package from
        being configured while the breaking package is in the "Unpacked"
        state but allows both packages to be unpacked at the same time.
      </para>
      <para>
        If one package is to be unpacked, the other must be removed first.
        If the package being unpacked is marked as replacing (see <xref
        linkend="s-replaces"/>, but note that <literal>Breaks</literal>
        should normally be used in this case) the one on the system, or
        the one on the system is marked as deselected, or both packages
        are marked <literal>Essential</literal>, then
        <command>dpkg</command> will automatically remove the package
        which is causing the conflict.  Otherwise, it will halt the
        installation of the new package with an error.  This mechanism is
        specifically designed to produce an error when the installed
        package is <literal>Essential</literal>, but the new package is
        not.
      </para>
      <para>
        A package will not cause a conflict merely because its
        configuration files are still installed; it must be at least
        "Half-Installed".
      </para>
      <para>
        A special exception is made for packages which declare a conflict
        with their own package name, or with a virtual package which they
        provide (see below):  this does not prevent their installation,
        and allows a package to conflict with others providing a
        replacement for it.  You use this feature when you want the
        package in question to be the only package providing some feature.
      </para>
      <para>
        Normally, <literal>Breaks</literal> should be used instead of
        <literal>Conflicts</literal> since <literal>Conflicts</literal>
        imposes a stronger restriction on the ordering of package
        installation or upgrade and can make it more difficult for the
        package manager to find a correct solution to an upgrade or
        installation problem.  <literal>Breaks</literal> should be used
      </para>
      <itemizedlist>
        <listitem>
          <para>
            when moving a file from one package to another (see <xref
            linkend="s-replaces"/>),
          </para>
        </listitem>
        <listitem>
          <para>
            when splitting a package (a special case of the previous one),
            or
          </para>
        </listitem>
        <listitem>
          <para>
            when the breaking package exposes a bug in or interacts badly
            with particular versions of the broken package.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        <literal>Conflicts</literal> should be used
      </para>
      <itemizedlist>
        <listitem>
          <para>
            when two packages provide the same file and will continue to
            do so,
          </para>
        </listitem>
        <listitem>
          <para>
            in conjunction with <literal>Provides</literal> when only one
            package providing a given virtual facility may be unpacked at
            a time (see <xref linkend="s-virtual"/>),
          </para>
        </listitem>
        <listitem>
          <para>
            in other cases where one must prevent simultaneous
            installation of two packages for reasons that are ongoing (not
            fixed in a later version of one of the packages) or that must
            prevent both packages from being unpacked at the same time,
            not just configured.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Be aware that adding <literal>Conflicts</literal> is normally not
        the best solution when two packages provide the same files.
        Depending on the reason for that conflict, using alternatives or
        renaming the files is often a better approach.  See, for example,
        <xref linkend="s-binaries"/>.
      </para>
      <para>
        Neither <literal>Breaks</literal> nor <literal>Conflicts</literal>
        should be used unless two packages cannot be installed at the same
        time or installing them both causes one of them to be broken or
        unusable.  Having similar functionality or performing the same
        tasks as another package is not sufficient reason to declare
        <literal>Breaks</literal> or <literal>Conflicts</literal> with
        that package.
      </para>
      <para>
        A <literal>Conflicts</literal> entry may have an "earlier than"
        version clause if the reason for the conflict is corrected in a
        later version of one of the packages.  However, normally the
        presence of an "earlier than" version clause is a sign that
        <literal>Breaks</literal> should have been used instead.  An
        "earlier than" version clause in <literal>Conflicts</literal>
        prevents <command>dpkg</command> from upgrading or installing the
        package which declares such a conflict until the upgrade or
        removal of the conflicted-with package has been completed, which
        is a strong restriction.
      </para>
    </section>

    <section id="s-virtual">
      <title>Virtual packages - <literal>Provides</literal></title>

      <para>
        As well as the names of actual ("concrete") packages, the package
        relationship fields <literal>Depends</literal>,
        <literal>Recommends</literal>, <literal>Suggests</literal>,
        <literal>Enhances</literal>, <literal>Pre-Depends</literal>,
        <literal>Breaks</literal>, <literal>Conflicts</literal>,
        <literal>Build-Depends</literal>,
        <literal>Build-Depends-Indep</literal>,
        <literal>Build-Depends-Arch</literal>,
        <literal>Build-Conflicts</literal>,
        <literal>Build-Conflicts-Indep</literal> and
        <literal>Build-Conflicts-Arch</literal> may mention "virtual
        packages".
      </para>
      <para>
        A <emphasis>virtual package</emphasis> is one which appears in the
        <literal>Provides</literal> control field of another package.  The
        effect is as if the package(s) which provide a particular virtual
        package name had been listed by name everywhere the virtual
        package name appears.  (See also <xref linkend="s-virtual-pkg"/>)
      </para>
      <para>
        If there are both concrete and virtual packages of the same name,
        then the dependency may be satisfied (or the conflict caused) by
        either the concrete package with the name in question or any other
        concrete package which provides the virtual package with the name
        in question.  This is so that, for example, supposing we have
      </para>
      <programlisting>
Package: foo
Depends: bar</programlisting>
      <para>
        and someone else releases an enhanced version of the
        <literal>bar</literal> package they can say:
      </para>
      <programlisting>
Package: bar-plus
Provides: bar</programlisting>
      <para>
        and the <literal>bar-plus</literal> package will now also satisfy
        the dependency for the <literal>foo</literal> package.
      </para>
      <para>
        If a relationship field has a version number attached, only real
        packages will be considered to see whether the relationship is
        satisfied (or the prohibition violated, for a conflict or
        breakage).  In other words, if a version number is specified, this
        is a request to ignore all <literal>Provides</literal> for that
        package name and consider only real packages.  The package manager
        will assume that a package providing that virtual package is not
        of the "right" version.  A <literal>Provides</literal> field may
        not contain version numbers, and the version number of the
        concrete package which provides a particular virtual package will
        not be considered when considering a dependency on or conflict
        with the virtual package name.
        <footnote>
          <para>
            It is possible that a future release of
            <command>dpkg</command> may add the ability to specify a
            version number for each virtual package it provides.  This
            feature is not yet present, however, and is expected to be
            used only infrequently.
          </para>
        </footnote>
      </para>
      <para>
        To specify which of a set of real packages should be the default
        to satisfy a particular dependency on a virtual package, list the
        real package as an alternative before the virtual one.
      </para>
      <para>
        If the virtual package represents a facility that can only be
        provided by one real package at a time, such as the <systemitem
        role="package">mail-transport-agent</systemitem> virtual package
        that requires installation of a binary that would conflict with
        all other providers of that virtual package (see <xref
        linkend="s-mail-transport-agents"/>), all packages providing that
        virtual package should also declare a conflict with it using
        <literal>Conflicts</literal>.  This will ensure that at most one
        provider of that virtual package is unpacked or installed at a
        time.
      </para>
    </section>

    <section id="s-replaces">
      <title>
        Overwriting files and replacing packages -
        <literal>Replaces</literal>
      </title>

      <para>
        Packages can declare in their control file that they should
        overwrite files in certain other packages, or completely replace
        other packages.  The <literal>Replaces</literal> control field has
        these two distinct purposes.
      </para>

      <section id="s7.6.1">
        <title>Overwriting files in other packages</title>

        <para>
          It is usually an error for a package to contain files which are
          on the system in another package.  However, if the overwriting
          package declares that it <literal>Replaces</literal> the one
          containing the file being overwritten, then
          <command>dpkg</command> will replace the file from the old
          package with that from the new.  The file will no longer be
          listed as "owned" by the old package and will be taken over by
          the new package.  Normally, <literal>Breaks</literal> should be
          used in conjunction with <literal>Replaces</literal>.
          <footnote>
            <para>
              To see why <literal>Breaks</literal> is normally needed in
              addition to <literal>Replaces</literal>, consider the case
              of a file in the package <systemitem
              role="package">foo</systemitem> being taken over by the
              package <systemitem role="package">foo-data</systemitem>.
              <literal>Replaces</literal> will allow <systemitem
              role="package">foo-data</systemitem> to be installed and
              take over that file.  However, without
              <literal>Breaks</literal>, nothing requires <systemitem
              role="package">foo</systemitem> to be upgraded to a newer
              version that knows it does not include that file and instead
              depends on <systemitem role="package">foo-data</systemitem>.
              Nothing would prevent the new <systemitem
              role="package">foo-data</systemitem> package from being
              installed and then removed, removing the file that it took
              over from <systemitem role="package">foo</systemitem>.
              After that operation, the package manager would think the
              system was in a consistent state, but the <systemitem
              role="package">foo</systemitem> package would be missing one
              of its files.
            </para>
          </footnote>
        </para>
        <para>
          For example, if a package <systemitem
          role="package">foo</systemitem> is split into <systemitem
          role="package">foo</systemitem> and <systemitem
          role="package">foo-data</systemitem> starting at version 1.2-3,
          <systemitem role="package">foo-data</systemitem> would have the
          fields
        </para>
        <programlisting>
Replaces: foo (&lt;&lt; 1.2-3)
Breaks: foo (&lt;&lt; 1.2-3)</programlisting>
        <para>
          in its control file.  The new version of the package <systemitem
          role="package">foo</systemitem> would normally have the field
        </para>
        <programlisting>
Depends: foo-data (&gt;= 1.2-3)</programlisting>
        <para>
          (or possibly <literal>Recommends</literal> or even
          <literal>Suggests</literal> if the files moved into <systemitem
          role="package">foo-data</systemitem> are not required for normal
          operation).
        </para>
        <para>
          If a package is completely replaced in this way, so that
          <command>dpkg</command> does not know of any files it still
          contains, it is considered to have "disappeared".  It will be
          marked as not wanted on the system (selected for removal) and
          "Not-Installed".  Any <literal>conffile</literal>s details noted
          for the package will be ignored, as they will have been taken
          over by the overwriting package.  The package's
          <command>postrm</command> script will be run with a special
          argument to allow the package to do any final cleanup required.
          See <xref linkend="s-mscriptsinstact"/>.
          <footnote>
            <para>
              Replaces is a one way relationship.  You have to install the
              replacing package after the replaced package.
            </para>
          </footnote>
        </para>
        <para>
          For this usage of <literal>Replaces</literal>, virtual packages
          (see <xref linkend="s-virtual"/>) are not considered when
          looking at a <literal>Replaces</literal> field.  The packages
          declared as being replaced must be mentioned by their real
          names.
        </para>
        <para>
          This usage of <literal>Replaces</literal> only takes effect when
          both packages are at least partially on the system at once.  It
          is not relevant if the packages conflict unless the conflict has
          been overridden.
        </para>
      </section>

      <section id="s7.6.2">
        <title>Replacing whole packages, forcing their removal</title>

        <para>
          Second, <literal>Replaces</literal> allows the packaging system
          to resolve which package should be removed when there is a
          conflict (see <xref linkend="s-conflicts"/>).  This usage only
          takes effect when the two packages <emphasis>do</emphasis>
          conflict, so that the two usages of this field do not interfere
          with each other.
        </para>
        <para>
          In this situation, the package declared as being replaced can be
          a virtual package, so for example, all mail transport agents
          (MTAs) would have the following fields in their control files:
        </para>
        <programlisting>
Provides: mail-transport-agent
Conflicts: mail-transport-agent
Replaces: mail-transport-agent</programlisting>
        <para>
          ensuring that only one MTA can be unpacked at any one time.  See
          <xref linkend="s-virtual"/> for more information about this
          example.
        </para>
      </section>
    </section>

    <section id="s-sourcebinarydeps">
      <title>
        Relationships between source and binary packages -
        <literal>Build-Depends</literal>,
        <literal>Build-Depends-Indep</literal>,
        <literal>Build-Depends-Arch</literal>,
        <literal>Build-Conflicts</literal>,
        <literal>Build-Conflicts-Indep</literal>,
        <literal>Build-Conflicts-Arch</literal>
      </title>
      <para>
        Source packages that require certain binary packages to be
        installed or absent at the time of building the package can
        declare relationships to those binary packages.
      </para>
      <para>
        This is done using the <literal>Build-Depends</literal>,
        <literal>Build-Depends-Indep</literal>,
        <literal>Build-Depends-Arch</literal>,
        <literal>Build-Conflicts</literal>,
        <literal>Build-Conflicts-Indep</literal> and
        <literal>Build-Conflicts-Arch</literal> control fields.
      </para>
      <para>
        Build-dependencies on "build-essential" binary packages can be
        omitted.  Please see <xref linkend="s-pkg-relations"/> for more
        information.
      </para>
      <para>
        The dependencies and conflicts they define must be satisfied (as
        defined earlier for binary packages) in order to invoke the
        targets in <literal>debian/rules</literal>, as follows:
      </para>
      <variablelist>
        <varlistentry>
          <term><literal>clean</literal></term>
          <listitem>
            <para>
              Only the <literal>Build-Depends</literal> and
              <literal>Build-Conflicts</literal> fields must be satisfied
              when this target is invoked.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>build-arch</literal>, and
            <literal>binary-arch</literal>
          </term>
          <listitem>
            <para>
              The <literal>Build-Depends</literal>,
              <literal>Build-Conflicts</literal>,
              <literal>Build-Depends-Arch</literal>, and
              <literal>Build-Conflicts-Arch</literal> fields must be
              satisfied when these targets are invoked.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>build-indep</literal>, and
            <literal>binary-indep</literal>
          </term>
          <listitem>
            <para>
              The <literal>Build-Depends</literal>,
              <literal>Build-Conflicts</literal>,
              <literal>Build-Depends-Indep</literal>, and
              <literal>Build-Conflicts-Indep</literal> fields must be
              satisfied when these targets are invoked.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>build</literal> and <literal>binary</literal>
          </term>
          <listitem>
            <para>
              The <literal>Build-Depends</literal>,
              <literal>Build-Conflicts</literal>,
              <literal>Build-Depends-Indep</literal>,
              <literal>Build-Conflicts-Indep</literal>,
              <literal>Build-Depends-Arch</literal>, and
              <literal>Build-Conflicts-Arch</literal> fields must be
              satisfied when these targets are invoked.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="s-built-using">
      <title>
        Additional source packages used to build the binary -
        <literal>Built-Using</literal>
      </title>
      <para>
        Some binary packages incorporate parts of other packages when
        built but do not have to depend on those packages.  Examples
        include linking with static libraries or incorporating source code
        from another package during the build.  In this case, the source
        packages of those other packages are a required part of the
        complete source (the binary package is not reproducible without
        them).
      </para>
      <para>
        A <literal>Built-Using</literal> field must list the corresponding
        source package for any such binary package incorporated during the
        build,
        <footnote>
          <para>
            <literal>Build-Depends</literal> in the source package is not
            adequate since it (rightfully) does not document the exact
            version used in the build.
          </para>
        </footnote>
        including an "exactly equal" ("=") version relation on the version
        that was used to build that binary package.
        <footnote>
          <para>
            The archive software might reject packages that refer to
            non-existent sources.
          </para>
        </footnote>
      </para>
      <para>
        A package using the source code from the gcc-4.6-source binary
        package built from the gcc-4.6 source package would have this
        field in its control file:
      </para>
      <programlisting>Built-Using: gcc-4.6 (= 4.6.0-11)</programlisting>
      <para>
        A package including binaries from grub2 and loadlin would have
        this field in its control file:
      </para>
      <programlisting>Built-Using: grub2 (= 1.99-9), loadlin (= 1.6e-1)</programlisting>
    </section>
  </chapter>

  <chapter id="ch-sharedlibs">
    <title>Shared libraries</title>

    <para>
      Packages containing shared libraries must be constructed with a
      little care to make sure that the shared library is always
      available.  This is especially important for packages whose shared
      libraries are vitally important, such as the C library (currently
      <literal>libc6</literal>).
    </para>
    <para>
      This section deals only with public shared libraries: shared
      libraries that are placed in directories searched by the dynamic
      linker by default or which are intended to be linked against
      normally and possibly used by other, independent packages.  Shared
      libraries that are internal to a particular package or that are only
      loaded as dynamic modules are not covered by this section and are
      not subject to its requirements.
    </para>
    <para>
      A shared library is identified by the <literal>SONAME</literal>
      attribute stored in its dynamic section.  When a binary is linked
      against a shared library, the <literal>SONAME</literal> of the
      shared library is recorded in the binary's <literal>NEEDED</literal>
      section so that the dynamic linker knows that library must be loaded
      at runtime.  The shared library file's full name (which usually
      contains additional version information not needed in the
      <literal>SONAME</literal>) is therefore normally not referenced
      directly.  Instead, the shared library is loaded by its
      <literal>SONAME</literal>, which exists on the file system as a
      symlink pointing to the full name of the shared library.  This
      symlink must be provided by the package.  <xref
      linkend="s-sharedlibs-runtime"/> describes how to do this.
      <footnote>
        <para>
          This is a convention of shared library versioning, but not a
          requirement.  Some libraries use the <literal>SONAME</literal>
          as the full library file name instead and therefore do not need
          a symlink.  Most, however, encode additional information about
          backwards-compatible revisions as a minor version number in the
          file name.  The <literal>SONAME</literal> itself only changes
          when binaries linked with the earlier version of the shared
          library may no longer work, but the filename may change with
          each release of the library.  See <xref
          linkend="s-sharedlibs-runtime"/> for more information.
        </para>
      </footnote>
    </para>
    <para>
      When linking a binary or another shared library against a shared
      library, the <literal>SONAME</literal> for that shared library is
      not yet known.  Instead, the shared library is found by looking for
      a file matching the library name with <literal>.so</literal>
      appended.  This file exists on the file system as a symlink pointing
      to the shared library.
    </para>
    <para>
      Shared libraries are normally split into several binary packages.
      The <literal>SONAME</literal> symlink is installed by the runtime
      shared library package, and the bare <literal>.so</literal> symlink
      is installed in the development package since it's only used when
      linking binaries or shared libraries.  However, there are some
      exceptions for unusual shared libraries or for shared libraries that
      are also loaded as dynamic modules by other programs.
    </para>
    <para>
      This section is primarily concerned with how the separation of
      shared libraries into multiple packages should be done and how
      dependencies on and between shared library binary packages are
      managed in Debian.  <xref linkend="s-libraries"/> should be read in
      conjunction with this section and contains additional rules for the
      files contained in the shared library packages.
    </para>

    <section id="s-sharedlibs-runtime">
      <title>Run-time shared libraries</title>

      <para>
        The run-time shared library must be placed in a package whose name
        changes whenever the <literal>SONAME</literal> of the shared
        library changes.  This allows several versions of the shared
        library to be installed at the same time, allowing installation of
        the new version of the shared library without immediately breaking
        binaries that depend on the old version.  Normally, the run-time
        shared library and its <literal>SONAME</literal> symlink should be
        placed in a package named <systemitem
        role="package"><replaceable>libraryname</replaceable><replaceable>soversion</replaceable></systemitem>,
        where <replaceable>soversion</replaceable> is the version number
        in the <literal>SONAME</literal> of the shared library.
        Alternatively, if it would be confusing to directly append
        <replaceable>soversion</replaceable> to
        <replaceable>libraryname</replaceable> (if, for example,
        <replaceable>libraryname</replaceable> itself ends in a number),
        you should use <systemitem
        role="package"><replaceable>libraryname</replaceable>-<replaceable>soversion</replaceable></systemitem>
        instead.
      </para>
      <para>
        To determine the <replaceable>soversion</replaceable>, look at the
        <literal>SONAME</literal> of the library, stored in the ELF
        <literal>SONAME</literal> attribute.  It is usually of the form
        <literal><replaceable>name</replaceable>.so.<replaceable>major-version</replaceable></literal>
        (for example, <literal>libz.so.1</literal>).  The version part is
        the part which comes after <literal>.so.</literal>, so in that
        example it is <literal>1</literal>.  The soname may instead be of
        the form
        <literal><replaceable>name</replaceable>-<replaceable>major-version</replaceable>.so</literal>,
        such as <literal>libdb-5.1.so</literal>, in which case the name
        would be <literal>libdb</literal> and the version would be
        <literal>5.1</literal>.
      </para>
      <para>
        If you have several shared libraries built from the same source
        tree, you may lump them all together into a single shared library
        package provided that all of their <literal>SONAME</literal>s will
        always change together.  Be aware that this is not normally the
        case, and if the <literal>SONAME</literal>s do not change
        together, upgrading such a merged shared library package will be
        unnecessarily difficult because of file conflicts with the old
        version of the package.  When in doubt, always split shared
        library packages so that each binary package installs a single
        shared library.
      </para>
      <para>
        Every time the shared library ABI changes in a way that may break
        binaries linked against older versions of the shared library, the
        <literal>SONAME</literal> of the library and the corresponding
        name for the binary package containing the runtime shared library
        should change.  Normally, this means the <literal>SONAME</literal>
        should change any time an interface is removed from the shared
        library or the signature of an interface (the number of parameters
        or the types of parameters that it takes, for example) is changed.
        This practice is vital to allowing clean upgrades from older
        versions of the package and clean transitions between the old ABI
        and new ABI without having to upgrade every affected package
        simultaneously.
      </para>
      <para>
        The <literal>SONAME</literal> and binary package name need not,
        and indeed normally should not, change if new interfaces are added
        but none are removed or changed, since this will not break
        binaries linked against the old shared library.  Correct
        versioning of dependencies on the newer shared library by binaries
        that use the new interfaces is handled via the <link
        linkend="s-sharedlibs-depends"><literal>symbols</literal> or
        <literal>shlibs</literal> system</link>.
      </para>
      <para>
        The package should install the shared libraries under their normal
        names.  For example, the <systemitem
        role="package">libgdbm3</systemitem> package should install
        <filename>libgdbm.so.3.0.0</filename> as
        <filename>/usr/lib/libgdbm.so.3.0.0</filename>.  The files should
        not be renamed or re-linked by any <command>prerm</command> or
        <command>postrm</command> scripts; <command>dpkg</command> will
        take care of renaming things safely without affecting running
        programs, and attempts to interfere with this are likely to lead
        to problems.
      </para>
      <para>
        Shared libraries should not be installed executable, since the
        dynamic linker does not require this and trying to execute a
        shared library usually results in a core dump.
      </para>
      <para>
        The run-time library package should include the symbolic link for
        the <literal>SONAME</literal> that <command>ldconfig</command>
        would create for the shared libraries.  For example, the
        <systemitem role="package">libgdbm3</systemitem> package should
        include a symbolic link from
        <filename>/usr/lib/libgdbm.so.3</filename> to
        <filename>libgdbm.so.3.0.0</filename>.  This is needed so that the
        dynamic linker (for example <command>ld.so</command> or
        <command>ld-linux.so.*</command>) can find the library between the
        time that <command>dpkg</command> installs it and the time that
        <command>ldconfig</command> is run in the
        <command>postinst</command> script.
        <footnote>
          <para>
            The package management system requires the library to be
            placed before the symbolic link pointing to it in the
            <filename>.deb</filename> file.  This is so that when
            <command>dpkg</command> comes to install the symlink
            (overwriting the previous symlink pointing at an older version
            of the library), the new shared library is already in place.
            In the past, this was achieved by creating the library in the
            temporary packaging directory before creating the symlink.
            Unfortunately, this was not always effective, since the
            building of the tar file in the <filename>.deb</filename>
            depended on the behavior of the underlying file system.  Some
            file systems (such as reiserfs) reorder the files so that the
            order of creation is forgotten.  Since version 1.7.0,
            <command>dpkg</command> reorders the files itself as necessary
            when building a package.  Thus it is no longer important to
            concern oneself with the order of file creation.
          </para>
        </footnote>
      </para>

      <section id="s-ldconfig">
        <title><literal>ldconfig</literal></title>

        <para>
          Any package installing shared libraries in one of the default
          library directories of the dynamic linker (which are currently
          <filename>/usr/lib</filename> and <filename>/lib</filename>) or
          a directory that is listed in
          <filename>/etc/ld.so.conf</filename>
          <footnote>
            <para>
              These are currently <filename>/usr/local/lib</filename> plus
              directories under <filename>/lib</filename> and
              <filename>/usr/lib</filename> matching the multiarch triplet
              for the system architecture.
            </para>
          </footnote>
          must use <command>ldconfig</command> to update the shared
          library system.
        </para>

        <para>
          Any such package must have the line
          <literal>activate-noawait ldconfig</literal> in its
          <literal>triggers</literal> control file
          (i.e. <filename>DEBIAN/triggers</filename>
        </para>
      </section>
    </section>

    <section id="s-sharedlibs-support-files">
      <title>Shared library support files</title>

      <para>
        If your package contains files whose names do not change with each
        change in the library shared object version, you must not put them
        in the shared library package.  Otherwise, several versions of the
        shared library cannot be installed at the same time without
        filename clashes, making upgrades and transitions unnecessarily
        difficult.
      </para>
      <para>
        It is recommended that supporting files and run-time support
        programs that do not need to be invoked manually by users, but are
        nevertheless required for the package to function, be placed (if
        they are binary) in a subdirectory of
        <filename>/usr/lib</filename>, preferably under
        <filename>/usr/lib/</filename><replaceable>package-name</replaceable>.
        If the program or file is architecture independent, the
        recommendation is for it to be placed in a subdirectory of
        <filename>/usr/share</filename> instead, preferably under
        <filename>/usr/share/</filename><replaceable>package-name</replaceable>.
        Following the <replaceable>package-name</replaceable> naming
        convention ensures that the file names change when the shared
        object version changes.
      </para>
      <para>
        Run-time support programs that use the shared library but are not
        required for the library to function or files used by the shared
        library that can be used by any version of the shared library
        package should instead be put in a separate package.  This package
        might typically be named <systemitem
        role="package"><replaceable>libraryname</replaceable>-tools</systemitem>;
        note the absence of the <replaceable>soversion</replaceable> in
        the package name.
      </para>
      <para>
        Files and support programs only useful when compiling software
        against the library should be included in the development package
        for the library.
        <footnote>
          <para>
            For example, a
            <filename><replaceable>package-name</replaceable>-config</filename>
            script or <systemitem role="package">pkg-config</systemitem>
            configuration files.
          </para>
        </footnote>
      </para>
    </section>

    <section id="s-sharedlibs-static">
      <title>Static libraries</title>

      <para>
        The static library
        (<filename><replaceable>libraryname.a</replaceable></filename>) is
        usually provided in addition to the shared version.  It is placed
        into the development package (see below).
      </para>
      <para>
        In some cases, it is acceptable for a library to be available in
        static form only; these cases include:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            libraries for languages whose shared library support is
            immature or unstable
          </para>
        </listitem>
        <listitem>
          <para>
            libraries whose interfaces are in flux or under development
            (commonly the case when the library's major version number is
            zero, or where the ABI breaks across patchlevels)
          </para>
        </listitem>
        <listitem>
          <para>
            libraries which are explicitly intended to be available only
            in static form by their upstream author(s)
          </para>
        </listitem>
      </itemizedlist>
    </section>

    <section id="s-sharedlibs-dev">
      <title>Development files</title>

      <para>
        If there are development files associated with a shared library,
        the source package needs to generate a binary development package
        named <systemitem
        role="package"><replaceable>libraryname</replaceable>-dev</systemitem>,
        or if you need to support multiple development versions at a time,
        <systemitem
        role="package"><replaceable>libraryname</replaceable><replaceable>apiversion</replaceable>-dev</systemitem>.
        Installing the development package must result in installation of
        all the development files necessary for compiling programs against
        that shared library.
        <footnote>
          <para>
            This wording allows the development files to be split into
            several packages, such as a separate architecture-independent
            <systemitem
            role="package"><replaceable>libraryname</replaceable>-headers</systemitem>,
            provided that the development package depends on all the
            required additional packages.
          </para>
        </footnote>
      </para>
      <para>
        In case several development versions of a library exist, you may
        need to use <command>dpkg</command>'s Conflicts mechanism (see
        <xref linkend="s-conflicts"/>) to ensure that the user only
        installs one development version at a time (as different
        development versions are likely to have the same header files in
        them, which would cause a filename clash if both were unpacked).
      </para>
      <para>
        The development package should contain a symlink for the
        associated shared library without a version number.  For example,
        the <systemitem role="package">libgdbm-dev</systemitem> package
        should include a symlink from
        <filename>/usr/lib/libgdbm.so</filename> to
        <filename>libgdbm.so.3.0.0</filename>.  This symlink is needed by
        the linker (<command>ld</command>) when compiling packages, as it
        will only look for <filename>libgdbm.so</filename> when compiling
        dynamically.
      </para>
      <para>
        If the package provides Ada Library Information
        (<filename>*.ali</filename>) files for use with GNAT, these files
        must be installed read-only (mode 0444) so that GNAT will not
        attempt to recompile them.  This overrides the normal file mode
        requirements given in <xref linkend="s-permissions-owners"/>.
      </para>
    </section>

    <section id="s-sharedlibs-intradeps">
      <title>Dependencies between the packages of the same library</title>

      <para>
        Typically the development version should have an exact version
        dependency on the runtime library, to make sure that compilation
        and linking happens correctly.  The
        <literal>${binary:Version}</literal> substitution variable can be
        useful for this purpose.
        <footnote>
          <para>
            Previously, <literal>${Source-Version}</literal> was used, but
            its name was confusing and it has been deprecated since dpkg
            1.13.19.
          </para>
        </footnote>
      </para>
    </section>

    <section id="s-sharedlibs-depends">
      <title>Dependencies between the library and other packages</title>

      <para>
        If a package contains a binary or library which links to a shared
        library, we must ensure that, when the package is installed on the
        system, all of the libraries needed are also installed.  These
        dependencies must be added to the binary package when it is built,
        since they may change based on which version of a shared library
        the binary or library was linked with even if there are no changes
        to the source of the binary (for example, symbol versions change,
        macros become functions or vice versa, or the binary package may
        determine at compile-time whether new library interfaces are
        available and can be called).  To allow these dependencies to be
        constructed, shared libraries must provide either a
        <filename>symbols</filename> file or a <filename>shlibs</filename>
        file.  These provide information on the package dependencies
        required to ensure the presence of interfaces provided by this
        library.  Any package with binaries or libraries linking to a
        shared library must use these files to determine the required
        dependencies when it is built.  Other packages which use a shared
        library (for example using <literal>dlopen()</literal>) should
        compute appropriate dependencies using these files at build time
        as well.
      </para>
      <para>
        The two mechanisms differ in the degree of detail that they
        provide.  A <filename>symbols</filename> file documents, for each
        symbol exported by a library, the minimal version of the package
        any binary using this symbol will need.  This is typically the
        version of the package in which the symbol was introduced.  This
        information permits detailed analysis of the symbols used by a
        particular package and construction of an accurate dependency, but
        it requires the package maintainer to track more information about
        the shared library.
      </para>
      <para>
        A <filename>shlibs</filename> file, in contrast, only documents
        the last time the library ABI changed in any way.  It only
        provides information about the library as a whole, not individual
        symbols.  When a package is built using a shared library with only
        a <filename>shlibs</filename> file, the generated dependency will
        require a version of the shared library equal to or newer than the
        version of the last ABI change.  This generates unnecessarily
        restrictive dependencies compared to <filename>symbols</filename>
        files if none of the symbols used by the package have changed.
        This, in turn, may make upgrades needlessly complex and
        unnecessarily restrict use of the package on systems with older
        versions of the shared libraries.
      </para>
      <para>
        <filename>shlibs</filename> files also only support a limited
        range of library SONAMEs, making it difficult to use
        <filename>shlibs</filename> files in some unusual corner
        cases.
        <footnote>
          <para>
            A <filename>shlibs</filename> file represents an SONAME as a
            library name and version number, such as <literal>libfoo
            VERSION</literal>, instead of recording the actual SONAME.  If
            the SONAME doesn't match one of the two expected formats
            (<literal>libfoo-VERSION.so</literal> or
            <literal>libfoo.so.VERSION</literal>), it cannot be
            represented.
          </para>
        </footnote>
      </para>
      <para>
        <filename>symbols</filename> files are therefore recommended for
        most shared library packages since they provide more accurate
        dependencies.  For most C libraries, the additional detail
        required by <filename>symbols</filename> files is not too
        difficult to maintain.  However, maintaining exhaustive symbols
        information for a C++ library can be quite onerous, so
        <filename>shlibs</filename> files may be more appropriate for most
        C++ libraries.  Libraries with a corresponding udeb must also
        provide a <filename>shlibs</filename> file, since the udeb
        infrastructure does not use <filename>symbols</filename> files.
      </para>

      <section id="s-dpkg-shlibdeps">
        <title>Generating dependencies on shared libraries</title>

        <para>
          When a package that contains any shared libraries or compiled
          binaries is built, it must run <command>dpkg-shlibdeps</command>
          on each shared library and compiled binary to determine the
          libraries used and hence the dependencies needed by the
          package.<footnote><para> <command>dpkg-shlibdeps</command> will
          use a program like <command>objdump</command> or
          <command>readelf</command> to find the libraries and the symbols
          in those libraries directly needed by the binaries or shared
          libraries in the package.  </para> </footnote> To do this, put a
          call to <command>dpkg-shlibdeps</command> into your
          <filename>debian/rules</filename> file in the source package.
          List all of the compiled binaries, libraries, or loadable
          modules in your package.
          <footnote>
            <para>
              The easiest way to call <command>dpkg-shlibdeps</command>
              correctly is to use a package helper framework such as
              <systemitem role="package">debhelper</systemitem>.  If you
              are using <systemitem role="package">debhelper</systemitem>,
              the <command>dh_shlibdeps</command> program will do this
              work for you.  It will also correctly handle multi-binary
              packages.
            </para>
          </footnote>
          <command>dpkg-shlibdeps</command> will use the
          <filename>symbols</filename> or <filename>shlibs</filename>
          files installed by the shared libraries to generate dependency
          information.  The package must then provide a substitution
          variable into which the discovered dependency information can be
          placed.
        </para>
        <para>
          If you are creating a udeb for use in the Debian Installer, you
          will need to specify that <command>dpkg-shlibdeps</command>
          should use the dependency line of type <literal>udeb</literal>
          by adding the <literal>-tudeb</literal> option.
          <footnote>
            <para>
              <command>dh_shlibdeps</command> from the
              <literal>debhelper</literal> suite will automatically add
              this option if it knows it is processing a udeb.
            </para>
          </footnote>
          If there is no dependency line of type <literal>udeb</literal>
          in the <filename>shlibs</filename> file,
          <command>dpkg-shlibdeps</command> will fall back to the regular
          dependency line.
        </para>
        <para>
          <command>dpkg-shlibdeps</command> puts the dependency
          information into the <filename>debian/substvars</filename> file
          by default, which is then used by
          <command>dpkg-gencontrol</command>.  You will need to place a
          <literal>${shlibs:Depends}</literal> variable in the
          <literal>Depends</literal> field in the control file of every
          binary package built by this source package that contains
          compiled binaries, libraries, or loadable modules.  If you have
          multiple binary packages, you will need to call
          <command>dpkg-shlibdeps</command> on each one which contains
          compiled libraries or binaries.  For example, you could use the
          <literal>-T</literal> option to the <literal>dpkg</literal>
          utilities to specify a different <filename>substvars</filename>
          file for each binary package.
          <footnote>
            <para>
              Again, <command>dh_shlibdeps</command> and
              <command>dh_gencontrol</command> will handle everything
              except the addition of the variable to the control file for
              you if you're using <systemitem
              role="package">debhelper</systemitem>, including generating
              separate <filename>substvars</filename> files for each
              binary package and calling
              <command>dpkg-gencontrol</command> with the appropriate
              flags.
            </para>
          </footnote>
        </para>
        <para>
          For more details on <command>dpkg-shlibdeps</command>, see
          <citerefentry><refentrytitle>dpkg-shlibdeps</refentrytitle><manvolnum>1</manvolnum></citerefentry>.
        </para>
        <para>
          We say that a binary <literal>foo</literal>
          <emphasis>directly</emphasis> uses a library
          <literal>libbar</literal> if it is explicitly linked with that
          library (that is, the library is listed in the ELF
          <literal>NEEDED</literal> attribute, caused by adding
          <literal>-lbar</literal> to the link line when the binary is
          created).  Other libraries that are needed by
          <literal>libbar</literal> are linked
          <emphasis>indirectly</emphasis> to <literal>foo</literal>, and
          the dynamic linker will load them automatically when it loads
          <literal>libbar</literal>.  A package should depend on the
          libraries it directly uses, but not the libraries it only uses
          indirectly.  The dependencies for the libraries used directly
          will automatically pull in the indirectly-used libraries.
          <command>dpkg-shlibdeps</command> will handle this logic
          automatically, but package maintainers need to be aware of this
          distinction between directly and indirectly using a library if
          they have to override its results for some reason.
          <footnote>
            <para>
              A good example of where this helps is the following.  We
              could update <literal>libimlib</literal> with a new version
              that supports a new revision of a graphics format called dgf
              (but retaining the same major version number) and depends on
              a new library package <systemitem
              role="package">libdgf4</systemitem> instead of the older
              <systemitem role="package">libdgf3</systemitem>.  If we used
              <command>ldd</command> to add dependencies for every library
              directly or indirectly linked with a binary, every package
              that uses <literal>libimlib</literal> would need to be
              recompiled so it would also depend on <systemitem
              role="package">libdgf4</systemitem> in order to retire the
              older <systemitem role="package">libdgf3</systemitem>
              package.  Since dependencies are only added based on ELF
              <literal>NEEDED</literal> attribute, packages using
              <literal>libimlib</literal> can rely on
              <literal>libimlib</literal> itself having the dependency on
              an appropriate version of <literal>libdgf</literal> and do
              not need rebuilding.
            </para>
          </footnote>
        </para>
      </section>

      <section id="s-sharedlibs-updates">
        <title>Shared library ABI changes</title>

        <para>
          Maintaining a shared library package using either
          <filename>symbols</filename> or <filename>shlibs</filename>
          files requires being aware of the exposed ABI of the shared
          library and any changes to it.  Both
          <filename>symbols</filename> and <filename>shlibs</filename>
          files record every change to the ABI of the shared library;
          <filename>symbols</filename> files do so per public symbol,
          whereas <filename>shlibs</filename> files record only the last
          change for the entire library.
        </para>
        <para>
          There are two types of ABI changes: ones that are
          backward-compatible and ones that are not.  An ABI change is
          backward-compatible if any reasonable program or library that
          was linked with the previous version of the shared library will
          still work correctly with the new version of the shared
          library.
          <footnote>
            <para>
              An example of an "unreasonable" program is one that uses
              library interfaces that are documented as internal and
              unsupported.  If the only programs or libraries affected by
              a change are "unreasonable" ones, other techniques, such as
              declaring <literal>Breaks</literal> relationships with
              affected packages or treating their usage of the library as
              bugs in those packages, may be appropriate instead of
              changing the SONAME.  However, the default approach is to
              change the SONAME for any change to the ABI that could break
              a program.
            </para>
          </footnote>
          Adding new symbols to the shared library is a
          backward-compatible change.  Removing symbols from the shared
          library is not.  Changing the behavior of a symbol may or may
          not be backward-compatible depending on the change; for example,
          changing a function to accept a new enum constant not previously
          used by the library is generally backward-compatible, but
          changing the members of a struct that is passed into library
          functions is generally not unless the library takes special
          precautions to accept old versions of the data structure.
        </para>
        <para>
          ABI changes that are not backward-compatible normally require
          changing the <literal>SONAME</literal> of the library and
          therefore the shared library package name, which forces
          rebuilding all packages using that shared library to update
          their dependencies and allow them to use the new version of the
          shared library.  For more information, see <xref
          linkend="s-sharedlibs-runtime"/>.  The remainder of this section
          will deal with backward-compatible changes.
        </para>
        <para>
          Backward-compatible changes require either updating or recording
          the <replaceable>minimal-version</replaceable> for that symbol
          in <filename>symbols</filename> files or updating the version in
          the <replaceable>dependencies</replaceable> in
          <filename>shlibs</filename> files.  For more information on how
          to do this in the two formats, see <xref linkend="s-symbols"/>
          and <xref linkend="s-shlibs"/>.  Below are general rules that
          apply to both files.
        </para>
        <para>
          The easy case is when a public symbol is added.  Simply add the
          version at which the symbol was introduced (for
          <filename>symbols</filename> files) or update the dependency
          version (for <filename>shlibs</filename>) files.  But special
          care should be taken to update dependency versions when the
          behavior of a public symbol changes.  This is easy to neglect,
          since there is no automated method of determining such changes,
          but failing to update versions in this case may result in binary
          packages with too-weak dependencies that will fail at runtime,
          possibly in ways that can cause security vulnerabilities.  If
          the package maintainer believes that a symbol behavior change
          may have occurred but isn't sure, it's safer to update the
          version rather than leave it unmodified.  This may result in
          unnecessarily strict dependencies, but it ensures that packages
          whose dependencies are satisfied will work properly.
        </para>
        <para>
          A common example of when a change to the dependency version is
          required is a function that takes an enum or struct argument
          that controls what the function does.  For example:
        </para>
        <programlisting>
enum library_op { OP_FOO, OP_BAR };
int library_do_operation(enum library_op);</programlisting>
        <para>
          If a new operation, <literal>OP_BAZ</literal>, is added, the
          <replaceable>minimal-version</replaceable> of
          <literal>library_do_operation</literal> (for
          <filename>symbols</filename> files) or the version in the
          dependency for the shared library (for
          <filename>shlibs</filename> files) must be increased to the
          version at which <literal>OP_BAZ</literal> was introduced.
          Otherwise, a binary built against the new version of the library
          (having detected at compile-time that the library supports
          <literal>OP_BAZ</literal>) may be installed with a shared
          library that doesn't support <literal>OP_BAZ</literal> and will
          fail at runtime when it tries to pass <literal>OP_BAZ</literal>
          into this function.
        </para>
        <para>
          Dependency versions in either <filename>symbols</filename> or
          <filename>shlibs</filename> files normally should not contain
          the Debian revision of the package, since the library behavior
          is normally fixed for a particular upstream version and any
          Debian packaging of that upstream version will have the same
          behavior.  In the rare case that the library behavior was
          changed in a particular Debian revision, appending
          <literal>~</literal> to the end of the version that includes the
          Debian revision is recommended, since this allows backports of
          the shared library package using the normal backport versioning
          convention to satisfy the dependency.
        </para>
      </section>

      <section id="s-sharedlibs-symbols">
        <title>The <literal>symbols</literal> system</title>

        <para>
          In the following sections, we will first describe where the
          various <filename>symbols</filename> files are to be found, then
          the <filename>symbols</filename> file format, and finally how to
          create <filename>symbols</filename> files if your package
          contains a shared library.
        </para>

        <section id="s-symbols-paths">
          <title>
            The <filename>symbols</filename> files present on the system
          </title>

          <para>
            <filename>symbols</filename> files for a shared library are
            normally provided by the shared library package as a control
            file, but there are several override paths that are checked
            first in case that information is wrong or missing.  The
            following list gives them in the order in which they are read
            by <command>dpkg-shlibdeps</command> The first one that
            contains the required information is used.
          </para>
          <variablelist>
            <varlistentry>
              <term>
                <filename>debian/*/DEBIAN/symbols</filename>
              </term>
              <listitem>
                <para>
                  During the package build, if the package itself contains
                  shared libraries with <filename>symbols</filename>
                  files, they will be generated in these staging
                  directories by <command>dpkg-gensymbols</command> (see
                  <xref linkend="s-providing-symbols"/>).
                  <filename>symbols</filename> files found in the build
                  tree take precedence over <filename>symbols</filename>
                  files from other binary packages.
                </para>
                <para>
                  These files must exist before
                  <command>dpkg-shlibdeps</command> is run or the
                  dependencies of binaries and libraries from a source
                  package on other libraries from that same source package
                  will not be correct.  In practice, this means that
                  <command>dpkg-gensymbols</command> must be run before
                  <command>dpkg-shlibdeps</command> during the package
                  build.
                  <footnote>
                    <para>
                      An example may clarify.  Suppose the source package
                      <literal>foo</literal> generates two binary
                      packages, <literal>libfoo2</literal> and
                      <literal>foo-runtime</literal>.  When building the
                      binary packages, the contents of the packages are
                      staged in the directories
                      <filename>debian/libfoo2</filename> and
                      <filename>debian/foo-runtime</filename>
                      respectively.  (<filename>debian/tmp</filename>
                      could be used instead of one of these.) Since
                      <literal>libfoo2</literal> provides the
                      <literal>libfoo</literal> shared library, it will
                      contain a <literal>symbols</literal> file, which
                      will be installed in
                      <filename>debian/libfoo2/DEBIAN/symbols</filename>,
                      eventually to be included as a control file in that
                      package.  When <command>dpkg-shlibdeps</command> is
                      run on the executable
                      <filename>debian/foo-runtime/usr/bin/foo-prog</filename>,
                      it will examine the
                      <filename>debian/libfoo2/DEBIAN/symbols</filename>
                      file to determine whether
                      <literal>foo-prog</literal>'s library dependencies
                      are satisfied by any of the libraries provided by
                      <literal>libfoo2</literal>.  Since those binaries
                      were linked against the just-built shared library as
                      part of the build process, the
                      <filename>symbols</filename> file for the
                      newly-built <literal>libfoo2</literal> must take
                      precedence over a <filename>symbols</filename> file
                      for any other <literal>libfoo2</literal> package
                      already installed on the system.
                    </para>
                  </footnote>
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <filename>/etc/dpkg/symbols/<replaceable>package</replaceable>.symbols.<replaceable>arch</replaceable></filename>
                and
                <filename>/etc/dpkg/symbols/<replaceable>package</replaceable>.symbols</filename>
              </term>
              <listitem>
                <para>
                  Per-system overrides of shared library dependencies.
                  These files normally do not exist.  They are maintained
                  by the local system administrator and must not be
                  created by any Debian package.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <filename>symbols</filename> control files for packages
                installed on the system
              </term>
              <listitem>
                <para>
                  The <filename>symbols</filename> control files for all
                  the packages currently installed on the system are
                  searched last.  This will be the most common source of
                  shared library dependency information.  These files can
                  be read with <literal>dpkg-query --control-show
                  <replaceable>package</replaceable> symbols</literal>.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
          <para>
            Be aware that if a <filename>debian/shlibs.local</filename>
            exists in the source package, it will override any
            <filename>symbols</filename> files.  This is the only case
            where a <filename>shlibs</filename> is used despite
            <filename>symbols</filename> files being present.  See <xref
            linkend="s-shlibs-paths"/> and <xref
            linkend="s-sharedlibs-shlibdeps"/> for more information.
          </para>
        </section>

        <section id="s-symbols">
          <title>The <filename>symbols</filename> File Format</title>

          <para>
            The following documents the format of the
            <filename>symbols</filename> control file as included in
            binary packages.  These files are built from template
            <filename>symbols</filename> files in the source package by
            <command>dpkg-gensymbols</command>.  The template files
            support a richer syntax that allows
            <command>dpkg-gensymbols</command> to do some of the tedious
            work involved in maintaining <filename>symbols</filename>
            files, such as handling C++ symbols or optional symbols that
            may not exist on particular architectures.  When writing
            <filename>symbols</filename> files for a shared library
            package, refer to
            <citerefentry><refentrytitle>dpkg-gensymbols</refentrytitle><manvolnum>1</manvolnum></citerefentry>
            for the richer syntax.
          </para>
          <para>
            A <filename>symbols</filename> may contain one or more
            entries, one for each shared library contained in the package
            corresponding to that <filename>symbols</filename>.  Each
            entry has the following format:
          </para>
          <programlisting>
<replaceable>library-soname</replaceable> <replaceable>main-dependency-template</replaceable>
 [| <replaceable>alternative-dependency-template</replaceable>]
 [...]
 [* <replaceable>field-name</replaceable>: <replaceable>field-value</replaceable>]
 [...]
 <replaceable>symbol</replaceable> <replaceable>minimal-version</replaceable>[ <replaceable>id-of-dependency-template</replaceable> ]</programlisting>
          <para>
            To explain this format, we'll use the
            <literal>zlib1g</literal> package as an example, which (at the
            time of writing) installs the shared library
            <filename>/usr/lib/libz.so.1.2.3.4</filename>.  Mandatory
            lines will be described first, followed by optional lines.
          </para>
          <para>
            <replaceable>library-soname</replaceable> must contain exactly
            the value of the ELF <literal>SONAME</literal> attribute of
            the shared library.  In our example, this is
            <literal>libz.so.1</literal>.
            <footnote>
              <para>
                This can be determined by using the command
              </para>
              <screen>readelf -d /usr/lib/libz.so.1.2.3.4 | grep SONAME</screen>
            </footnote>
          </para>
          <para>
            <replaceable>main-dependency-template</replaceable> has the
            same syntax as a dependency field in a binary package control
            file, except that the string <literal>#MINVER#</literal> is
            replaced by a version restriction like <literal>(&gt;=
            <replaceable>version</replaceable>)</literal> or by nothing if
            an unversioned dependency is deemed sufficient.  The version
            restriction will be based on which symbols from the shared
            library are referenced and the version at which they were
            introduced (see below).  In nearly all cases,
            <replaceable>main-dependency-template</replaceable> will be
            <literal><replaceable>package</replaceable>
            #MINVER#</literal>, where <replaceable>package</replaceable>
            is the name of the binary package containing the shared
            library.  This adds a simple, possibly-versioned dependency on
            the shared library package.  In some rare cases, such as when
            multiple packages provide the same shared library ABI, the
            dependency template may need to be more complex.
          </para>
          <para>
            In our example, the first line of the
            <literal>zlib1g</literal> <filename>symbols</filename> file
            would be:
          </para>
          <programlisting>libz.so.1 zlib1g #MINVER#</programlisting>
          <para>
            Each public symbol exported by the shared library must have a
            corresponding symbol line, indented by one space.
            <replaceable>symbol</replaceable> is the exported symbol
            (which, for C++, means the mangled symbol) followed by
            <literal>@</literal> and the symbol version, or the string
            <literal>Base</literal> if there is no symbol version.
            <replaceable>minimal-version</replaceable> is the most recent
            version of the shared library that changed the behavior of
            that symbol, whether by adding it, changing its function
            signature (the parameters, their types, or the return type),
            or changing its behavior in a way that is visible to a caller.
            <replaceable>id-of-dependency-template</replaceable> is an
            optional field that references an
            <replaceable>alternative-dependency-template</replaceable>;
            see below for a full description.
          </para>
          <para>
            For example, <literal>libz.so.1</literal> contains the symbols
            <literal>compress</literal> and
            <literal>compressBound</literal>.  <literal>compress</literal>
            has no symbol version and last changed its behavior in
            upstream version <literal>1:1.1.4</literal>.
            <literal>compressBound</literal> has the symbol version
            <literal>ZLIB_1.2.0</literal>, was introduced in upstream
            version <literal>1:1.2.0</literal>, and has not changed its
            behavior.  Its <filename>symbols</filename> file therefore
            contains the lines:
          </para>
          <programlisting>
compress@Base 1:1.1.4
compressBound@ZLIB_1.2.0 1:1.2.0</programlisting>
          <para>
            Packages using only <literal>compress</literal> would then get
            a dependency on <literal>zlib1g (&gt;= 1:1.1.4)</literal>, but
            packages using <literal>compressBound</literal> would get a
            dependency on <literal>zlib1g (&gt;= 1:1.2.0)</literal>.
          </para>
          <para>
            One or more
            <replaceable>alternative-dependency-template</replaceable>
            lines may be provided.  These are used in cases where some
            symbols in the shared library should use one dependency
            template while others should use a different template.  The
            alternative dependency templates are used only if a symbol
            line contains the
            <replaceable>id-of-dependency-template</replaceable> field.
            The first alternative dependency template is numbered 1, the
            second 2, and so forth.
            <footnote>
              <para>
                An example of where this may be needed is with a library
                that implements the libGL interface.  All GL
                implementations provide the same set of base interfaces,
                and then may provide some additional interfaces only used
                by programs that require that specific GL implementation.
                So, for example, libgl1-mesa-glx may use the following
                <filename>symbols</filename> file:
              </para>
              <programlisting>
libGL.so.1 libgl1 | libgl1-mesa-glx #MINVER#
 publicGlSymbol@Base 6.3-1 [...] implementationSpecificSymbol@Base 6.5.2-7 1
 [...]</programlisting>
              <para>
                Binaries or shared libraries using only
                <literal>publicGlSymbol</literal> would depend only on
                <literal>libgl1</literal> (which may be provided by
                multiple packages), but ones using
                <literal>implementationSpecificSymbol</literal> would get
                a dependency on <literal>libgl1-mesa-glx (&gt;=
                6.5.2-7)</literal>
              </para>
            </footnote>
          </para>
          <para>
            Finally, the entry for the library may contain one or more
            metadata fields.  Currently, the only supported
            <replaceable>field-name</replaceable> is
            <literal>Build-Depends-Package</literal>, whose value lists
            the <link linkend="s-sharedlibs-dev">library development
            package</link> on which packages using this shared library
            declare a build dependency.  If this field is present,
            <command>dpkg-shlibdeps</command> uses it to ensure that the
            resulting binary package dependency on the shared library is
            at least as strict as the source package dependency on the
            shared library development package.
            <footnote>
              <para>
                This field should normally not be necessary, since if the
                behavior of any symbol has changed, the corresponding
                symbol <replaceable>minimal-version</replaceable> should
                have been increased.  But including it makes the
                <literal>symbols</literal> system more robust by
                tightening the dependency in cases where the package using
                the shared library specifically requires at least a
                particular version of the shared library development
                package for some reason.
              </para>
            </footnote>
            For our example, the <literal>zlib1g</literal>
            <filename>symbols</filename> file would contain:
          </para>
          <programlisting>* Build-Depends-Package: zlib1g-dev</programlisting>
          <para>
            Also see
            <citerefentry><refentrytitle>deb-symbols</refentrytitle><manvolnum>5</manvolnum></citerefentry>.
          </para>
        </section>

        <section id="s-providing-symbols">
          <title>Providing a <filename>symbols</filename> file</title>

          <para>
            If your package provides a shared library, you should arrange
            to include a <filename>symbols</filename> control file
            following the format described above in that package.  You
            must include either a <filename>symbols</filename> control
            file or a <filename>shlibs</filename> control file.
          </para>
          <para>
            Normally, this is done by creating a
            <filename>symbols</filename> in the source package named
            <filename>debian/<replaceable>package</replaceable>.symbols</filename>
            or <filename>debian/symbols</filename>, possibly with
            <filename>.<replaceable>arch</replaceable></filename> appended
            if the symbols information varies by architecture.  This file
            may use the extended syntax documented in
            <citerefentry><refentrytitle>dpkg-gensymbols</refentrytitle><manvolnum>1</manvolnum></citerefentry>.
            Then, call <command>dpkg-gensymbols</command> as part of the
            package build process.  It will create
            <filename>symbols</filename> files in the package staging area
            based on the binaries and libraries in the package staging
            area and the <filename>symbols</filename> files in the source
            package.<footnote><para> If you are using
            <literal>debhelper</literal>, <command>dh_makeshlibs</command>
            will take care of calling either
            <command>dpkg-gensymbols</command> or generating a
            <filename>shlibs</filename> file as appropriate.  </para>
            </footnote>
          </para>
          <para>
            Packages that provide <filename>symbols</filename> files must
            keep them up-to-date to ensure correct dependencies in
            packages that use the shared libraries.  This means updating
            the <filename>symbols</filename> file whenever a new public
            symbol is added, changing the
            <replaceable>minimal-version</replaceable> field whenever a
            symbol changes behavior or signature in a backward-compatible
            way (see <xref linkend="s-sharedlibs-updates"/>), and changing
            the <replaceable>library-soname</replaceable> and
            <replaceable>main-dependency-template</replaceable>, and
            probably all of the <replaceable>minimal-version</replaceable>
            fields, when the library changes <literal>SONAME</literal>.
            Removing a public symbol from the <filename>symbols</filename>
            file because it's no longer provided by the library normally
            requires changing the <literal>SONAME</literal> of the
            library.  See <xref linkend="s-sharedlibs-runtime"/> for more
            information on <literal>SONAME</literal>s.
          </para>
        </section>
      </section>

      <section id="s-sharedlibs-shlibdeps">
        <title>The <literal>shlibs</literal> system</title>

        <para>
          The <literal>shlibs</literal> system is a simpler alternative to
          the <literal>symbols</literal> system for declaring dependencies
          for shared libraries.  It may be more appropriate for C++
          libraries and other cases where tracking individual symbols is
          too difficult.  It predated the <literal>symbols</literal>
          system and is therefore frequently seen in older packages.  It
          is also required for udebs, which do not support
          <literal>symbols</literal>.
        </para>
        <para>
          In the following sections, we will first describe where the
          various <filename>shlibs</filename> files are to be found, then
          how to use <command>dpkg-shlibdeps</command>, and finally the
          <filename>shlibs</filename> file format and how to create them.
        </para>

        <section id="s-shlibs-paths">
          <title>
            The <filename>shlibs</filename> files present on the system
          </title>

          <para>
            There are several places where <literal>shlibs</literal> files
            are found.  The following list gives them in the order in
            which they are read by <command>dpkg-shlibdeps</command>.
            (The first one which gives the required information is used.)
          </para>
          <variablelist>
            <varlistentry>
              <term>
                <filename>debian/shlibs.local</filename>
              </term>
              <listitem>
                <para>
                  This lists overrides for this package.  This file should
                  normally not be used, but may be needed temporarily in
                  unusual situations to work around bugs in other
                  packages, or in unusual cases where the normally
                  declared dependency information in the installed
                  <filename>shlibs</filename> file for a library cannot be
                  used.  This file overrides information obtained from any
                  other source.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <filename>/etc/dpkg/shlibs.override</filename>
              </term>
              <listitem>
                <para>
                  This lists global overrides.  This list is normally
                  empty.  It is maintained by the local system
                  administrator.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <filename>DEBIAN/shlibs</filename> files in the "build
                directory"
              </term>
              <listitem>
                <para>
                  These files are generated as part of the package build
                  process and staged for inclusion as control files in the
                  binary packages being built.  They provide details of
                  any shared libraries included in the same package.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <filename>shlibs</filename> control files for packages
                installed on the system
              </term>
              <listitem>
                <para>
                  The <filename>shlibs</filename> control files for all
                  the packages currently installed on the system.  These
                  files can be read using <literal>dpkg-query
                  --control-show <replaceable>package</replaceable>
                  shlibs</literal>.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <filename>/etc/dpkg/shlibs.default</filename>
              </term>
              <listitem>
                <para>
                  This file lists any shared libraries whose packages have
                  failed to provide correct <filename>shlibs</filename>
                  files.  It was used when the <filename>shlibs</filename>
                  setup was first introduced, but it is now normally
                  empty.  It is maintained by the <literal>dpkg</literal>
                  maintainer.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
          <para>
            If a <filename>symbols</filename> file for a shared library
            package is available, <command>dpkg-shlibdeps</command> will
            always use it in preference to a <filename>shlibs</filename>,
            with the exception of
            <filename>debian/shlibs.local</filename>.  The latter
            overrides any other <filename>shlibs</filename> or
            <filename>symbols</filename> files.
          </para>
        </section>

        <section id="s-shlibs">
          <title>The <filename>shlibs</filename> File Format</title>

          <para>
            Each <filename>shlibs</filename> file has the same format.
            Lines beginning with <literal>#</literal> are considered to be
            comments and are ignored.  Each line is of the form:
          </para>
          <screen>
[<replaceable>type</replaceable>: ]<replaceable>library-name</replaceable> <replaceable>soname-version</replaceable> <replaceable>dependencies ...</replaceable></screen>
          <para>
            We will explain this by reference to the example of the
            <literal>zlib1g</literal> package, which (at the time of
            writing) installs the shared library
            <filename>/usr/lib/libz.so.1.2.3.4</filename>.
          </para>
          <para>
            <replaceable>type</replaceable> is an optional element that
            indicates the type of package for which the line is valid.
            The only type currently in use is <literal>udeb</literal>.
            The colon and space after the type are required.
          </para>
          <para>
            <replaceable>library-name</replaceable> is the name of the
            shared library, in this case <literal>libz</literal>.  (This
            must match the name part of the soname, see below.)
          </para>
          <para>
            <replaceable>soname-version</replaceable> is the version part
            of the ELF <literal>SONAME</literal> attribute of the library,
            determined the same way that the
            <replaceable>soversion</replaceable> component of the
            recommended shared library package name is determined.  See
            <xref linkend="s-sharedlibs-runtime"/> for the details.
          </para>
          <para>
            <replaceable>dependencies</replaceable> has the same syntax as
            a dependency field in a binary package control file.  It
            should give details of which packages are required to satisfy
            a binary built against the version of the library contained in
            the package.  See <xref linkend="s-depsyntax"/> for details on
            the syntax, and <xref linkend="s-sharedlibs-updates"/> for
            details on how to maintain the dependency version constraint.
          </para>
          <para>
            In our example, if the last change to the
            <literal>zlib1g</literal> package that could change behavior
            for a client of that library was in version
            <literal>1:1.2.3.3.dfsg-1</literal>, then the
            <literal>shlibs</literal> entry for this library could say:
          </para>
          <programlisting>libz 1 zlib1g (&gt;= 1:1.2.3.3.dfsg)</programlisting>
          <para>
            This version restriction must be new enough that any binary
            built against the current version of the library will work
            with any version of the shared library that satisfies that
            dependency.
          </para>
          <para>
            As zlib1g also provides a udeb containing the shared library,
            there would also be a second line:
          </para>
          <programlisting>udeb: libz 1 zlib1g-udeb (&gt;= 1:1.2.3.3.dfsg)</programlisting>
        </section>

        <section id="s8.6.4.3">
          <title>Providing a <filename>shlibs</filename> file</title>

          <para>
            To provide a <filename>shlibs</filename> file for a shared
            library binary package, create a <filename>shlibs</filename>
            file following the format described above and place it in the
            <filename>DEBIAN</filename> directory for that package during
            the build.  It will then be included as a control file for
            that package.
            <footnote>
              <para>
                This is what <command>dh_makeshlibs</command> in the
                <systemitem role="package">debhelper</systemitem> suite
                does.  If your package also has a udeb that provides a
                shared library, <command>dh_makeshlibs</command> can
                automatically generate the <literal>udeb:</literal> lines
                if you specify the name of the udeb with the
                <literal>--add-udeb</literal> option.
              </para>
            </footnote>
          </para>
          <para>
            Since <command>dpkg-shlibdeps</command> reads the
            <filename>DEBIAN/shlibs</filename> files in all of the binary
            packages being built from this source package, all of the
            <filename>DEBIAN/shlibs</filename> files should be installed
            before <command>dpkg-shlibdeps</command> is called on any of
            the binary packages.
          </para>
        </section>
      </section>
    </section>
  </chapter>

  <chapter id="ch-opersys">
    <title>The Operating System</title>

    <section id="s9.1">
      <title>File system hierarchy</title>

      <section id="s-fhs">
        <title>File System Structure</title>

        <para>
          The location of all files and directories must comply with the
          Filesystem Hierarchy Standard (FHS), version 2.3, with the
          exceptions noted below, and except where doing so would violate
          other terms of Debian Policy.  The following exceptions to the
          FHS apply:
        </para>
        <orderedlist numeration="arabic">
          <listitem>
            <para>
              The FHS requirement that architecture-independent
              application-specific static files be located in
              <filename>/usr/share</filename> is relaxed to a suggestion.
              In particular, a subdirectory of
              <filename>/usr/lib</filename> may be used by a package (or a
              collection of packages) to hold a mixture of
              architecture-independent and architecture-dependent files.
              However, when a directory is entirely composed of
              architecture-independent files, it should be located in
              <filename>/usr/share</filename>.
            </para>
          </listitem>
          <listitem>
            <para>
              The optional rules related to user specific configuration
              files for applications are stored in the user's home
              directory are relaxed.  It is recommended that such files
              start with the '<literal>.</literal>' character (a "dot
              file"), and if an application needs to create more than one
              dot file then the preferred placement is in a subdirectory
              with a name starting with a '.' character, (a "dot
              directory").  In this case it is recommended the
              configuration files not start with the '.' character.
            </para>
          </listitem>
          <listitem>
            <para>
              The requirement for amd64 to use <filename>/lib64</filename>
              for 64 bit binaries is removed.
            </para>
          </listitem>
          <listitem>
            <para>
              The requirement for object files, internal binaries, and
              libraries, including <filename>libc.so.*</filename>, to be
              located directly under <filename>/lib{,32}</filename> and
              <filename>/usr/lib{,32}</filename> is amended, permitting
              files to instead be installed to
              <filename>/lib/<replaceable>triplet</replaceable></filename>
              and
              <filename>/usr/lib/<replaceable>triplet</replaceable></filename>,
              where <literal><replaceable>triplet</replaceable></literal>
              is the value returned by <literal>dpkg-architecture
              -qDEB_HOST_MULTIARCH</literal> for the architecture of the
              package.  Packages may <emphasis>not</emphasis> install
              files to any <replaceable>triplet</replaceable> path other
              than the one matching the architecture of that package; for
              instance, an <literal>Architecture:  amd64</literal> package
              containing 32-bit x86 libraries may not install these
              libraries to <filename>/usr/lib/i386-linux-gnu</filename>.
              <footnote><para> This is necessary in order to reserve the
              directories for use in cross-installation of library
              packages from other architectures, as part of
              <literal>multiarch</literal>.  </para> </footnote>
            </para>
            <para>
              The requirement for C and C++ headers files to be accessible
              through the search path <filename>/usr/include/</filename>
              is amended, permitting files to be accessible through the
              search path
              <filename>/usr/include/<replaceable>triplet</replaceable></filename>
              where <literal><replaceable>triplet</replaceable></literal>
              is as above.  <footnote><para> This is necessary for
              architecture-dependent headers file to coexist in a
              <literal>multiarch</literal> setup.  </para> </footnote>
            </para>
            <para>
              Applications may also use a single subdirectory under
              <filename>/usr/lib/<replaceable>triplet</replaceable></filename>.
            </para>
            <para>
              The execution time linker/loader, ld*, must still be made
              available in the existing location under /lib or /lib64
              since this is part of the ELF ABI for the architecture.
            </para>
          </listitem>
          <listitem>
            <para>
              The requirement that
              <filename>/usr/local/share/man</filename> be "synonymous"
              with <filename>/usr/local/man</filename> is relaxed to a
              recommendation
            </para>
          </listitem>
          <listitem>
            <para>
              The requirement that windowmanagers with a single
              configuration file call it <filename>system.*wmrc</filename>
              is removed, as is the restriction that the window manager
              subdirectory be named identically to the window manager name
              itself.
            </para>
          </listitem>
          <listitem>
            <para>
              The requirement that boot manager configuration files live
              in <filename>/etc</filename>, or at least are symlinked
              there, is relaxed to a recommendation.
            </para>
          </listitem>
          <listitem>
            <para>
              The additional directory <filename>/run</filename> in the
              root file system is allowed.  <filename>/run</filename>
              replaces <filename>/var/run</filename>, and the subdirectory
              <filename>/run/lock</filename> replaces
              <filename>/var/lock</filename>, with the
              <filename>/var</filename> directories replaced by symlinks
              for backwards compatibility.  <filename>/run</filename> and
              <filename>/run/lock</filename> must follow all of the
              requirements in the FHS for <filename>/var/run</filename>
              and <filename>/var/lock</filename>, respectively, such as
              file naming conventions, file format requirements, or the
              requirement that files be cleared during the boot process.
              Files and directories residing in <filename>/run</filename>
              should be stored on a temporary file system.
            </para>
          </listitem>
          <listitem>
            <para>
              The <filename>/sys</filename> directory in the root
              filesystem is additionally allowed.
              <footnote>
                <para>
                  This directory is used as mount point to mount virtual
                  filesystems to get access to kernel information.
                </para>
              </footnote>
            </para>
          </listitem>
          <listitem>
            <para>
              The <filename>/var/www</filename> directory is additionally
              allowed.
            </para>
          </listitem>
          <listitem>
            <para>
              The requirement for
              <filename>/usr/local/lib<replaceable>qual</replaceable></filename>
              to exist if
              <filename>/lib<replaceable>qual</replaceable></filename> or
              <filename>/usr/lib<replaceable>qual</replaceable></filename>
              exists (where
              <filename>lib<replaceable>qual</replaceable></filename> is a
              variant of <filename>lib</filename> such as
              <filename>lib32</filename> or <filename>lib64</filename>) is
              removed.
            </para>
          </listitem>
          <listitem>
            <para>
              On GNU/Hurd systems, the following additional directories
              are allowed in the root filesystem:
              <filename>/hurd</filename> and
              <filename>/servers</filename>.
              <footnote>
                <para>
                  These directories are used to store translators and as a
                  set of standard names for mount points, respectively.
                </para>
              </footnote>
            </para>
          </listitem>
        </orderedlist>
        <para>
          The version of this document referred here can be found in the
          <literal>debian-policy</literal> package or on <ulink
          url="https://www.debian.org/doc/packaging-manuals/fhs/">FHS
          (Debian copy)</ulink> alongside this manual (or, if you have the
          <systemitem role="package">debian-policy</systemitem> installed,
          you can try <ulink
          url="file:///usr/share/doc/debian-policy/fhs/">FHS (local
          copy)</ulink>).  The latest version, which may be a more recent
          version, may be found on <ulink
          url="http://www.pathname.com/fhs/">FHS (upstream)</ulink>.
          Specific questions about following the standard may be asked on
          the <literal>debian-devel</literal> mailing list, or referred to
          the FHS mailing list (see the <ulink
          url="http://www.pathname.com/fhs/">FHS web site</ulink> for more
          information).
        </para>
      </section>

      <section id="s9.1.2">
        <title>Site-specific programs</title>

        <para>
          As mandated by the FHS, packages must not place any files in
          <filename>/usr/local</filename>, either by putting them in the
          file system archive to be unpacked by <command>dpkg</command> or
          by manipulating them in their maintainer scripts.
        </para>
        <para>
          However, the package may create empty directories below
          <filename>/usr/local</filename> so that the system administrator
          knows where to place site-specific files.  These are not
          directories <emphasis>in</emphasis>
          <filename>/usr/local</filename>, but are children of directories
          in <filename>/usr/local</filename>.  These directories
          (<filename>/usr/local/*/dir/</filename>) should be removed on
          package removal if they are empty.
        </para>
        <para>
          Note that this applies only to directories
          <emphasis>below</emphasis> <filename>/usr/local</filename>, not
          <emphasis>in</emphasis> <filename>/usr/local</filename>.
          Packages must not create sub-directories in the directory
          <filename>/usr/local</filename> itself, except those listed in
          FHS, section 4.5.  However, you may create directories below
          them as you wish.  You must not remove any of the directories
          listed in 4.5, even if you created them.
        </para>
        <para>
          Since <filename>/usr/local</filename> can be mounted read-only
          from a remote server, these directories must be created and
          removed by the <command>postinst</command> and
          <command>prerm</command> maintainer scripts and not be included
          in the <filename>.deb</filename> archive.  These scripts must
          not fail if either of these operations fail.
        </para>
        <para>
          For example, the <literal>emacsen-common</literal> package could
          contain something like
        </para>
        <programlisting>
if [ ! -e /usr/local/share/emacs ]; then
    if mkdir /usr/local/share/emacs 2&gt;/dev/null; then
        if chown root:staff /usr/local/share/emacs; then
            chmod 2775 /usr/local/share/emacs || true
        fi
    fi
fi</programlisting>
        <para>
          in its <command>postinst</command> script, and
        </para>
        <programlisting>
rmdir /usr/local/share/emacs/site-lisp 2&gt;/dev/null || true
rmdir /usr/local/share/emacs 2&gt;/dev/null || true</programlisting>
        <para>
          in the <command>prerm</command> script.  (Note that this form is
          used to ensure that if the script is interrupted, the directory
          <filename>/usr/local/share/emacs</filename> will still be
          removed.)
        </para>
        <para>
          If you do create a directory in <filename>/usr/local</filename>
          for local additions to a package, you should ensure that
          settings in <filename>/usr/local</filename> take precedence over
          the equivalents in <filename>/usr</filename>.
        </para>
        <para>
          However, because <filename>/usr/local</filename> and its
          contents are for exclusive use of the local administrator, a
          package must not rely on the presence or absence of files or
          directories in <filename>/usr/local</filename> for normal
          operation.
        </para>
        <para>
          The <filename>/usr/local</filename> directory itself and all the
          subdirectories created by the package should (by default) have
          permissions 2775 (group-writable and set-group-id) and be owned
          by <literal>root:staff</literal>.
        </para>
      </section>

      <section id="s9.1.3">
        <title>The system-wide mail directory</title>

        <para>
          The system-wide mail directory is
          <filename>/var/mail</filename>.  This directory is part of the
          base system and should not be owned by any particular mail
          agents.  The use of the old location
          <filename>/var/spool/mail</filename> is deprecated, even though
          the spool may still be physically located there.
        </para>
      </section>

      <section id="s-fhs-run">
        <title>
          <filename>/run</filename> and <filename>/run/lock</filename>
        </title>

        <para>
          The directory <filename>/run</filename> is cleared at boot,
          normally by being a mount point for a temporary file system.
          Packages therefore must not assume that any files or directories
          under <filename>/run</filename> other than
          <filename>/run/lock</filename> exist unless the package has
          arranged to create those files or directories since the last
          reboot.  Normally, this is done by the package via an init
          script.  See <xref linkend="s-writing-init"/> for more
          information.
        </para>
        <para>
          Packages must not include files or directories under
          <filename>/run</filename>, or under the older
          <filename>/var/run</filename> and <filename>/var/lock</filename>
          paths.  The latter paths will normally be symlinks or other
          redirections to <filename>/run</filename> for backwards
          compatibility.
        </para>
      </section>
    </section>

    <section id="s9.2">
      <title>Users and groups</title>

      <section id="s9.2.1">
        <title>Introduction</title>

        <para>
          The Debian system can be configured to use either plain or
          shadow passwords.
        </para>
        <para>
          Some user ids (UIDs) and group ids (GIDs) are reserved globally
          for use by certain packages.  Because some packages need to
          include files which are owned by these users or groups, or need
          the ids compiled into binaries, these ids must be used on any
          Debian system only for the purpose for which they are allocated.
          This is a serious restriction, and we should avoid getting in
          the way of local administration policies.  In particular, many
          sites allocate users and/or local system groups starting at 100.
        </para>
        <para>
          Apart from this we should have dynamically allocated ids, which
          should by default be arranged in some sensible order, but the
          behavior should be configurable.
        </para>
        <para>
          Packages other than <literal>base-passwd</literal> must not
          modify <filename>/etc/passwd</filename>,
          <filename>/etc/shadow</filename>,
          <filename>/etc/group</filename> or
          <filename>/etc/gshadow</filename>.
        </para>
      </section>

      <section id="s9.2.2">
        <title>UID and GID classes</title>

        <para>
          The UID and GID numbers are divided into classes as follows:
        </para>
        <variablelist>
          <varlistentry>
            <term>0-99:</term>
            <listitem>
              <para>
                Globally allocated by the Debian project, the same on
                every Debian system.  These ids will appear in the
                <filename>passwd</filename> and <filename>group</filename>
                files of all Debian systems, new ids in this range being
                added automatically as the <literal>base-passwd</literal>
                package is updated.
              </para>
              <para>
                Packages which need a single statically allocated uid or
                gid should use one of these; their maintainers should ask
                the <literal>base-passwd</literal> maintainer for ids.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>100-999:</term>
            <listitem>
              <para>
                Dynamically allocated system users and groups.  Packages
                which need a user or group, but can have this user or
                group allocated dynamically and differently on each
                system, should use <literal>adduser --system</literal> to
                create the group and/or user.  <command>adduser</command>
                will check for the existence of the user or group, and if
                necessary choose an unused id based on the ranges
                specified in <filename>adduser.conf</filename>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>1000-59999:</term>
            <listitem>
              <para>
                Dynamically allocated user accounts.  By default
                <command>adduser</command> will choose UIDs and GIDs for
                user accounts in this range, though
                <filename>adduser.conf</filename> may be used to modify
                this behavior.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>60000-64999:</term>
            <listitem>
              <para>
                Globally allocated by the Debian project, but only created
                on demand.  The ids are allocated centrally and
                statically, but the actual accounts are only created on
                users' systems on demand.
              </para>
              <para>
                These ids are for packages which are obscure or which
                require many statically-allocated ids.  These packages
                should check for and create the accounts in
                <filename>/etc/passwd</filename> or
                <filename>/etc/group</filename> (using
                <command>adduser</command> if it has this facility) if
                necessary.  Packages which are likely to require further
                allocations should have a "hole" left after them in the
                allocation, to give them room to grow.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>65000-65533:</term>
            <listitem>
              <para>
                Reserved.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>65534:</term>
            <listitem>
              <para>
                User <literal>nobody</literal>.  The corresponding gid
                refers to the group <literal>nogroup</literal>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>65535:</term>
            <listitem>
              <para>
                This value <emphasis>must not</emphasis> be used, because
                it was the error return sentinel value when
                <literal>uid_t</literal> was 16 bits.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>65536-4294967293:</term>
            <listitem>
              <para>
                Dynamically allocated user accounts.  By default
                <command>adduser</command> will not allocate UIDs and GIDs
                in this range, to ease compatibility with legacy systems
                where <literal>uid_t</literal> is still 16 bits.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>4294967294:</term>
            <listitem>
              <para>
                <literal>(uid_t)(-2) == (gid_t)(-2)</literal>
                <emphasis>must not</emphasis> be used, because it is used
                as the anonymous, unauthenticated user by some NFS
                implementations.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>4294967295:</term>
            <listitem>
              <para>
                <literal>(uid_t)(-1) == (gid_t)(-1)</literal>
                <emphasis>must not</emphasis> be used, because it is the
                error return sentinel value.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>

    <section id="s-sysvinit">
      <title>System run levels and <filename>init.d</filename> scripts</title>

      <section id="s-etc-init.d">
        <title>Introduction</title>

        <para>
          The <filename>/etc/init.d</filename> directory contains the
          scripts executed by <command>init</command> at boot time and
          when the init state (or "runlevel") is changed (see
          <citerefentry><refentrytitle>init</refentrytitle><manvolnum>8</manvolnum></citerefentry>).
        </para>
        <para>
          There are at least two different, yet functionally equivalent,
          ways of handling these scripts.  For the sake of simplicity,
          this document describes only the symbolic link method.  However,
          it must not be assumed by maintainer scripts that this method is
          being used, and any automated manipulation of the various
          runlevel behaviors by maintainer scripts must be performed using
          <command>update-rc.d</command> as described below and not by
          manually installing or removing symlinks.  For information on
          the implementation details of the other method, implemented in
          the <literal>file-rc</literal> package, please refer to the
          documentation of that package.
        </para>
        <para>
          These scripts are referenced by symbolic links in the
          <filename>/etc/rc<replaceable>n</replaceable>.d</filename>
          directories.  When changing runlevels, <command>init</command>
          looks in the directory
          <filename>/etc/rc<replaceable>n</replaceable>.d</filename> for
          the scripts it should execute, where
          <literal><replaceable>n</replaceable></literal> is the runlevel
          that is being changed to, or <literal>S</literal> for the
          boot-up scripts.
        </para>
        <para>
          The names of the links all have the form
          <filename>S<replaceable>mm</replaceable><replaceable>script</replaceable></filename>
          or
          <filename>K<replaceable>mm</replaceable><replaceable>script</replaceable></filename>
          where <replaceable>mm</replaceable> is a two-digit number and
          <replaceable>script</replaceable> is the name of the script
          (this should be the same as the name of the actual script in
          <filename>/etc/init.d</filename>).
        </para>
        <para>
          When <command>init</command> changes runlevel first the targets
          of the links whose names start with a <literal>K</literal> are
          executed, each with the single argument <literal>stop</literal>,
          followed by the scripts prefixed with an <literal>S</literal>,
          each with the single argument <literal>start</literal>.  (The
          links are those in the
          <filename>/etc/rc<replaceable>n</replaceable>.d</filename>
          directory corresponding to the new runlevel.) The
          <literal>K</literal> links are responsible for killing services
          and the <literal>S</literal> link for starting services upon
          entering the runlevel.
        </para>
        <para>
          For example, if we are changing from runlevel 2 to runlevel 3,
          init will first execute all of the <literal>K</literal> prefixed
          scripts it finds in <filename>/etc/rc3.d</filename>, and then
          all of the <literal>S</literal> prefixed scripts in that
          directory.  The links starting with <literal>K</literal> will
          cause the referred-to file to be executed with an argument of
          <literal>stop</literal>, and the <literal>S</literal> links with
          an argument of <literal>start</literal>.
        </para>
        <para>
          The two-digit number <replaceable>mm</replaceable> is used to
          determine the order in which to run the scripts: low-numbered
          links have their scripts run first.  For example, the
          <literal>K20</literal> scripts will be executed before the
          <literal>K30</literal> scripts.  This is used when a certain
          service must be started before another.  For example, the name
          server <command>bind</command> might need to be started before
          the news server <command>inn</command> so that
          <command>inn</command> can set up its access lists.  In this
          case, the script that starts <command>bind</command> would have
          a lower number than the script that starts
          <command>inn</command> so that it runs first:
        </para>
        <screen>
/etc/rc2.d/S17bind
/etc/rc2.d/S70inn</screen>
        <para>
          The two runlevels 0 (halt) and 6 (reboot) are slightly
          different.  In these runlevels, the links with an
          <literal>S</literal> prefix are still called after those with a
          <literal>K</literal> prefix, but they too are called with the
          single argument <literal>stop</literal>.
        </para>
      </section>

      <section id="s-writing-init">
        <title>Writing the scripts</title>

        <para>
          Packages that include daemons for system services should place
          scripts in <filename>/etc/init.d</filename> to start or stop
          services at boot time or during a change of runlevel.  These
          scripts should be named
          <filename>/etc/init.d/<replaceable>package</replaceable></filename>,
          and they should accept one argument, saying what to do:
        </para>
        <variablelist>
          <varlistentry>
            <term><literal>start</literal></term>
            <listitem>
              <para>
                start the service,
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>stop</literal></term>
            <listitem>
              <para>
                stop the service,
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>restart</literal></term>
            <listitem>
              <para>
                stop and restart the service if it's already running,
                otherwise start the service
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>try-restart</literal></term>
            <listitem>
              <para>
                restart the service if it's already running, otherwise
                just report success.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>reload</literal></term>
            <listitem>
              <para>
                cause the configuration of the service to be reloaded
                without actually stopping and restarting the service,
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>force-reload</literal></term>
            <listitem>
              <para>
                cause the configuration to be reloaded if the service
                supports this, otherwise restart the service.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>status</literal></term>
            <listitem>
              <para>
                report the current status of the service
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
        <para>
          The <literal>start</literal>, <literal>stop</literal>,
          <literal>restart</literal>, and <literal>force-reload</literal>
          options should be supported by all scripts in
          <filename>/etc/init.d</filename>.  Supporting
          <literal>status</literal> is recommended but not required.  The
          <literal>reload</literal> and <literal>try-restart</literal>
          options are optional.
        </para>
        <para>
          The <filename>init.d</filename> scripts must ensure that they
          will behave sensibly (i.e., returning success and not starting
          multiple copies of a service) if invoked with
          <literal>start</literal> when the service is already running, or
          with <literal>stop</literal> when it isn't, and that they don't
          kill unfortunately-named user processes.  The best way to
          achieve this is usually to use
          <command>start-stop-daemon</command> with the
          <literal>--oknodo</literal> option.
        </para>
        <para>
          Be careful of using <literal>set -e</literal> in
          <filename>init.d</filename> scripts.  Writing correct
          <filename>init.d</filename> scripts requires accepting various
          error exit statuses when daemons are already running or already
          stopped without aborting the <filename>init.d</filename> script,
          and common <filename>init.d</filename> function libraries are
          not safe to call with <literal>set -e</literal> in
          effect.
          <footnote>
            <para>
              <literal>/lib/lsb/init-functions</literal>, which assists in
              writing LSB-compliant init scripts, may fail if <literal>set
              -e</literal> is in effect and echoing status messages to the
              console fails, for example.
            </para>
          </footnote>
          For <literal>init.d</literal> scripts, it's often easier to not
          use <literal>set -e</literal> and instead check the result of
          each command separately.
        </para>
        <para>
          If a service reloads its configuration automatically (as in the
          case of <command>cron</command>, for example), the
          <literal>reload</literal> option of the
          <filename>init.d</filename> script should behave as if the
          configuration has been reloaded successfully.
        </para>
        <para>
          The <filename>/etc/init.d</filename> scripts must be treated as
          configuration files, either (if they are present in the package,
          that is, in the .deb file) by marking them as
          <literal>conffile</literal>s, or, (if they do not exist in the
          .deb) by managing them correctly in the maintainer scripts (see
          <xref linkend="s-config-files"/>).  This is important since we
          want to give the local system administrator the chance to adapt
          the scripts to the local system, e.g., to disable a service
          without de-installing the package, or to specify some special
          command line options when starting a service, while making sure
          their changes aren't lost during the next package upgrade.
        </para>
        <para>
          These scripts should not fail obscurely when the configuration
          files remain but the package has been removed, as configuration
          files remain on the system after the package has been removed.
          Only when <command>dpkg</command> is executed with the
          <literal>--purge</literal> option will configuration files be
          removed.  In particular, as the
          <filename>/etc/init.d/<replaceable>package</replaceable></filename>
          script itself is usually a <literal>conffile</literal>, it will
          remain on the system if the package is removed but not purged.
          Therefore, you should include a <literal>test</literal>
          statement at the top of the script, like this:
        </para>
        <programlisting>
test -f <replaceable>program-executed-later-in-script</replaceable> || exit 0</programlisting>
        <para>
          Often there are some variables in the
          <filename>init.d</filename> scripts whose values control the
          behavior of the scripts, and which a system administrator is
          likely to want to change.  As the scripts themselves are
          frequently <literal>conffile</literal>s, modifying them requires
          that the administrator merge in their changes each time the
          package is upgraded and the <literal>conffile</literal> changes.
          To ease the burden on the system administrator, such
          configurable values should not be placed directly in the script.
          Instead, they should be placed in a file in
          <filename>/etc/default</filename>, which typically will have the
          same base name as the <filename>init.d</filename> script.  This
          extra file should be sourced by the script when the script runs.
          It must contain only variable settings and comments in SUSv3
          <command>sh</command> format.  It may either be a
          <literal>conffile</literal> or a configuration file maintained
          by the package maintainer scripts.  See <xref
          linkend="s-config-files"/> for more details.
        </para>
        <para>
          To ensure that vital configurable values are always available,
          the <filename>init.d</filename> script should set default values
          for each of the shell variables it uses, either before sourcing
          the <filename>/etc/default/</filename> file or afterwards using
          something like the <literal>: ${VAR:=default}</literal> syntax.
          Also, the <filename>init.d</filename> script must behave
          sensibly and not fail if the <filename>/etc/default</filename>
          file is deleted.
        </para>
        <para>
          Files and directories under <filename>/run</filename>, including
          ones referred to via the compatibility paths
          <filename>/var/run</filename> and
          <filename>/var/lock</filename>, are normally stored on a
          temporary filesystem and are normally not persistent across a
          reboot.  The <filename>init.d</filename> scripts must handle
          this correctly.  This will typically mean creating any required
          subdirectories dynamically when the <filename>init.d</filename>
          script is run.  See <xref linkend="s-fhs-run"/> for more
          information.
        </para>
      </section>

      <section id="s9.3.3">
        <title>Interfacing with init systems</title>

        <para>
          Maintainers should use the abstraction layer provided by the
          <command>update-rc.d</command> and
          <command>invoke-rc.d</command> programs to deal with initscripts
          in their packages' scripts such as <command>postinst</command>,
          <command>prerm</command> and <command>postrm</command>.
        </para>
        <para>
          Directly managing the /etc/rc?.d links and directly invoking the
          <filename>/etc/init.d/</filename> initscripts should be done
          only by packages providing the initscript subsystem (such as
          <command>sysv-rc</command> and <command>file-rc</command>).
        </para>

        <section id="s9.3.3.1">
          <title>Managing the links</title>

          <para>
            The program <command>update-rc.d</command> is provided for
            package maintainers to arrange for the proper creation and
            removal of
            <filename>/etc/rc<replaceable>n</replaceable>.d</filename>
            symbolic links, or their functional equivalent if another
            method is being used.  This may be used by maintainers in
            their packages' <command>postinst</command> and
            <command>postrm</command> scripts.
          </para>
          <para>
            You must not include any
            <filename>/etc/rc<replaceable>n</replaceable>.d</filename>
            symbolic links in the actual archive or manually create or
            remove the symbolic links in maintainer scripts; you must use
            the <command>update-rc.d</command> program instead.  (The
            former will fail if an alternative method of maintaining
            runlevel information is being used.) You must not include the
            <filename>/etc/rc<replaceable>n</replaceable>.d</filename>
            directories themselves in the archive either.  (Only the
            <literal>sysvinit</literal> package may do so.)
          </para>
          <para>
            By default <command>update-rc.d</command> will start services
            in each of the multi-user state runlevels (2, 3, 4, and 5) and
            stop them in the halt runlevel (0), the single-user runlevel
            (1) and the reboot runlevel (6).  The system administrator
            will have the opportunity to customize runlevels by simply
            adding, moving, or removing the symbolic links in
            <filename>/etc/rc<replaceable>n</replaceable>.d</filename> if
            symbolic links are being used, or by modifying
            <filename>/etc/runlevel.conf</filename> if the
            <literal>file-rc</literal> method is being used.
          </para>
          <para>
            To get the default behavior for your package, put in your
            <command>postinst</command> script
          </para>
          <programlisting>
update-rc.d <replaceable>package</replaceable> defaults</programlisting>
          <para>
            and in your <command>postrm</command>
          </para>
          <programlisting>
if [ "$1" = purge ]; then
    update-rc.d <replaceable>package</replaceable> remove
fi</programlisting>
          <para>
            Note that if your package changes runlevels or priority, you
            may have to remove and recreate the links, since otherwise the
            old links may persist.  Refer to the documentation of
            <command>update-rc.d</command>.
          </para>
          <para>
            This will use a default sequence number of 20.  If it does not
            matter when or in which order the <filename>init.d</filename>
            script is run, use this default.  If it does, then you should
            talk to the maintainer of the <command>sysvinit</command>
            package or post to <literal>debian-devel</literal>, and they
            will help you choose a number.
          </para>
          <para>
            For more information about using
            <literal>update-rc.d</literal>, please consult its man page
            <citerefentry><refentrytitle>update-rc.d</refentrytitle><manvolnum>8</manvolnum></citerefentry>.
          </para>
          <para>
            It is easiest for packages not to call
            <command>update-rc.d</command> directly, but instead use
            debhelper programs that add the required
            <command>update-rc.d</command> calls automatically.  See
            <command>dh_installinit</command>,
            <command>dh_systemd_enable</command>, etc.
          </para>
        </section>

        <section id="s9.3.3.2">
          <title>Running initscripts</title>

          <para>
            The program <command>invoke-rc.d</command> is provided to make
            it easier for package maintainers to properly invoke an
            initscript, obeying runlevel and other locally-defined
            constraints that might limit a package's right to start, stop
            and otherwise manage services.  This program may be used by
            maintainers in their packages' scripts.
          </para>
          <para>
            The package maintainer scripts must use
            <command>invoke-rc.d</command> to invoke the
            <filename>/etc/init.d/*</filename> initscripts, instead of
            calling them directly.
          </para>
          <para>
            By default, <command>invoke-rc.d</command> will pass any
            action requests (start, stop, reload, restart...) to the
            <filename>/etc/init.d</filename> script, filtering out
            requests to start or restart a service out of its intended
            runlevels.
          </para>
          <para>
            Most packages will simply need to change:
          </para>
          <programlisting>
/etc/init.d/<replaceable>package</replaceable> <replaceable>action</replaceable></programlisting>
          <para>
            in their <command>postinst</command> and
            <command>prerm</command> scripts to:
          </para>
          <programlisting>
invoke-rc.d <replaceable>package</replaceable> <replaceable>action</replaceable></programlisting>
          <para>
            A package should register its initscript services using
            <command>update-rc.d</command> before it tries to invoke them
            using <command>invoke-rc.d</command>.  Invocation of
            unregistered services may fail.
          </para>
          <para>
            For more information about using
            <command>invoke-rc.d</command>, please consult its man page
            <citerefentry><refentrytitle>invoke-rc.d</refentrytitle><manvolnum>8</manvolnum></citerefentry>.
          </para>
          <para>
            It is easiest for packages not to call
            <command>invoke-rc.d</command> directly, but instead use
            debhelper programs that add the required
            <command>invoke-rc.d</command> calls automatically.  See
            <command>dh_installinit</command>,
            <command>dh_systemd_start</command>, etc.
          </para>
        </section>

      </section>

      <section id="s9.3.4">
        <title>Boot-time initialization</title>

        <para>
          There used to be another directory,
          <filename>/etc/rc.boot</filename>, which contained scripts which
          were run once per machine boot.  This has been deprecated in
          favour of links from <filename>/etc/rcS.d</filename> to files in
          <filename>/etc/init.d</filename> as described in <xref
          linkend="s-etc-init.d"/>.  Packages must not place files in
          <filename>/etc/rc.boot</filename>.
        </para>
      </section>

      <section id="s9.3.5">
        <title>Example</title>

        <para>
          An example on which you can base your
          <filename>/etc/init.d</filename> scripts is found in
          <filename>/etc/init.d/skeleton</filename>.
        </para>
      </section>
    </section>

    <section id="s9.4">
      <title>Console messages from <filename>init.d</filename> scripts</title>

      <para>
        This section describes the formats to be used for messages written
        to standard output by the <filename>/etc/init.d</filename>
        scripts.  The intent is to improve the consistency of Debian's
        startup and shutdown look and feel.  For this reason, please look
        very carefully at the details.  We want the messages to have the
        same format in terms of wording, spaces, punctuation and case of
        letters.
      </para>
      <para>
        Here is a list of overall rules that should be used for messages
        generated by <filename>/etc/init.d</filename> scripts.
      </para>
      <itemizedlist>
        <listitem>
          <para>
            The message should fit in one line (fewer than 80 characters),
            start with a capital letter and end with a period
            (<literal>.</literal>) and line feed
            (<literal>"\n"</literal>).
          </para>
        </listitem>
        <listitem>
          <para>
            If the script is performing some time consuming task in the
            background (not merely starting or stopping a program, for
            instance), an ellipsis (three dots:  <literal>...</literal>)
            should be output to the screen, with no leading or tailing
            whitespace or line feeds.
          </para>
        </listitem>
        <listitem>
          <para>
            The messages should appear as if the computer is telling the
            user what it is doing (politely :-), but should not mention
            "it" directly.  For example, instead of:
          </para>
          <screen>I'm starting network daemons: nfsd mountd.</screen>
          <para>
            the message should say
          </para>
          <screen>Starting network daemons: nfsd mountd.</screen>
        </listitem>
      </itemizedlist>
      <para>
        <literal>init.d</literal> script should use the following standard
        message formats for the situations enumerated below.
      </para>
      <itemizedlist>
        <listitem>
          <para>
            When daemons are started
          </para>
          <para>
            If the script starts one or more daemons, the output should
            look like this (a single line, no leading spaces):
          </para>
          <screen>
Starting <replaceable>description</replaceable>: <replaceable>daemon-1</replaceable> ... <replaceable>daemon-n</replaceable>.</screen>
          <para>
            The <replaceable>description</replaceable> should describe the
            subsystem the daemon or set of daemons are part of, while
            <replaceable>daemon-1</replaceable> up to
            <replaceable>daemon-n</replaceable> denote each daemon's name
            (typically the file name of the program).
          </para>
          <para>
            For example, the output of
            <filename>/etc/init.d/lpd</filename> would look like:
          </para>
          <screen>Starting printer spooler: lpd.</screen>
          <para>
            This can be achieved by saying
          </para>
          <programlisting>
echo -n "Starting printer spooler: lpd"
start-stop-daemon --start --quiet --exec /usr/sbin/lpd
echo "."</programlisting>
          <para>
            in the script.  If there are more than one daemon to start,
            the output should look like this:
          </para>
          <programlisting>
echo -n "Starting remote file system services:"
echo -n " nfsd"; start-stop-daemon --start --quiet nfsd
echo -n " mountd"; start-stop-daemon --start --quiet mountd
echo -n " ugidd"; start-stop-daemon --start --quiet ugidd
echo "."</programlisting>
          <para>
            This makes it possible for the user to see what is happening
            and when the final daemon has been started.  Care should be
            taken in the placement of white spaces: in the example above
            the system administrators can easily comment out a line if
            they don't want to start a specific daemon, while the
            displayed message still looks good.
          </para>
        </listitem>
        <listitem>
          <para>
            When a system parameter is being set
          </para>
          <para>
            If you have to set up different system parameters during the
            system boot, you should use this format:
          </para>
          <screen>
Setting <replaceable>parameter</replaceable> to "<replaceable>value</replaceable>".</screen>
          <para>
            You can use a statement such as the following to get the
            quotes right:
          </para>
          <programlisting>echo "Setting DNS domainname to \"$domainname\"."</programlisting>
          <para>
            Note that the same symbol (<literal>"</literal><!-- balance "
            -->) is used for the left and right quotation marks.  A grave
            accent (<literal>`</literal>) is not a quote character;
            neither is an apostrophe (<literal>'</literal>).
          </para>
        </listitem>
        <listitem>
          <para>
            When a daemon is stopped or restarted
          </para>
          <para>
            When you stop or restart a daemon, you should issue a message
            identical to the startup message, except that
            <literal>Starting</literal> is replaced with
            <literal>Stopping</literal> or <literal>Restarting</literal>
            respectively.
          </para>
          <para>
            For example, stopping the printer daemon will look like this:
          </para>
          <screen>Stopping printer spooler: lpd.</screen>
        </listitem>
        <listitem>
          <para>
            When something is executed
          </para>
          <para>
            There are several examples where you have to run a program at
            system startup or shutdown to perform a specific task, for
            example, setting the system's clock using
            <command>netdate</command> or killing all processes when the
            system shuts down.  Your message should look like this:
          </para>
          <screen>Doing something very useful...done.</screen>
          <para>
            You should print the <literal>done.</literal> immediately
            after the job has been completed, so that the user is informed
            why they have to wait.  You can get this behavior by saying
          </para>
          <programlisting>
echo -n "Doing something very useful..."
do_something
echo "done."</programlisting>
          <para>
            in your script.
          </para>
        </listitem>
        <listitem>
          <para>
            When the configuration is reloaded
          </para>
          <para>
            When a daemon is forced to reload its configuration files you
            should use the following format:
          </para>
          <screen>
Reloading <replaceable>description</replaceable> configuration...done.</screen>
          <para>
            where <replaceable>description</replaceable> is the same as in
            the daemon starting message.
          </para>
        </listitem>
      </itemizedlist>
    </section>

    <section id="s-cron-jobs">
      <title>Cron jobs</title>

      <para>
        Packages must not modify the configuration file
        <filename>/etc/crontab</filename>, and they must not modify the
        files in <filename>/var/spool/cron/crontabs</filename>.
      </para>
      <para>
        If a package wants to install a job that has to be executed via
        cron, it should place a file named as specified in <xref
        linkend="s-cron-files"/> into one or more of the following
        directories:
      </para>
      <itemizedlist spacing="compact">
        <listitem><para><filename>/etc/cron.hourly</filename></para></listitem>
        <listitem><para><filename>/etc/cron.daily</filename></para></listitem>
        <listitem><para><filename>/etc/cron.weekly</filename></para></listitem>
        <listitem><para><filename>/etc/cron.monthly</filename></para></listitem>
      </itemizedlist>
      <para>
        As these directory names imply, the files within them are executed
        on an hourly, daily, weekly, or monthly basis, respectively.  The
        exact times are listed in <filename>/etc/crontab</filename>.
      </para>
      <para>
        All files installed in any of these directories must be scripts
        (e.g., shell scripts or Perl scripts) so that they can easily be
        modified by the local system administrator.  In addition, they
        must be treated as configuration files.
      </para>
      <para>
        If a certain job has to be executed at some other frequency or at
        a specific time, the package should install a file in
        <filename>/etc/cron.d</filename> with a name as specified in <xref
        linkend="s-cron-files"/>.  This file uses the same syntax as
        <filename>/etc/crontab</filename> and is processed by
        <command>cron</command> automatically.  The file must also be
        treated as a configuration file.  (Note that entries in the
        <filename>/etc/cron.d</filename> directory are not handled by
        <command>anacron</command>.  Thus, you should only use this
        directory for jobs which may be skipped if the system is not
        running.)
      </para>
      <para>
        Unlike <filename>crontab</filename> files described in the IEEE
        Std 1003.1-2008 (POSIX.1) available from <ulink
        url="https://www.opengroup.org/onlinepubs/9699919799/">The Open
        Group</ulink>, the files in <filename>/etc/cron.d</filename> and
        the file <filename>/etc/crontab</filename> have seven fields;
        namely:
      </para>
      <orderedlist numeration="arabic" spacing="compact">
        <listitem>
          <para>
            Minute [0,59]
          </para>
        </listitem>
        <listitem>
          <para>
            Hour [0,23]
          </para>
        </listitem>
        <listitem>
          <para>
            Day of the month [1,31]
          </para>
        </listitem>
        <listitem>
          <para>
            Month of the year [1,12]
          </para>
        </listitem>
        <listitem>
          <para>
            Day of the week ([0,6] with 0=Sunday)
          </para>
        </listitem>
        <listitem>
          <para>
            Username
          </para>
        </listitem>
        <listitem>
          <para>
            Command to be run
          </para>
        </listitem>
      </orderedlist>
      <para>
        Ranges of numbers are allowed.  Ranges are two numbers separated
        with a hyphen.  The specified range is inclusive.  Lists are
        allowed.  A list is a set of numbers (or ranges) separated by
        commas.  Step values can be used in conjunction with ranges.
      </para>
      <para>
        The scripts or <literal>crontab</literal> entries in these
        directories should check if all necessary programs are installed
        before they try to execute them.  Otherwise, problems will arise
        when a package was removed but not purged since configuration
        files are kept on the system in this situation.
      </para>
      <para>
        Any <literal>cron</literal> daemon must provide
        <filename>/usr/bin/crontab</filename> and support normal
        <literal>crontab</literal> entries as specified in POSIX.  The
        daemon must also support names for days and months, ranges, and
        step values.  It has to support <filename>/etc/crontab</filename>,
        and correctly execute the scripts in
        <filename>/etc/cron.d</filename>.  The daemon must also correctly
        execute scripts in
        <filename>/etc/cron.{hourly,daily,weekly,monthly}</filename>.
      </para>

      <section id="s-cron-files">
        <title>Cron job file names</title>

        <para>
          The file name of a cron job file should normally match the name
          of the package from which it comes.
        </para>
        <para>
          If a package supplies multiple cron job files files in the same
          directory, the file names should all start with the name of the
          package (possibly modified as described below) followed by a
          hyphen (<literal>-</literal>) and a suitable suffix.
        </para>
        <para>
          A cron job file name must not include any period or plus
          characters (<literal>.</literal> or <literal>+</literal>)
          characters as this will cause cron to ignore the file.
          Underscores (<literal>_</literal>) should be used instead of
          <literal>.</literal> and <literal>+</literal> characters.
        </para>
      </section>
    </section>

    <section id="s-menus">
      <title>Menus</title>

      <para>
        Packages shipping applications that comply with minimal
        requirements described below for integration with desktop
        environments should register these applications in the desktop
        menu, following the <emphasis>FreeDesktop</emphasis> standard,
        using text files called <emphasis>desktop entries</emphasis>.
        Their format is described in the <emphasis>Desktop Entry
        Specification</emphasis> at <ulink
        url="https://standards.freedesktop.org/desktop-entry-spec/latest/">https://standards.freedesktop.org/desktop-entry-spec/latest/</ulink>
        and complementary information can be found in the
        <emphasis>Desktop Menu Specification</emphasis> at <ulink
        url="https://standards.freedesktop.org/menu-spec/latest/">https://standards.freedesktop.org/menu-spec/latest/</ulink>.
      </para>
      <para>
        The desktop entry files are installed by the packages in the
        directory <filename>/usr/share/applications</filename> and the
        FreeDesktop menus are refreshed using <emphasis>dpkg
        triggers</emphasis>.  It is therefore not necessary to depend on
        packages providing FreeDesktop menu systems.
      </para>
      <para>
        Entries displayed in the FreeDesktop menu should conform to the
        following minima for relevance and visual integration.
      </para>
      <itemizedlist>
        <listitem>
          <para>
            Unless hidden by default, the desktop entry must point to a
            PNG or SVG icon with a transparent background, providing at
            least the 22&times;22 size, and preferably up to 64&times;64.
            The icon should be neutral enough to integrate well with the
            default icon themes.  It is encouraged to ship the icon in the
            default <emphasis>hicolor</emphasis> icon theme directories,
            or to use an existing icon from the
            <emphasis>hicolor</emphasis> theme.
          </para>
        </listitem>
        <listitem>
          <para>
            If the menu entry is not useful in the general case as a
            standalone application, the desktop entry should set the
            <literal>NoDisplay</literal> key to
            <replaceable>true</replaceable>, so that it can be configured
            to be displayed only by those who need it.
          </para>
        </listitem>
        <listitem>
          <para>
            In doubt, the package maintainer should coordinate with the
            maintainers of menu implementations through the
            <emphasis>debian-desktop</emphasis> mailing list in order to
            avoid problems with categories or bad interactions with other
            icons.  Especially for packages which are part of installation
            tasks, the contents of the
            <literal>NotShowIn</literal>/<literal>OnlyShowIn</literal>
            keys should be validated by the maintainers of the relevant
            environments.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Since the FreeDesktop menu is a cross-distribution standard, the
        desktop entries written for Debian should be forwarded upstream,
        where they will benefit to other users and are more likely to
        receive extra contributions such as translations.
      </para>
      <para>
        Packages can, to be compatible with Debian additions to some
        window managers that do not support the FreeDesktop standard, also
        provide a <emphasis>Debian menu</emphasis> file, following the
        <emphasis>Debian menu policy</emphasis>, which can be found in the
        <literal>menu-policy</literal> files in the
        <literal>debian-policy</literal> package.  It is also available
        from the Debian web mirrors at <ulink
        url="https://www.debian.org/doc/packaging-manuals/menu-policy/">https://www.debian.org/doc/packaging-manuals/menu-policy/</ulink>.
      </para>
    </section>

    <section id="s-mime">
      <title>Multimedia handlers</title>

      <para>
        Media types (formerly known as MIME types, Multipurpose Internet
        Mail Extensions, RFCs 2045-2049) is a mechanism for encoding files
        and data streams and providing meta-information about them, in
        particular their type and format (e.g.
        <literal>image/png</literal>, <literal>text/html</literal>,
        <literal>audio/ogg</literal>).
      </para>
      <para>
        Registration of media type handlers allows programs like mail user
        agents and web browsers to invoke these handlers to view, edit or
        display media types they don't support directly.
      </para>
      <para>
        There are two overlapping systems to associate media types to
        programs which can handle them.  The <emphasis>mailcap</emphasis>
        system is found on a large number of Unix systems.  The
        <emphasis>FreeDesktop</emphasis> system is aimed at Desktop
        environments.  In Debian, FreeDesktop entries are automatically
        translated in mailcap entries, therefore packages already using
        desktop entries should not use the mailcap system directly.
      </para>

      <section id="s-media-types-freedesktop">
        <title>
          Registration of media type handlers with desktop entries
        </title>

        <para>
          Packages shipping an application able to view, edit or point to
          files of a given media type, or open links with a given URI
          scheme, should list it in the <literal>MimeType</literal> key of
          the application's <link linkend="s-menus">desktop entry</link>.
          For URI schemes, the relevant MIME types are
          <literal>x-scheme-handler/*</literal> (e.g.
          <literal>x-scheme-handler/https</literal>).
        </para>
      </section>

      <section id="s-mailcap">
        <title>Registration of media type handlers with mailcap entries</title>

        <para>
          Packages that are not using desktop entries for registration
          should install a file in
          <citerefentry><refentrytitle>mailcap</refentrytitle><manvolnum>5</manvolnum></citerefentry>
          format (RFC 1524) in the directory
          <filename>/usr/lib/mime/packages/</filename>.  The file name
          should be the binary package's name.
        </para>
        <para>
          The <systemitem role="package">mime-support</systemitem> package
          provides the <command>update-mime</command> program, which
          integrates these registrations in the
          <filename>/etc/mailcap</filename> file, using dpkg
          triggers.
          <footnote>
            <para>
              Creating, modifying or removing a file in
              <filename>/usr/lib/mime/packages/</filename> using
              maintainer scripts will not activate the trigger.  In that
              case, it can be done by calling <literal>dpkg-trigger
              --no-await /usr/lib/mime/packages</literal> from the
              maintainer script after creating, modifying, or removing the
              file.
            </para>
          </footnote>
        </para>
        <para>
          Packages installing desktop entries should not install mailcap
          entries for the same program, because the <systemitem
          role="package">mime-support</systemitem> package already reads
          desktop entries.
        </para>
        <para>
          Packages using these facilities <emphasis>should not</emphasis>
          depend on, recommend, or suggest
          <command>mime-support</command>.
        </para>
      </section>

      <section id="s-file-media-type">
        <title>Providing media types to files</title>

        <para>
          The media type of a file is discovered by inspecting the file's
          extension or its
          <citerefentry><refentrytitle>magic</refentrytitle><manvolnum>5</manvolnum></citerefentry>
          pattern, and interrogating a database associating them with
          media types.
        </para>
        <para>
          To support new associations between media types and files, their
          characteristic file extensions and magic patterns should be
          registered to the IANA (Internet Assigned Numbers Authority).
          See <ulink
          url="https://www.iana.org/assignments/media-types">https://www.iana.org/assignments/media-types</ulink>
          and RFC 6838 for details.  This information will then propagate
          to the systems discovering file media types in Debian, provided
          by the <systemitem role="package">shared-mime-info</systemitem>,
          <systemitem role="package">mime-support</systemitem> and
          <systemitem role="package">file</systemitem> packages.  If
          registration and propagation can not be waited for, support can
          be asked to the maintainers of the packages mentioned above.
        </para>
        <para>
          For files that are produced and read by a single application, it
          is also possible to declare this association to the
          <emphasis>Shared MIME Info</emphasis> system by installing in
          the directory <filename>/usr/share/mime/packages</filename> a
          file in the XML format specified at <ulink
          url="https://standards.freedesktop.org/shared-mime-info-spec/latest/">https://standards.freedesktop.org/shared-mime-info-spec/latest/</ulink>.
        </para>
      </section>
    </section>

    <section id="s9.8">
      <title>Keyboard configuration</title>

      <para>
        To achieve a consistent keyboard configuration so that all
        applications interpret a keyboard event the same way, all programs
        in the Debian distribution must be configured to comply with the
        following guidelines.
      </para>
      <para>
        The following keys must have the specified interpretations:
      </para>
      <variablelist>
        <varlistentry>
          <term><literal>&lt;--</literal></term>
          <listitem>
            <para>
              delete the character to the left of the cursor
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>Delete</literal></term>
          <listitem>
            <para>
              delete the character to the right of the cursor
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>Control+H</literal></term>
          <listitem>
            <para>
              emacs: the help prefix
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>
        The interpretation of any keyboard events should be independent of
        the terminal that is used, be it a virtual console, an X terminal
        emulator, an rlogin/telnet session, etc.
      </para>
      <para>
        The following list explains how the different programs should be
        set up to achieve this:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <literal>&lt;--</literal> generates
            <literal>KB_BackSpace</literal> in X.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>Delete</literal> generates
            <literal>KB_Delete</literal> in X.
          </para>
        </listitem>
        <listitem>
          <para>
            X translations are set up to make
            <literal>KB_Backspace</literal> generate ASCII DEL, and to
            make <literal>KB_Delete</literal> generate <literal>ESC [ 3
            ~</literal> (this is the vt220 escape code for the "delete
            character" key).  This must be done by loading the X resources
            using <command>xrdb</command> on all local X displays, not
            using the application defaults, so that the translation
            resources used correspond to the <command>xmodmap</command>
            settings.
          </para>
        </listitem>
        <listitem>
          <para>
            The Linux console is configured to make
            <literal>&lt;--</literal> generate DEL, and
            <literal>Delete</literal> generate <literal>ESC [ 3
            ~</literal>.
          </para>
        </listitem>
        <listitem>
          <para>
            X applications are configured so that <literal>&lt;</literal>
            deletes left, and <literal>Delete</literal> deletes right.
            Motif applications already work like this.
          </para>
        </listitem>
        <listitem>
          <para>
            Terminals should have <literal>stty erase ^?</literal> .
          </para>
        </listitem>
        <listitem>
          <para>
            The <literal>xterm</literal> terminfo entry should have
            <literal>ESC [ 3 ~</literal> for <literal>kdch1</literal>,
            just as for <literal>TERM=linux</literal> and
            <literal>TERM=vt220</literal>.
          </para>
        </listitem>
        <listitem>
          <para>
            Emacs is programmed to map <literal>KB_Backspace</literal> or
            the <literal>stty erase</literal> character to
            <literal>delete-backward-char</literal>, and
            <literal>KB_Delete</literal> or <literal>kdch1</literal> to
            <literal>delete-forward-char</literal>, and
            <literal>^H</literal> to <literal>help</literal> as always.
          </para>
        </listitem>
        <listitem>
          <para>
            Other applications use the <literal>stty erase</literal>
            character and <literal>kdch1</literal> for the two delete
            keys, with ASCII DEL being "delete previous character" and
            <literal>kdch1</literal> being "delete character under
            cursor".
          </para>
        </listitem>
      </itemizedlist>
      <para>
        This will solve the problem except for the following cases:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            Some terminals have a <literal>&lt;--</literal> key that
            cannot be made to produce anything except
            <literal>^H</literal>.  On these terminals Emacs help will be
            unavailable on <literal>^H</literal> (assuming that the
            <literal>stty erase</literal> character takes precedence in
            Emacs, and has been set correctly).  <literal>M-x
            help</literal> or <literal>F1</literal> (if available) can be
            used instead.
          </para>
        </listitem>
        <listitem>
          <para>
            Some operating systems use <literal>^H</literal> for
            <literal>stty erase</literal>.  However, modern telnet
            versions and all rlogin versions propagate
            <literal>stty</literal> settings, and almost all UNIX versions
            honour <literal>stty erase</literal>.  Where the
            <literal>stty</literal> settings are not propagated correctly,
            things can be made to work by using <literal>stty</literal>
            manually.
          </para>
        </listitem>
        <listitem>
          <para>
            Some systems (including previous Debian versions) use
            <command>xmodmap</command> to arrange for both
            <literal>&lt;--</literal> and <literal>Delete</literal> to
            generate <literal>KB_Delete</literal>.  We can change the
            behavior of their X clients using the same X resources that we
            use to do it for our own clients, or configure our clients
            using their resources when things are the other way around.
            On displays configured like this <literal>Delete</literal>
            will not work, but <literal>&lt;--</literal> will.
          </para>
        </listitem>
        <listitem>
          <para>
            Some operating systems have different <literal>kdch1</literal>
            settings in their <literal>terminfo</literal> database for
            <literal>xterm</literal> and others.  On these systems the
            <literal>Delete</literal> key will not work correctly when you
            log in from a system conforming to our policy, but
            <literal>&lt;--</literal> will.
          </para>
        </listitem>
      </itemizedlist>
    </section>

    <section id="s9.9">
      <title>Environment variables</title>

      <para>
        Programs installed on the system PATH (<filename>/bin</filename>,
        <filename>/usr/bin</filename>, <filename>/sbin</filename>,
        <filename>/usr/sbin</filename>, or similar directories) must not
        depend on custom environment variable settings to get reasonable
        defaults.  This is because such environment variables would have
        to be set in a system-wide configuration file such as a file in
        <filename>/etc/profile.d</filename>, which is not supported by all
        shells.
      </para>
      <para>
        If a program usually depends on environment variables for its
        configuration, the program should be changed to fall back to a
        reasonable default configuration if these environment variables
        are not present.  If this cannot be done easily (e.g., if the
        source code of a non-free program is not available), the program
        must be replaced by a small "wrapper" shell script that sets the
        environment variables if they are not already defined, and calls
        the original program.
      </para>
      <para>
        Here is an example of a wrapper script for this purpose:
      </para>
      <programlisting>
#!/bin/sh
BAR=${BAR:-/var/lib/fubar}
export BAR
exec /usr/lib/foo/foo "$@"</programlisting>
    </section>

    <section id="s-doc-base">
      <title>Registering Documents using doc-base</title>

      <para>
        The <systemitem role="package">doc-base</systemitem> package
        implements a flexible mechanism for handling and presenting
        documentation.  The recommended practice is for every Debian
        package that provides online documentation (other than just manual
        pages) to register these documents with <systemitem
        role="package">doc-base</systemitem> by installing a <systemitem
        role="package">doc-base</systemitem> control file in
        <filename>/usr/share/doc-base/</filename>.
      </para>
      <para>
        Please refer to the documentation that comes with the <systemitem
        role="package">doc-base</systemitem> package for information and
        details.
      </para>
    </section>

    <section id="s-alternateinit">
      <title>Alternate init systems</title>

      <para>
        A number of other init systems are available now in Debian that
        can be used in place of <systemitem
        role="package">sysvinit</systemitem>.  Alternative init
        implementations must support running SysV init scripts as
        described at <xref linkend="s-sysvinit"/> for compatibility.
      </para>
      <para>
        Packages may integrate with these replacement init systems by
        providing implementation-specific configuration information about
        how and when to start a service or in what order to run certain
        tasks at boot time.  However, any package integrating with other
        init systems must also be backwards-compatible with <systemitem
        role="package">sysvinit</systemitem> by providing a SysV-style
        init script with the same name as and equivalent functionality to
        any init-specific job, as this is the only start-up configuration
        method guaranteed to be supported by all init implementations.  An
        exception to this rule is scripts or jobs provided by the init
        implementation itself; such jobs may be required for an
        implementation-specific equivalent of the
        <filename>/etc/rcS.d/</filename> scripts and may not have a
        one-to-one correspondence with the init scripts.
      </para>

      <section id="s-upstart">
        <title>Event-based boot with upstart</title>

        <para>
          The <command>upstart</command> event-based boot system is no
          longer maintained in Debian, so this section has been removed.
        </para>
      </section>
    </section>
  </chapter>

  <chapter id="ch-files">
    <title>Files</title>

    <section id="s-binaries">
      <title>Binaries</title>

      <para>
        Two different packages must not install programs with different
        functionality but with the same filenames.  (The case of two
        programs having the same functionality but different
        implementations is handled via "alternatives" or the "Conflicts"
        mechanism.  See <xref linkend="s-maintscripts"/> and <xref
        linkend="s-conflicts"/> respectively.) If this case happens, one
        of the programs must be renamed.  The maintainers should report
        this to the <literal>debian-devel</literal> mailing list and try
        to find a consensus about which program will have to be renamed.
        If a consensus cannot be reached, <emphasis>both</emphasis>
        programs must be renamed.
      </para>
      <para>
        To support merged-<filename>/usr</filename> systems, packages must
        not install files in both
        <filename>/<replaceable>path</replaceable></filename> and
        <filename>/usr/<replaceable>path</replaceable></filename>.  For
        example, a package may not install both
        <filename>/bin/example</filename> and
        <filename>/usr/bin/example</filename>.
      </para>
      <para>
        If a file is moved between
        <filename>/<replaceable>path</replaceable></filename> and
        <filename>/usr/<replaceable>path</replaceable></filename> in
        revisions of a Debian package, and a compatibility symlink at the
        old path is needed, the symlink must be managed in a way that will
        not break when
        <filename>/<replaceable>path</replaceable></filename> and
        <filename>/usr/<replaceable>path</replaceable></filename> are the
        same underlying directory due to symlinks or other mechanisms.
      </para>
      <para>
        Binary executables must not be statically linked with the GNU C
        library, since this prevents the binary from benefiting from fixes
        and improvements to the C library without being rebuilt and
        complicates security updates.  This requirement may be relaxed for
        binary executables whose intended purpose is to diagnose and fix
        the system in situations where the GNU C library may not be usable
        (such as system recovery shells or utilities like ldconfig) or for
        binary executables where the security benefits of static linking
        outweigh the drawbacks.
      </para>
      <para>
        By default, when a package is being built, any binaries created
        should include debugging information, as well as being compiled
        with optimization.  You should also turn on as many reasonable
        compilation warnings as possible; this makes life easier for
        porters, who can then look at build logs for possible problems.
        For the C programming language, this means the following
        compilation parameters should be used:
      </para>
      <programlisting>
CC = gcc
CFLAGS = -O2 -g -Wall # sane warning options vary between programs
LDFLAGS = # none
INSTALL = install -s # (or use strip on the files in debian/tmp)</programlisting>
      <para>
        Note that by default all installed binaries should be stripped,
        either by using the <literal>-s</literal> flag to
        <command>install</command>, or by calling <command>strip</command>
        on the binaries after they have been copied into
        <filename>debian/tmp</filename> but before the tree is made into a
        package.
      </para>
      <para>
        Although binaries in the build tree should be compiled with
        debugging information by default, it can often be difficult to
        debug programs if they are also subjected to compiler
        optimization.  For this reason, it is recommended to support the
        standardized environment variable
        <literal>DEB_BUILD_OPTIONS</literal> (see <xref
        linkend="s-debianrules-options"/>).  This variable can contain
        several flags to change how a package is compiled and built.
      </para>
      <para>
        It is up to the package maintainer to decide what compilation
        options are best for the package.  Certain binaries (such as
        computationally-intensive programs) will function better with
        certain flags (<literal>-O3</literal>, for example); feel free to
        use them.  Please use good judgment here.  Don't use flags for the
        sake of it; only use them if there is good reason to do so.  Feel
        free to override the upstream author's ideas about which
        compilation options are best:  they are often inappropriate for
        our environment.
      </para>
    </section>

    <section id="s-libraries">
      <title>Libraries</title>

      <para>
        If the package is <emphasis role="strong">architecture:
        any</emphasis>, then the shared library compilation and linking
        flags must have <literal>-fPIC</literal>, or the package shall not
        build on some of the supported architectures.
        <footnote>
          <para>
            If you are using GCC, <literal>-fPIC</literal> produces code
            with relocatable position independent code, which is required
            for most architectures to create a shared library, with i386
            and perhaps some others where non position independent code is
            permitted in a shared library.  </para> <para> Position
            independent code may have a performance penalty, especially on
            <literal>i386</literal>.  However, in most cases the speed
            penalty must be measured against the memory wasted on the few
            architectures where non position independent code is even
            possible.
          </para>
        </footnote>
        Any exception to this rule must be discussed on the mailing list
        <emphasis>debian-devel@lists.debian.org</emphasis>, and a rough
        consensus obtained.  The reasons for not compiling with
        <literal>-fPIC</literal> flag must be recorded in the file
        <literal>README.Debian</literal>, and care must be taken to either
        restrict the architecture or arrange for <literal>-fPIC</literal>
        to be used on architectures where it is required.
        <footnote>
          <para>
            Some of the reasons why this might be required is if the
            library contains hand crafted assembly code that is not
            relocatable, the speed penalty is excessive for compute
            intensive libs, and similar reasons.
          </para>
        </footnote>
      </para>
      <para>
        As to the static libraries, the common case is not to have
        relocatable code, since there is no benefit, unless in specific
        cases; therefore the static version must not be compiled with the
        <literal>-fPIC</literal> flag.  Any exception to this rule should
        be discussed on the mailing list
        <emphasis>debian-devel@lists.debian.org</emphasis>, and the
        reasons for compiling with the <literal>-fPIC</literal> flag must
        be recorded in the file <literal>README.Debian</literal>.
        <footnote>
          <para>
            Some of the reasons for linking static libraries with the
            <literal>-fPIC</literal> flag are if, for example, one needs a
            Perl API for a library that is under rapid development, and
            has an unstable API, so shared libraries are pointless at this
            phase of the library's development.  In that case, since Perl
            needs a library with relocatable code, it may make sense to
            create a static library with relocatable code.  Another reason
            cited is if you are distilling various libraries into a common
            shared library, like <literal>mklibs</literal> does in the
            Debian installer project.
          </para>
        </footnote>
      </para>
      <para>
        In other words, if both a shared and a static library is being
        built, each source unit (<literal>*.c</literal>, for example, for
        C files) will need to be compiled twice, for the normal case.
      </para>
      <para>
        Libraries should be built with threading support and to be
        thread-safe if the library supports this.
      </para>
      <para>
        Although not enforced by the build tools, shared libraries must be
        linked against all libraries that they use symbols from in the
        same way that binaries are.  This ensures the correct functioning
        of the <link linkend="s-sharedlibs-symbols">symbols</link> and
        <link linkend="s-sharedlibs-shlibdeps">shlibs</link> systems and
        guarantees that all libraries can be safely opened with
        <literal>dlopen()</literal>.  Packagers may wish to use the gcc
        option <literal>-Wl,-z,defs</literal> when building a shared
        library.  Since this option enforces symbol resolution at build
        time, a missing library reference will be caught early as a fatal
        build error.
      </para>
      <para>
        All installed shared libraries should be stripped with
      </para>
      <screen>
strip --strip-unneeded <replaceable>your-lib</replaceable></screen>
      <para>
        (The option <literal>--strip-unneeded</literal> makes
        <command>strip</command> remove only the symbols which aren't
        needed for relocation processing.) Shared libraries can function
        perfectly well when stripped, since the symbols for dynamic
        linking are in a separate part of the ELF object
        file.
        <footnote>
          <para>
            You might also want to use the options
            <literal>--remove-section=.comment</literal> and
            <literal>--remove-section=.note</literal> on both shared
            libraries and executables, and
            <literal>--strip-debug</literal> on static libraries.
          </para>
        </footnote>
      </para>
      <para>
        Note that under some circumstances it may be useful to install a
        shared library unstripped, for example when building a separate
        package to support debugging.
      </para>
      <para>
        Shared object files (often <filename>.so</filename> files) that
        are not public libraries, that is, they are not meant to be linked
        to by third party executables (binaries of other packages), should
        be installed in subdirectories of the
        <filename>/usr/lib</filename> directory.  Such files are exempt
        from the rules that govern ordinary shared libraries, except that
        they must not be installed executable and should be
        stripped.<footnote><para> A common example are the so-called
        "plug-ins", internal shared objects that are dynamically loaded by
        programs using
        <citerefentry><refentrytitle>dlopen</refentrytitle><manvolnum>3</manvolnum></citerefentry>.
        </para> </footnote>
      </para>
      <para>
        Packages that use <command>libtool</command> to create and install
        their shared libraries install a file containing additional
        metadata (ending in <filename>.la</filename>) alongside the
        library.  For public libraries intended for use by other packages,
        these files normally should not be included in the Debian package,
        since the information they include is not necessary to link with
        the shared library on Debian and can add unnecessary additional
        dependencies to other programs or libraries.
        <footnote>
          <para>
            These files store, among other things, all libraries on which
            that shared library depends.  Unfortunately, if the
            <filename>.la</filename> file is present and contains that
            dependency information, using <command>libtool</command> when
            linking against that library will cause the resulting program
            or library to be linked against those dependencies as well,
            even if this is unnecessary.  This can create unneeded
            dependencies on shared library packages that would otherwise
            be hidden behind the library ABI, and can make library
            transitions to new SONAMEs unnecessarily complicated and
            difficult to manage.
          </para>
        </footnote>
        If the <filename>.la</filename> file is required for that library
        (if, for instance, it's loaded via <literal>libltdl</literal> in a
        way that requires that meta-information), the
        <literal>dependency_libs</literal> setting in the
        <filename>.la</filename> file should normally be set to the empty
        string.  If the shared library development package has
        historically included the <filename>.la</filename>, it must be
        retained in the development package (with
        <literal>dependency_libs</literal> emptied) until all libraries
        that depend on it have removed or emptied
        <literal>dependency_libs</literal> in their
        <filename>.la</filename> files to prevent linking with those other
        libraries using <command>libtool</command> from failing.
      </para>
      <para>
        If the <filename>.la</filename> must be included, it should be
        included in the development (<literal>-dev</literal>) package,
        unless the library will be loaded by <command>libtool</command>'s
        <literal>libltdl</literal> library.  If it is intended for use
        with <literal>libltdl</literal>, the <filename>.la</filename>
        files must go in the run-time library package.
      </para>
      <para>
        These requirements for handling of <filename>.la</filename> files
        do not apply to loadable modules or libraries not installed in
        directories searched by default by the dynamic linker.  Packages
        installing loadable modules will frequently need to install the
        <filename>.la</filename> files alongside the modules so that they
        can be loaded by <literal>libltdl</literal>.
        <literal>dependency_libs</literal> does not need to be modified
        for libraries or modules that are not installed in directories
        searched by the dynamic linker by default and not intended for use
        by other packages.
      </para>
      <para>
        You must make sure that you use only released versions of shared
        libraries to build your packages; otherwise other users will not
        be able to run your binaries properly.  Producing source packages
        that depend on unreleased compilers is also usually a bad idea.
      </para>
    </section>

    <section id="s10.3">
      <title>Shared libraries</title>

      <para>
        This section has moved to <xref linkend="ch-sharedlibs"/>.
      </para>
    </section>

    <section id="s-scripts">
      <title>Scripts</title>

      <para>
        All command scripts, including the package maintainer scripts
        inside the package and used by <command>dpkg</command>, should
        have a <literal>#!</literal> line naming the shell to be used to
        interpret them.
      </para>
      <para>
        In the case of Perl scripts this should be
        <literal>#!/usr/bin/perl</literal>.
      </para>
      <para>
        When scripts are installed into a directory in the system PATH,
        the script name should not include an extension such as
        <literal>.sh</literal> or <literal>.pl</literal> that denotes the
        scripting language currently used to implement it.
      </para>
      <para>
        Shell scripts (<command>sh</command> and <command>bash</command>)
        other than <filename>init.d</filename> scripts should almost
        certainly start with <literal>set -e</literal> so that errors are
        detected.  <filename>init.d</filename> scripts are something of a
        special case, due to how frequently they need to call commands
        that are allowed to fail, and it may instead be easier to check
        the exit status of commands directly.  See <xref
        linkend="s-writing-init"/> for more information about writing
        <filename>init.d</filename> scripts.
      </para>
      <para>
        Every script should use <literal>set -e</literal> or check the
        exit status of <emphasis>every</emphasis> command.
      </para>
      <para>
        Scripts may assume that <filename>/bin/sh</filename> implements
        the SUSv3 Shell Command Language
        <footnote>
          <para>
            Single UNIX Specification, version 3, which is also IEEE
            1003.1-2004 (POSIX), and is available on the World Wide Web
            from <ulink url="http://www.unix.org/version3/online.html">The
            Open Group</ulink> after free registration.
          </para>
        </footnote>
        plus the following additional features not mandated by
        SUSv3:
        <footnote>
          <para>
            These features are in widespread use in the Linux community
            and are implemented in all of bash, dash, and ksh, the most
            common shells users may wish to use as
            <filename>/bin/sh</filename>.
          </para>
        </footnote>
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <literal>echo -n</literal>, if implemented as a shell
            built-in, must not generate a newline.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>test</literal>, if implemented as a shell built-in,
            must support <literal>-a</literal> and <literal>-o</literal>
            as binary logical operators.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>local</literal> to create a scoped variable must be
            supported, including listing multiple variables in a single
            local command and assigning a value to a variable at the same
            time as localizing it.  <literal>local</literal> may or may
            not preserve the variable value from an outer scope if no
            assignment is present.  Uses such as:
          </para>
          <programlisting>
fname () {
    local a b c=delta d
    # ... use a, b, c, d ...
}</programlisting>
          <para>
            must be supported and must set the value of
            <literal>c</literal> to <literal>delta</literal>.
          </para>
        </listitem>
        <listitem>
          <para>
            The XSI extension to <command>kill</command> allowing
            <literal>kill -<replaceable>signal</replaceable></literal>,
            where <replaceable>signal</replaceable> is either the name of
            a signal or one of the numeric signals listed in the XSI
            extension (0, 1, 2, 3, 6, 9, 14, and 15), must be supported if
            <command>kill</command> is implemented as a shell built-in.
          </para>
        </listitem>
        <listitem>
          <para>
            The XSI extension to <command>trap</command> allowing numeric
            signals must be supported.  In addition to the signal numbers
            listed in the extension, which are the same as for
            <command>kill</command> above, 13 (SIGPIPE) must be allowed.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        If a shell script requires non-SUSv3 features from the shell
        interpreter other than those listed above, the appropriate shell
        must be specified in the first line of the script (e.g.,
        <literal>#!/bin/bash</literal>) and the package must depend on the
        package providing the shell (unless the shell package is marked
        "Essential", as in the case of <command>bash</command>).
      </para>
      <para>
        You may wish to restrict your script to SUSv3 features plus the
        above set when possible so that it may use
        <filename>/bin/sh</filename> as its interpreter.  Checking your
        script with <command>checkbashisms</command> from the <systemitem
        role="package">devscripts</systemitem> package or running your
        script with an alternate shell such as <command>posh</command> may
        help uncover violations of the above requirements.  If in doubt
        whether a script complies with these requirements, use
        <filename>/bin/bash</filename>.
      </para>
      <para>
        Perl scripts should check for errors when making any system calls,
        including <literal>open</literal>, <literal>print</literal>,
        <literal>close</literal>, <literal>rename</literal> and
        <literal>system</literal>.
      </para>
      <para>
        <command>csh</command> and <command>tcsh</command> should be
        avoided as scripting languages.  See <emphasis>Csh Programming
        Considered Harmful</emphasis>, one of the
        <literal>comp.unix.*</literal> FAQs, which can be found at <ulink
        url="http://www.faqs.org/faqs/unix-faq/shell/csh-whynot/">http://www.faqs.org/faqs/unix-faq/shell/csh-whynot/</ulink>.
        If an upstream package comes with <command>csh</command> scripts
        then you must make sure that they start with
        <literal>#!/bin/csh</literal> and make your package depend on the
        <command>c-shell</command> virtual package.
      </para>
      <para>
        Any scripts which create files in world-writeable directories
        (e.g., in <filename>/tmp</filename>) must use a mechanism which
        will fail atomically if a file with the same name already exists.
      </para>
      <para>
        The Debian base system provides the <command>tempfile</command>
        and <command>mktemp</command> utilities for use by scripts for
        this purpose.
      </para>
    </section>

    <section id="s10.5">
      <title>Symbolic links</title>

      <para>
        In general, symbolic links within a top-level directory should be
        relative, and symbolic links pointing from one top-level directory
        to or into another should be absolute.  (A top-level directory is
        a sub-directory of the root directory <filename>/</filename>.) For
        example, a symbolic link from <filename>/usr/lib/foo</filename> to
        <filename>/usr/share/bar</filename> should be relative
        (<filename>../share/bar</filename>), but a symbolic link from
        <filename>/var/run</filename> to <filename>/run</filename> should
        be absolute.
        <footnote>
          <para>
            This is necessary to allow top-level directories to be
            symlinks.  If linking <filename>/var/run</filename> to
            <filename>/run</filename> were done with the relative symbolic
            link <filename>../run</filename>, but
            <filename>/var</filename> were a symbolic link to
            <filename>/srv/disk1</filename>, the symbolic link would point
            to <filename>/srv/run</filename> rather than the intended
            target.
          </para>
        </footnote>
        Symbolic links must not traverse above the root directory.
      </para>
      <para>
        In addition, symbolic links should be specified as short as
        possible, i.e., link targets like <filename>foo/../bar</filename>
        are deprecated.
      </para>
      <para>
        Note that when creating a relative link using
        <command>ln</command> it is not necessary for the target of the
        link to exist relative to the working directory you're running
        <command>ln</command> from, nor is it necessary to change
        directory to the directory where the link is to be made.  Simply
        include the string that should appear as the target of the link
        (this will be a pathname relative to the directory in which the
        link resides) as the first argument to <command>ln</command>.
      </para>
      <para>
        For example, in your <command>Makefile</command> or
        <filename>debian/rules</filename>, you can do things like:
      </para>
      <programlisting>
ln -fs gcc $(prefix)/bin/cc
ln -fs gcc debian/tmp/usr/bin/cc
ln -fs ../sbin/sendmail $(prefix)/bin/runq
ln -fs ../sbin/sendmail debian/tmp/usr/bin/runq</programlisting>
      <para>
        A symbolic link pointing to a compressed file (in the sense that
        it is meant to be uncompressed with <command>unzip</command> or
        <command>zless</command> etc.)  should always have the same file
        extension as the referenced file.  (For example, if a file
        <filename>foo.gz</filename> is referenced by a symbolic link, the
        filename of the link has to end with "<filename>.gz</filename>"
        too, as in <filename>bar.gz</filename>.)
      </para>
    </section>

    <section id="s10.6">
      <title>Device files</title>

      <para>
        Packages must not include device files or named pipes in the
        package file tree.
      </para>
      <para>
        Debian packages should assume that device files in
        <filename>/dev</filename> are dynamically managed by the kernel or
        some other system facility and do not have to be explicitly
        created or managed by the package.  Debian packages other than
        those whose purpose is to manage the <filename>/dev</filename>
        device file tree must not attempt to create or remove device files
        in <filename>/dev</filename> when a dynamic device management
        facility is in use.
      </para>
      <para>
        If named pipes or device files outside of
        <filename>/dev</filename> are required by a package, they should
        normally be created when necessary by the programs in the package,
        by init scripts or systemd unit files, or by similar on-demand
        mechanisms.  If such files need to be created during package
        installation, they must be created in the
        <command>postinst</command> maintainer script
        <footnote>
          <para>
            It's better to use <command>mkfifo</command> rather than
            <command>mknod</command> to create named pipes to avoid false
            positives from automated checks for packages incorrectly
            creating device files.
          </para>
        </footnote>
        and removed in either the <command>prerm</command> or the
        <command>postrm</command> maintainer script.
      </para>
    </section>

    <section id="s-config-files">
      <title>Configuration files</title>

      <section id="s10.7.1">
        <title>Definitions</title>

        <variablelist>
          <varlistentry>
            <term>configuration file</term>
            <listitem>
              <para>
                A file that affects the operation of a program, or
                provides site- or host-specific information, or otherwise
                customizes the behavior of a program.  Typically,
                configuration files are intended to be modified by the
                system administrator (if needed or desired) to conform to
                local policy or to provide more useful site-specific
                behavior.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>conffile</literal></term>
            <listitem>
              <para>
                A file listed in a package's <literal>conffiles</literal>
                file, and is treated specially by <command>dpkg</command>
                (see <xref linkend="s-configdetails"/>).
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
        <para>
          The distinction between these two is important; they are not
          interchangeable concepts.  Almost all
          <literal>conffile</literal>s are configuration files, but many
          configuration files are not <literal>conffiles</literal>.
        </para>
        <para>
          As noted elsewhere, <filename>/etc/init.d</filename> scripts,
          <filename>/etc/default</filename> files, scripts installed in
          <filename>/etc/cron.{hourly,daily,weekly,monthly}</filename>,
          and cron configuration installed in
          <filename>/etc/cron.d</filename> must be treated as
          configuration files.  In general, any script that embeds
          configuration information is de-facto a configuration file and
          should be treated as such.
        </para>
      </section>

      <section id="s10.7.2">
        <title>Location</title>

        <para>
          Any configuration files created or used by your package must
          reside in <filename>/etc</filename>.  If there are several,
          consider creating a subdirectory of <filename>/etc</filename>
          named after your package.
        </para>
        <para>
          If your package creates or uses configuration files outside of
          <filename>/etc</filename>, and it is not feasible to modify the
          package to use <filename>/etc</filename> directly, put the files
          in <filename>/etc</filename> and create symbolic links to those
          files from the location that the package requires.
        </para>
      </section>

      <section id="s10.7.3">
        <title>Behavior</title>

        <para>
          Configuration file handling must conform to the following
          behavior:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              local changes must be preserved during a package upgrade,
              and
            </para>
          </listitem>
          <listitem>
            <para>
              configuration files must be preserved when the package is
              removed, and only deleted when the package is purged.
            </para>
          </listitem>
        </itemizedlist>
        <para>
          Obsolete configuration files without local changes should be
          removed by the package during upgrade.
          <footnote>
            <para>
              The <command>dpkg-maintscript-helper</command> tool,
              available from the <systemitem
              role="package">dpkg</systemitem> package, can help for this
              task.
            </para>
          </footnote>
        </para>
        <para>
          The easy way to achieve this behavior is to make the
          configuration file a <literal>conffile</literal>.  This is
          appropriate only if it is possible to distribute a default
          version that will work for most installations, although some
          system administrators may choose to modify it.  This implies
          that the default version will be part of the package
          distribution, and must not be modified by the maintainer scripts
          during installation (or at any other time).
        </para>
        <para>
          In order to ensure that local changes are preserved correctly,
          no package may contain or make hard links to
          conffiles.<footnote><para> Rationale: There are two problems
          with hard links.  The first is that some editors break the link
          while editing one of the files, so that the two files may
          unwittingly become unlinked and different.  The second is that
          <command>dpkg</command> might break the hard link while
          upgrading <literal>conffile</literal>s.  </para>
        </footnote>
        </para>
        <para>
          The other way to do it is via the maintainer scripts.  In this
          case, the configuration file must not be listed as a
          <literal>conffile</literal> and must not be part of the package
          distribution.  If the existence of a file is required for the
          package to be sensibly configured it is the responsibility of
          the package maintainer to provide maintainer scripts which
          correctly create, update and maintain the file and remove it on
          purge.  (See <xref linkend="ch-maintainerscripts"/> for more
          information.) These scripts must be idempotent (i.e., must work
          correctly if <command>dpkg</command> needs to re-run them due to
          errors during installation or removal), must cope with all the
          variety of ways <command>dpkg</command> can call maintainer
          scripts, must not overwrite or otherwise mangle the user's
          configuration without asking, must not ask unnecessary questions
          (particularly during upgrades), and must otherwise be good
          citizens.
        </para>
        <para>
          The scripts are not required to configure every possible option
          for the package, but only those necessary to get the package
          running on a given system.  Ideally the sysadmin should not have
          to do any configuration other than that done
          (semi-)automatically by the <command>postinst</command> script.
        </para>
        <para>
          A common practice is to create a script called
          <filename><replaceable>package</replaceable>-configure</filename>
          and have the package's <command>postinst</command> call it if
          and only if the configuration file does not already exist.  In
          certain cases it is useful for there to be an example or
          template file which the maintainer scripts use.  Such files
          should be in
          <filename>/usr/share/<replaceable>package</replaceable></filename>
          or
          <filename>/usr/lib/<replaceable>package</replaceable></filename>
          (depending on whether they are architecture-independent or not).
          There should be symbolic links to them from
          <filename>/usr/share/doc/<replaceable>package</replaceable>/examples</filename>
          if they are examples, and should be perfectly ordinary
          <command>dpkg</command>-handled files (<emphasis>not</emphasis>
          configuration files).
        </para>
        <para>
          These two styles of configuration file handling must not be
          mixed, for that way lies madness: <command>dpkg</command> will
          ask about overwriting the file every time the package is
          upgraded.
        </para>
      </section>

      <section id="s10.7.4">
        <title>Sharing configuration files</title>

        <para>
          If two or more packages use the same configuration file and it
          is reasonable for both to be installed at the same time, one of
          these packages must be defined as <emphasis>owner</emphasis> of
          the configuration file, i.e., it will be the package which
          handles that file as a configuration file.  Other packages that
          use the configuration file must depend on the owning package if
          they require the configuration file to operate.  If the other
          package will use the configuration file if present, but is
          capable of operating without it, no dependency need be declared.
        </para>
        <para>
          If it is desirable for two or more related packages to share a
          configuration file <emphasis>and</emphasis> for all of the
          related packages to be able to modify that configuration file,
          then the following should be done:
        </para>
        <orderedlist numeration="arabic">
          <listitem>
            <para>
              One of the related packages (the "owning" package) will
              manage the configuration file with maintainer scripts as
              described in the previous section.
            </para>
          </listitem>
          <listitem>
            <para>
              The owning package should also provide a program that the
              other packages may use to modify the configuration file.
            </para>
          </listitem>
          <listitem>
            <para>
              The related packages must use the provided program to make
              any desired modifications to the configuration file.  They
              should either depend on the core package to guarantee that
              the configuration modifier program is available or accept
              gracefully that they cannot modify the configuration file if
              it is not.  (This is in addition to the fact that the
              configuration file may not even be present in the latter
              scenario.)
            </para>
          </listitem>
        </orderedlist>
        <para>
          Sometimes it's appropriate to create a new package which
          provides the basic infrastructure for the other packages and
          which manages the shared configuration files.  (The
          <literal>sgml-base</literal> package is a good example.)
        </para>
        <para>
          If the configuration file cannot be shared as described above,
          the packages must be marked as conflicting with each other.  Two
          packages that specify the same file as a
          <literal>conffile</literal> must conflict.  This is an instance
          of the general rule about not sharing files.  Neither
          alternatives nor diversions are likely to be appropriate in this
          case; in particular, <command>dpkg</command> does not handle
          diverted <literal>conffile</literal>s well.
        </para>
        <para>
          When two packages both declare the same
          <literal>conffile</literal>, they may see left-over
          configuration files from each other even though they conflict
          with each other.  If a user removes (without purging) one of the
          packages and installs the other, the new package will take over
          the <literal>conffile</literal> from the old package.  If the
          file was modified by the user, it will be treated the same as
          any other locally modified <literal>conffile</literal> during an
          upgrade.
        </para>
        <para>
          The maintainer scripts must not alter a
          <literal>conffile</literal> of <emphasis>any</emphasis> package,
          including the one the scripts belong to.
        </para>
      </section>

      <section id="s10.7.5">
        <title>User configuration files ("dotfiles")</title>

        <para>
          The files in <filename>/etc/skel</filename> will automatically
          be copied into new user accounts by <command>adduser</command>.
          No other program should reference the files in
          <filename>/etc/skel</filename>.
        </para>
        <para>
          Therefore, if a program needs a dotfile to exist in advance in
          <filename>$HOME</filename> to work sensibly, that dotfile should
          be installed in <filename>/etc/skel</filename> and treated as a
          configuration file.
        </para>
        <para>
          However, programs that require dotfiles in order to operate
          sensibly are a bad thing, unless they do create the dotfiles
          themselves automatically.
        </para>
        <para>
          Furthermore, programs should be configured by the Debian default
          installation to behave as closely to the upstream default
          behavior as possible.
        </para>
        <para>
          Therefore, if a program in a Debian package needs to be
          configured in some way in order to operate sensibly, that should
          be done using a site-wide configuration file placed in
          <filename>/etc</filename>.  Only if the program doesn't support
          a site-wide default configuration and the package maintainer
          doesn't have time to add it may a default per-user file be
          placed in <filename>/etc/skel</filename>.
        </para>
        <para>
          <filename>/etc/skel</filename> should be as empty as we can make
          it.  This is particularly true because there is no easy (or
          necessarily desirable) mechanism for ensuring that the
          appropriate dotfiles are copied into the accounts of existing
          users when a package is installed.
        </para>
      </section>
    </section>

    <section id="s10.8">
      <title>Log files</title>

      <para>
        Log files should usually be named
        <filename>/var/log/<replaceable>package</replaceable>.log</filename>.
        If you have many log files, or need a separate directory for
        permission reasons (<filename>/var/log</filename> is writable only
        by <filename>root</filename>), you should usually create a
        directory named
        <filename>/var/log/<replaceable>package</replaceable></filename>
        and place your log files there.
      </para>
      <para>
        Log files must be rotated occasionally so that they don't grow
        indefinitely.  The best way to do this is to install a log
        rotation configuration file in the directory
        <filename>/etc/logrotate.d</filename>, normally named
        <filename>/etc/logrotate.d/<replaceable>package</replaceable></filename>,
        and use the facilities provided by <command>logrotate</command>.
        <footnote>
          <para>
            The traditional approach to log files has been to set up
            <emphasis>ad hoc</emphasis> log rotation schemes using simple
            shell scripts and cron.  While this approach is highly
            customizable, it requires quite a lot of sysadmin work.  Even
            though the original Debian system helped a little by
            automatically installing a system which can be used as a
            template, this was deemed not enough.
          </para>
          <para>
            The use of <command>logrotate</command>, a program developed
            by Red Hat, is better, as it centralizes log management.  It
            has both a configuration file
            (<filename>/etc/logrotate.conf</filename>) and a directory
            where packages can drop their individual log rotation
            configurations (<filename>/etc/logrotate.d</filename>).
          </para>
        </footnote>
        Here is a good example for a logrotate config file (for more
        information see
        <citerefentry><refentrytitle>logrotate</refentrytitle><manvolnum>8</manvolnum></citerefentry>):
      </para>
      <programlisting>
/var/log/foo/*.log {
    rotate 12
    weekly
    compress
    missingok
    postrotate
        start-stop-daemon -K -p /var/run/foo.pid -s HUP -x /usr/sbin/foo -q
    endscript
}</programlisting>
      <para>
        This rotates all files under <filename>/var/log/foo</filename>,
        saves 12 compressed generations, and tells the daemon to reopen
        its log files after the log rotation.  It skips this log rotation
        (via <literal>missingok</literal>) if no such log file is present,
        which avoids errors if the package is removed but not purged.
      </para>
      <para>
        Log files should be removed when the package is purged (but not
        when it is only removed).  This should be done by the
        <command>postrm</command> script when it is called with the
        argument <literal>purge</literal> (see <xref
        linkend="s-removedetails"/>).
      </para>
    </section>

    <section id="s-permissions-owners">
      <title>Permissions and owners</title>

      <para>
        The rules in this section are guidelines for general use.  If
        necessary you may deviate from the details below.  However, if you
        do so you must make sure that what is done is secure and you
        should try to be as consistent as possible with the rest of the
        system.  You should probably also discuss it on
        <command>debian-devel</command> first.
      </para>
      <para>
        Files should be owned by <literal>root:root</literal>, and made
        writable only by the owner and universally readable (and
        executable, if appropriate), that is mode 644 or 755.
      </para>
      <para>
        Directories should be mode 755 or (for group-writability) mode
        2775.  The ownership of the directory should be consistent with
        its mode: if a directory is mode 2775, it should be owned by the
        group that needs write access to it.
        <footnote>
          <para>
            When a package is upgraded, and the owner or permissions of a
            file included in the package has changed, dpkg arranges for
            the ownership and permissions to be correctly set upon
            installation.  However, this does not extend to directories;
            the permissions and ownership of directories already on the
            system does not change on install or upgrade of packages.
            This makes sense, since otherwise common directories like
            <literal>/usr</literal> would always be in flux.  To correctly
            change permissions of a directory the package owns, explicit
            action is required, usually in the <literal>postinst</literal>
            script.  Care must be taken to handle downgrades as well, in
            that case.
          </para>
        </footnote>
      </para>
      <para>
        Control information files should be owned by
        <literal>root:root</literal> and either mode 644 (for most files)
        or mode 755 (for executables such as <link
        linkend="s-maintscripts">maintainer scripts</link>).
      </para>
      <para>
        Setuid and setgid executables should be mode 4755 or 2755
        respectively, and owned by the appropriate user or group.  They
        should not be made unreadable (modes like 4711 or 2711 or even
        4111); doing so achieves no extra security, because anyone can
        find the binary in the freely available Debian package; it is
        merely inconvenient.  For the same reason you should not restrict
        read or execute permissions on non-set-id executables.
      </para>
      <para>
        Some setuid programs need to be restricted to particular sets of
        users, using file permissions.  In this case they should be owned
        by the uid to which they are set-id, and by the group which should
        be allowed to execute them.  They should have mode 4754; again
        there is no point in making them unreadable to those users who
        must not be allowed to execute them.
      </para>
      <para>
        It is possible to arrange that the system administrator can
        reconfigure the package to correspond to their local security
        policy by changing the permissions on a binary: they can do this
        by using <command>dpkg-statoverride</command>, as described
        below.
        <footnote>
          <para>
            Ordinary files installed by <command>dpkg</command> (as
            opposed to <literal>conffile</literal>s and other similar
            objects) normally have their permissions reset to the
            distributed permissions when the package is reinstalled.
            However, the use of <command>dpkg-statoverride</command>
            overrides this default behavior.
          </para>
        </footnote>
        Another method you should consider is to create a group for people
        allowed to use the program(s) and make any setuid executables
        executable only by that group.
      </para>
      <para>
        If you need to create a new user or group for your package there
        are two possibilities.  Firstly, you may need to make some files
        in the binary package be owned by this user or group, or you may
        need to compile the user or group id (rather than just the name)
        into the binary (though this latter should be avoided if possible,
        as in this case you need a statically allocated id).
      </para>
      <para>
        If you need a statically allocated id, you must ask for a user or
        group id from the <literal>base-passwd</literal> maintainer, and
        must not release the package until you have been allocated one.
        Once you have been allocated one you must either make the package
        depend on a version of the <literal>base-passwd</literal> package
        with the id present in <filename>/etc/passwd</filename> or
        <filename>/etc/group</filename>, or arrange for your package to
        create the user or group itself with the correct id (using
        <literal>adduser</literal>) in its <command>preinst</command> or
        <command>postinst</command>.  (Doing it in the
        <command>postinst</command> is to be preferred if it is possible,
        otherwise a pre-dependency will be needed on the
        <literal>adduser</literal> package.)
      </para>
      <para>
        On the other hand, the program might be able to determine the uid
        or gid from the user or group name at runtime, so that a
        dynamically allocated id can be used.  In this case you should
        choose an appropriate user or group name, discussing this on
        <command>debian-devel</command> and checking that it is unique.
        When this has been checked you must arrange for your package to
        create the user or group if necessary using
        <command>adduser</command> in the <command>preinst</command> or
        <command>postinst</command> script (again, the latter is to be
        preferred if it is possible).
      </para>
      <para>
        Note that changing the numeric value of an id associated with a
        name is very difficult, and involves searching the file system for
        all appropriate files.  You need to think carefully whether a
        static or dynamic id is required, since changing your mind later
        will cause problems.
      </para>

      <section id="s10.9.1">
        <title>The use of <command>dpkg-statoverride</command></title>

        <para>
          This section is not intended as policy, but as a description of
          the use of <command>dpkg-statoverride</command>.
        </para>
        <para>
          If a system administrator wishes to have a file (or directory or
          other such thing) installed with owner and permissions different
          from those in the distributed Debian package, they can use the
          <command>dpkg-statoverride</command> program to instruct
          <command>dpkg</command> to use the different settings every time
          the file is installed.  Thus the package maintainer should
          distribute the files with their normal permissions, and leave it
          for the system administrator to make any desired changes.  For
          example, a daemon which is normally required to be setuid root,
          but in certain situations could be used without being setuid,
          should be installed setuid in the <literal>.deb</literal>.  Then
          the local system administrator can change this if they wish.  If
          there are two standard ways of doing it, the package maintainer
          can use <literal>debconf</literal> to find out the preference,
          and call <command>dpkg-statoverride</command> in the maintainer
          script if necessary to accommodate the system administrator's
          choice.  Care must be taken during upgrades to not override an
          existing setting.
        </para>
        <para>
          Given the above, <command>dpkg-statoverride</command> is
          essentially a tool for system administrators and would not
          normally be needed in the maintainer scripts.  There is one type
          of situation, though, where calls to
          <command>dpkg-statoverride</command> would be needed in the
          maintainer scripts, and that involves packages which use
          dynamically allocated user or group ids.  In such a situation,
          something like the following idiom can be very helpful in the
          package's <command>postinst</command>, where
          <literal>sysuser</literal> is a dynamically allocated id:
        </para>
        <programlisting>
for i in /usr/bin/foo /usr/sbin/bar; do
    # only do something when no setting exists
    if ! dpkg-statoverride --list $i &gt;/dev/null 2&gt;&amp;1; then
        #include: debconf processing, question about foo and bar
        if [ "$RET" = "true" ] ; then
            dpkg-statoverride --update --add sysuser root 4755 $i
        fi
    fi
done</programlisting>
        <para>
          The corresponding code to remove the override when the package
          is purged would be:
        </para>
        <programlisting>
for i in /usr/bin/foo /usr/sbin/bar; do
    if dpkg-statoverride --list $i &gt;/dev/null 2&gt;&amp;1; then
        dpkg-statoverride --remove $i
    fi
done</programlisting>
      </section>
    </section>

    <section id="s-filenames">
      <title>File names</title>

      <para>
        The name of the files installed by binary packages in the system
        PATH (namely <literal>/bin</literal>, <literal>/sbin</literal>,
        <literal>/usr/bin</literal>, <literal>/usr/sbin</literal> and
        <literal>/usr/games</literal>) must be encoded in ASCII.
      </para>
      <para>
        The name of the files and directories installed by binary packages
        outside the system PATH must be encoded in UTF-8 and should be
        restricted to ASCII when it is possible to do so.
      </para>
    </section>
  </chapter>

  <chapter id="ch-customized-programs">
    <title>Customized programs</title>

    <section id="s-arch-spec">
      <title>Architecture specification strings</title>

      <para>
        If a program needs to specify an <emphasis>architecture
        specification string</emphasis> in some place, it should select
        one of the strings provided by <literal>dpkg-architecture
        -L</literal>.  The strings are in the format
        <literal><replaceable>os</replaceable>-<replaceable>arch</replaceable></literal>,
        though the OS part is sometimes elided, as when the OS is Linux.
      </para>
      <para>
        Note that we don't want to use
        <literal><replaceable>arch</replaceable>-debian-linux</literal> to
        apply to the rule
        <literal><replaceable>architecture</replaceable>-<replaceable>vendor</replaceable>-<replaceable>os</replaceable></literal>
        since this would make our programs incompatible with other Linux
        distributions.  We also don't use something like
        <literal><replaceable>arch</replaceable>-unknown-linux</literal>,
        since the <literal>unknown</literal> does not look very good.
      </para>

      <section id="s-arch-wildcard-spec">
        <title>Architecture wildcards</title>

        <para>
          A package may specify an architecture wildcard.  Architecture
          wildcards are in the format <literal>any</literal> (which
          matches every architecture),
          <literal><replaceable>os</replaceable></literal>-any, or
          any-<literal><replaceable>cpu</replaceable></literal>.
          <footnote><para> Internally, the package system normalizes the
          GNU triplets and the Debian arches into Debian arch triplets
          (which are kind of inverted GNU triplets), with the first
          component of the triplet representing the libc and ABI in use,
          and then does matching against those triplets.  However, such
          triplets are an internal implementation detail that should not
          be used by packages directly.  The libc and ABI portion is
          handled internally by the package system based on the
          <replaceable>os</replaceable> and
          <replaceable>cpu</replaceable>.  </para>
        </footnote>
        </para>
      </section>
    </section>

    <section id="s11.2">
      <title>Daemons</title>

      <para>
        The configuration files <filename>/etc/services</filename>,
        <filename>/etc/protocols</filename>, and
        <filename>/etc/rpc</filename> are managed by the
        <command>netbase</command> package and must not be modified by
        other packages.
      </para>
      <para>
        If a package requires a new entry in one of these files, the
        maintainer should get in contact with the
        <command>netbase</command> maintainer, who will add the entries
        and release a new version of the <command>netbase</command>
        package.
      </para>
      <para>
        The configuration file <filename>/etc/inetd.conf</filename> must
        not be modified by the package's scripts except via the
        <command>update-inetd</command> script or the
        <filename>DebianNet.pm</filename> Perl module.  See their
        documentation for details on how to add entries.
      </para>
      <para>
        If a package wants to install an example entry into
        <filename>/etc/inetd.conf</filename>, the entry must be preceded
        with exactly one hash character (<literal>#</literal>).  Such
        lines are treated as "commented out by user" by the
        <command>update-inetd</command> script and are not changed or
        activated during package updates.
      </para>
    </section>

    <section id="s11.3">
      <title>Using pseudo-ttys and modifying wtmp, utmp and lastlog</title>

      <para>
        Some programs need to create pseudo-ttys.  This should be done
        using Unix98 ptys if the C library supports it.  The resulting
        program must not be installed setuid root, unless that is required
        for other functionality.
      </para>
      <para>
        The files <filename>/var/run/utmp</filename>,
        <filename>/var/log/wtmp</filename> and
        <filename>/var/log/lastlog</filename> must be installed writable
        by group <literal>utmp</literal>.  Programs which need to modify
        those files must be installed setgid <literal>utmp</literal>.
      </para>
    </section>

    <section id="s11.4">
      <title>Editors and pagers</title>

      <para>
        Some programs have the ability to launch an editor or pager
        program to edit or display a text document.  Since there are lots
        of different editors and pagers available in the Debian
        distribution, the system administrator and each user should have
        the possibility to choose their preferred editor and pager.
      </para>
      <para>
        In addition, every program should choose a good default
        editor/pager if none is selected by the user or system
        administrator.
      </para>
      <para>
        Thus, every program that launches an editor or pager must use the
        EDITOR or PAGER environment variable to determine the editor or
        pager the user wishes to use.  If these variables are not set, the
        programs <filename>/usr/bin/editor</filename> and
        <filename>/usr/bin/pager</filename> should be used, respectively.
      </para>
      <para>
        These two files are managed through the <command>dpkg</command>
        "alternatives" mechanism.  Every package providing an editor or
        pager must call the <command>update-alternatives</command> script
        to register as an alternative for
        <filename>/usr/bin/editor</filename> or
        <filename>/usr/bin/pager</filename> as appropriate.  The
        alternative should have a slave alternative for
        <filename>/usr/share/man/man1/editor.1.gz</filename> or
        <filename>/usr/share/man/man1/pager.1.gz</filename> pointing to
        the corresponding manual page.
      </para>
      <para>
        If it is very hard to adapt a program to make use of the EDITOR or
        PAGER variables, that program may be configured to use
        <filename>/usr/bin/sensible-editor</filename> and
        <filename>/usr/bin/sensible-pager</filename> as the editor or
        pager program respectively.  These are two scripts provided in the
        <systemitem role="package">sensible-utils</systemitem> package
        that check the EDITOR and PAGER variables and launch the
        appropriate program, and fall back to
        <filename>/usr/bin/editor</filename> and
        <filename>/usr/bin/pager</filename> if the variable is not set.
      </para>
      <para>
        A program may also use the VISUAL environment variable to
        determine the user's choice of editor.  If it exists, it should
        take precedence over EDITOR.  This is in fact what
        <filename>/usr/bin/sensible-editor</filename> does.
      </para>
      <para>
        It is not required for a package to depend on
        <literal>editor</literal> and <literal>pager</literal>, nor is it
        required for a package to provide such virtual
        packages.<footnote><para> The Debian base system already provides
        an editor and a pager program.  </para> </footnote>
      </para>
    </section>

    <section id="s-web-appl">
      <title>Web servers and applications</title>

      <para>
        This section describes the locations and URLs that should be used
        by all web servers and web applications in the Debian system.
      </para>
      <orderedlist numeration="arabic">
        <listitem>
          <para>
            Cgi-bin executable files are installed in the directory
          </para>
          <screen>/usr/lib/cgi-bin</screen>
          <para>
            or a subdirectory of that directory, and the script
          </para>
          <screen>/usr/lib/cgi-bin/.../<replaceable>cgi-bin-name</replaceable></screen>
          <para>
            should be referred to as
          </para>
          <screen>http://localhost/cgi-bin/.../<replaceable>cgi-bin-name</replaceable></screen>
        </listitem>
        <listitem>
          <para>
            (Deleted)
          </para>
        </listitem>
        <listitem>
          <para>
            Access to images
          </para>
          <para>
            It is recommended that images for a package be stored in
            <literal>/usr/share/images/<replaceable>package</replaceable></literal>
            and may be referred to through an alias
            <literal>/images/</literal> as
          </para>
          <screen>
http://localhost/images/<replaceable>package</replaceable>/<replaceable>filename</replaceable></screen>
        </listitem>
        <listitem>
          <para>
            Web Document Root
          </para>
          <para>
            Web Applications should try to avoid storing files in the Web
            Document Root.  Instead they should use the
            /usr/share/doc/<replaceable>package</replaceable> directory
            for documents and register the Web Application via the
            <systemitem role="package">doc-base</systemitem> package.  If
            access to the web document root is unavoidable then use
          </para>
          <screen>/var/www/html</screen>
          <para>
            as the Document Root.  This might be just a symbolic link to
            the location where the system administrator has put the real
            document root.
          </para>
        </listitem>
        <listitem>
          <para>
            Providing httpd and/or httpd-cgi
          </para>
          <para>
            All web servers should provide the virtual package
            <literal>httpd</literal>.  If a web server has CGI support it
            should provide <literal>httpd-cgi</literal> additionally.
          </para>
          <para>
            All web applications which do not contain CGI scripts should
            depend on <literal>httpd</literal>, all those web applications
            which <literal>do</literal> contain CGI scripts, should depend
            on <literal>httpd-cgi</literal>.
          </para>
        </listitem>
      </orderedlist>
    </section>

    <section id="s-mail-transport-agents">
      <title>Mail transport, delivery and user agents</title>

      <para>
        Debian packages which process electronic mail, whether mail user
        agents (MUAs) or mail transport agents (MTAs), must ensure that
        they are compatible with the configuration decisions below.
        Failure to do this may result in lost mail, broken
        <literal>From:</literal> lines, and other serious brain damage!
      </para>
      <para>
        The mail spool is <filename>/var/mail</filename> and the interface
        to send a mail message is <filename>/usr/sbin/sendmail</filename>
        (as per the FHS).  On older systems, the mail spool may be
        physically located in <filename>/var/spool/mail</filename>, but
        all access to the mail spool should be via the
        <filename>/var/mail</filename> symlink.  The mail spool is part of
        the base system and not part of the MTA package.
      </para>
      <para>
        All Debian MUAs, MTAs, MDAs and other mailbox accessing programs
        (such as IMAP daemons) must lock the mailbox in an NFS-safe way.
        This means that <literal>fcntl()</literal> locking must be
        combined with dot locking.  To avoid deadlocks, a program should
        use <literal>fcntl()</literal> first and dot locking after this,
        or alternatively implement the two locking methods in a non
        blocking way.
        <footnote>
          <para>
            If it is not possible to establish both locks, the system
            shouldn't wait for the second lock to be established, but
            remove the first lock, wait a (random) time, and start over
            locking again.
          </para>
        </footnote>
        Using the functions <literal>maillock</literal> and
        <literal>mailunlock</literal> provided by the
        <literal>liblockfile*</literal> packages is the recommended way to
        accomplish this.
      </para>
      <para>
        Mailboxes are generally either mode 600 and owned by
        <replaceable>user</replaceable> or mode 660 and owned by
        <literal><replaceable>user</replaceable>:mail</literal>.
        <footnote>
          <para>
            There are two traditional permission schemes for mail spools:
            mode 600 with all mail delivery done by processes running as
            the destination user, or mode 660 and owned by group mail with
            mail delivery done by a process running as a system user in
            group mail.  Historically, Debian required mode 660 mail
            spools to enable the latter model, but that model has become
            increasingly uncommon and the principle of least privilege
            indicates that mail systems that use the first model should
            use permissions of 600.  If delivery to programs is permitted,
            it's easier to keep the mail system secure if the delivery
            agent runs as the destination user.  Debian Policy therefore
            permits either scheme.
          </para>
        </footnote>
        The local system administrator may choose a different permission
        scheme; packages should not make assumptions about the permission
        and ownership of mailboxes unless required (such as when creating
        a new mailbox).  A MUA may remove a mailbox (unless it has
        nonstandard permissions) in which case the MTA or another MUA must
        recreate it if needed.
      </para>
      <para>
        The mail spool is 2775 <literal>root:mail</literal>, and MUAs
        should be setgid mail to do the locking mentioned above (and must
        obviously avoid accessing other users' mailboxes using this
        privilege).
      </para>
      <para>
        <filename>/etc/aliases</filename> is the source file for the
        system mail aliases (e.g., postmaster, usenet, etc.), it is the
        one which the sysadmin and <command>postinst</command> scripts may
        edit.  After <filename>/etc/aliases</filename> is edited the
        program or human editing it must call
        <command>newaliases</command>.  All MTA packages must come with a
        <command>newaliases</command> program, even if it does nothing,
        but older MTA packages did not do this so programs should not fail
        if <command>newaliases</command> cannot be found.  Note that
        because of this, all MTA packages must have
        <literal>Provides</literal>, <literal>Conflicts</literal> and
        <literal>Replaces:  mail-transport-agent</literal> control fields.
      </para>
      <para>
        The convention of writing <literal>forward to
        <replaceable>address</replaceable></literal> in the mailbox itself
        is not supported.  Use a <literal>.forward</literal> file instead.
      </para>
      <para>
        The <command>rmail</command> program used by UUCP for incoming
        mail should be <filename>/usr/sbin/rmail</filename>.  Likewise,
        <command>rsmtp</command>, for receiving batch-SMTP-over-UUCP,
        should be <filename>/usr/sbin/rsmtp</filename> if it is supported.
      </para>
      <para>
        If your package needs to know what hostname to use on (for
        example) outgoing news and mail messages which are generated
        locally, you should use the file
        <filename>/etc/mailname</filename>.  It will contain the portion
        after the username and <literal>@</literal> (at) sign for email
        addresses of users on the machine (followed by a newline).
      </para>
      <para>
        Such a package should check for the existence of this file when it
        is being configured.  If it exists, it should be used without
        comment, although an MTA's configuration script may wish to prompt
        the user even if it finds that this file exists.  If the file does
        not exist, the package should prompt the user for the value
        (preferably using <command>debconf</command>) and store it in
        <filename>/etc/mailname</filename> as well as using it in the
        package's configuration.  The prompt should make it clear that the
        name will not just be used by that package.  For example, in this
        situation the <literal>inn</literal> package could say something
        like:
      </para>
      <screen>
Please enter the "mail name" of your system.  This is the hostname portion
of the address to be shown on outgoing news and mail messages.  The
default is <replaceable>syshostname</replaceable>, your system's host name.

Mail name ["<replaceable>syshostname</replaceable>"]:</screen>
      <para>
        where <replaceable>syshostname</replaceable> is the output of
        <literal>hostname --fqdn</literal>.
      </para>
    </section>

    <section id="s11.7">
      <title>News system configuration</title>

      <para>
        All the configuration files related to the NNTP (news) servers and
        clients should be located under <filename>/etc/news</filename>.
      </para>
      <para>
        There are some configuration issues that apply to a number of news
        clients and server packages on the machine.  These are:
      </para>
      <variablelist>
        <varlistentry>
          <term><filename>/etc/news/organization</filename></term>
          <listitem>
            <para>
              A string which should appear as the organization header for
              all messages posted by NNTP clients on the machine
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><filename>/etc/news/server</filename></term>
          <listitem>
            <para>
              Contains the FQDN of the upstream NNTP server, or localhost
              if the local machine is an NNTP server.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>
        Other global files may be added as required for cross-package news
        configuration.
      </para>
    </section>

    <section id="s11.8">
      <title>Programs for the X Window System</title>

      <section id="s11.8.1">
        <title>Providing X support and package priorities</title>

        <para>
          Programs that can be configured with support for the X Window
          System must be configured to do so and must declare any package
          dependencies necessary to satisfy their runtime requirements
          when using the X Window System.  If such a package is of higher
          priority than the X packages on which it depends, it is required
          that either the X-specific components be split into a separate
          package, or that an alternative version of the package, which
          includes X support, be provided, or that the package's priority
          be lowered.
        </para>
      </section>

      <section id="s11.8.2">
        <title>Packages providing an X server</title>

        <para>
          Packages that provide an X server that, directly or indirectly,
          communicates with real input and display hardware should declare
          in their <literal>Provides</literal> control field that they
          provide the virtual package
          <literal>xserver</literal>.
          <footnote>
            <para>
              This implements current practice, and provides an actual
              policy for usage of the <literal>xserver</literal> virtual
              package which appears in the virtual packages list.  In a
              nutshell, X servers that interface directly with the display
              and input hardware or via another subsystem (e.g., GGI)
              should provide <literal>xserver</literal>.  Things like
              <literal>Xvfb</literal>, <literal>Xnest</literal>, and
              <literal>Xprt</literal> should not.
            </para>
          </footnote>
        </para>
      </section>

      <section id="s11.8.3">
        <title>Packages providing a terminal emulator</title>

        <para>
          Packages that provide a terminal emulator for the X Window
          System which meet the criteria listed below should declare in
          their <literal>Provides</literal> control field that they
          provide the virtual package
          <literal>x-terminal-emulator</literal>.  They should also
          register themselves as an alternative for
          <filename>/usr/bin/x-terminal-emulator</filename>, with a
          priority of 20.  That alternative should have a slave
          alternative for
          <filename>/usr/share/man/man1/x-terminal-emulator.1.gz</filename>
          pointing to the corresponding manual page.
        </para>
        <para>
          To be an <literal>x-terminal-emulator</literal>, a program must:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              Be able to emulate a DEC VT100 terminal, or a compatible
              terminal.
            </para>
          </listitem>
          <listitem>
            <para>
              Support the command-line option <literal>-e
              <replaceable>command</replaceable></literal>, which creates
              a new terminal window
              <footnote>
                <para>
                  "New terminal window" does not necessarily mean a new
                  top-level X window directly parented by the window
                  manager; it could, if the terminal emulator application
                  were so coded, be a new "view" in a multiple-document
                  interface (MDI).
                </para>
              </footnote>
              and runs the specified <replaceable>command</replaceable>,
              interpreting the entirety of the rest of the command line as
              a command to pass straight to exec, in the manner that
              <literal>xterm</literal> does.
            </para>
          </listitem>
          <listitem>
            <para>
              Support the command-line option <literal>-T
              <replaceable>title</replaceable></literal>, which creates a
              new terminal window with the window title
              <replaceable>title</replaceable>.
            </para>
          </listitem>
        </itemizedlist>
      </section>

      <section id="s11.8.4">
        <title>Packages providing a window manager</title>

        <para>
          Packages that provide a window manager should declare in their
          <literal>Provides</literal> control field that they provide the
          virtual package <literal>x-window-manager</literal>.  They
          should also register themselves as an alternative for
          <filename>/usr/bin/x-window-manager</filename>, with a priority
          calculated as follows:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              Start with a priority of 20.
            </para>
          </listitem>
          <listitem>
            <para>
              If the window manager supports the Debian menu system, add
              20 points if this support is available in the package's
              default configuration (i.e., no configuration files
              belonging to the system or user have to be edited to
              activate the feature); if configuration files must be
              modified, add only 10 points.
            </para>
          </listitem>
          <listitem>
            <para>
              If the window manager complies with <ulink
              url="https://www.freedesktop.org/wiki/Specifications/wm-spec">The
              Window Manager Specification Project</ulink>, written by the
              <ulink url="https://www.freedesktop.org/wiki/">Free Desktop
              Group</ulink>, add 40 points.
            </para>
          </listitem>
          <listitem>
            <para>
              If the window manager permits the X session to be restarted
              using a <emphasis>different</emphasis> window manager
              (without killing the X server) in its default configuration,
              add 10 points; otherwise add none.
            </para>
          </listitem>
        </itemizedlist>
        <para>
          That alternative should have a slave alternative for
          <filename>/usr/share/man/man1/x-window-manager.1.gz</filename>
          pointing to the corresponding manual page.
        </para>
      </section>

      <section id="s11.8.5">
        <title>Packages providing fonts</title>

        <para>
          Packages that provide fonts for the X Window
          System
          <footnote>
            <para>
              For the purposes of Debian Policy, a "font for the X Window
              System" is one which is accessed via X protocol requests.
              Fonts for the Linux console, for PostScript renderer, or any
              other purpose, do not fit this definition.  Any tool which
              makes such fonts available to the X Window System, however,
              must abide by this font policy.
            </para>
          </footnote>
          must do a number of things to ensure that they are both
          available without modification of the X or font server
          configuration, and that they do not corrupt files used by other
          font packages to register information about themselves.
        </para>
        <orderedlist numeration="arabic">
          <listitem>
            <para>
              Fonts of any type supported by the X Window System must be
              in a separate binary package from any executables,
              libraries, or documentation (except that specific to the
              fonts shipped, such as their license information).  If one
              or more of the fonts so packaged are necessary for proper
              operation of the package with which they are associated the
              font package may be Recommended; if the fonts merely provide
              an enhancement, a Suggests relationship may be used.
              Packages must not Depend on font packages.
              <footnote>
                <para>
                  This is because the X server may retrieve fonts from the
                  local file system or over the network from an X font
                  server; the Debian package system is empowered to deal
                  only with the local file system.
                </para>
              </footnote>
            </para>
          </listitem>
          <listitem>
            <para>
              BDF fonts must be converted to PCF fonts with the
              <command>bdftopcf</command> utility (available in the
              <literal>xfonts-utils</literal> package,
              <command>gzip</command>ped, and placed in a directory that
              corresponds to their resolution:
            </para>
            <itemizedlist>
              <listitem>
                <para>
                  100 dpi fonts must be placed in
                  <filename>/usr/share/fonts/X11/100dpi/</filename>.
                </para>
              </listitem>
              <listitem>
                <para>
                  75 dpi fonts must be placed in
                  <filename>/usr/share/fonts/X11/75dpi/</filename>.
                </para>
              </listitem>
              <listitem>
                <para>
                  Character-cell fonts, cursor fonts, and other
                  low-resolution fonts must be placed in
                  <filename>/usr/share/fonts/X11/misc/</filename>.
                </para>
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem>
            <para>
              Type 1 fonts must be placed in
              <filename>/usr/share/fonts/X11/Type1/</filename>.  If font
              metric files are available, they must be placed here as
              well.
            </para>
          </listitem>
          <listitem>
            <para>
              Subdirectories of <filename>/usr/share/fonts/X11/</filename>
              other than those listed above must be neither created nor
              used.  (The <filename>PEX</filename>,
              <filename>CID</filename>, <filename>Speedo</filename>, and
              <filename>cyrillic</filename> directories are excepted for
              historical reasons, but installation of files into these
              directories remains discouraged.)
            </para>
          </listitem>
          <listitem>
            <para>
              Font packages may, instead of placing files directly in the
              X font directories listed above, provide symbolic links in
              that font directory pointing to the files' actual location
              in the filesystem.  Such a location must comply with the
              FHS.
            </para>
          </listitem>
          <listitem>
            <para>
              Font packages should not contain both 75dpi and 100dpi
              versions of a font.  If both are available, they should be
              provided in separate binary packages with
              <literal>-75dpi</literal> or <literal>-100dpi</literal>
              appended to the names of the packages containing the
              corresponding fonts.
            </para>
          </listitem>
          <listitem>
            <para>
              Fonts destined for the <filename>misc</filename>
              subdirectory should not be included in the same package as
              75dpi or 100dpi fonts; instead, they should be provided in a
              separate package with <literal>-misc</literal> appended to
              its name.
            </para>
          </listitem>
          <listitem>
            <para>
              Font packages must not provide the files
              <filename>fonts.dir</filename>,
              <filename>fonts.alias</filename>, or
              <filename>fonts.scale</filename> in a font directory:
            </para>
            <itemizedlist>
              <listitem>
                <para>
                  <filename>fonts.dir</filename> files must not be
                  provided at all.
                </para>
              </listitem>
              <listitem>
                <para>
                  <filename>fonts.alias</filename> and
                  <filename>fonts.scale</filename> files, if needed,
                  should be provided in the directory
                  <filename>/etc/X11/fonts/<replaceable>fontdir</replaceable>/<replaceable>package</replaceable>.<replaceable>extension</replaceable></filename>,
                  where <replaceable>fontdir</replaceable> is the name of
                  the subdirectory of
                  <filename>/usr/share/fonts/X11/</filename> where the
                  package's corresponding fonts are stored (e.g.,
                  <literal>75dpi</literal> or <literal>misc</literal>),
                  <replaceable>package</replaceable> is the name of the
                  package that provides these fonts, and
                  <replaceable>extension</replaceable> is either
                  <literal>scale</literal> or <literal>alias</literal>,
                  whichever corresponds to the file contents.
                </para>
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem>
            <para>
              Font packages must declare a dependency on
              <literal>xfonts-utils</literal> in their
              <literal>Depends</literal> or <literal>Pre-Depends</literal>
              control field.
            </para>
          </listitem>
          <listitem>
            <para>
              Font packages that provide one or more
              <filename>fonts.scale</filename> files as described above
              must invoke <command>update-fonts-scale</command> on each
              directory into which they installed fonts
              <emphasis>before</emphasis> invoking
              <command>update-fonts-dir</command> on that directory.  This
              invocation must occur in both the
              <command>postinst</command> (for all arguments) and
              <command>postrm</command> (for all arguments except
              <literal>upgrade</literal>) scripts.
            </para>
          </listitem>
          <listitem>
            <para>
              Font packages that provide one or more
              <filename>fonts.alias</filename> files as described above
              must invoke <command>update-fonts-alias</command> on each
              directory into which they installed fonts.  This invocation
              must occur in both the <command>postinst</command> (for all
              arguments) and <command>postrm</command> (for all arguments
              except <literal>upgrade</literal>) scripts.
            </para>
          </listitem>
          <listitem>
            <para>
              Font packages must invoke
              <command>update-fonts-dir</command> on each directory into
              which they installed fonts.  This invocation must occur in
              both the <command>postinst</command> (for all arguments) and
              <command>postrm</command> (for all arguments except
              <literal>upgrade</literal>) scripts.
            </para>
          </listitem>
          <listitem>
            <para>
              Font packages must not provide alias names for the fonts
              they include which collide with alias names already in use
              by fonts already packaged.
            </para>
          </listitem>
          <listitem>
            <para>
              Font packages must not provide fonts with the same XLFD
              registry name as another font already packaged.
            </para>
          </listitem>
        </orderedlist>
      </section>

      <section id="s-appdefaults">
        <title>Application defaults files</title>

        <para>
          Application defaults files must be installed in the directory
          <filename>/etc/X11/app-defaults/</filename> (use of a localized
          subdirectory of <filename>/etc/X11/</filename> as described in
          the <emphasis>X Toolkit Intrinsics - C Language
          Interface</emphasis> manual is also permitted).  They must be
          registered as <literal>conffile</literal>s or handled as
          configuration files.
        </para>
        <para>
          Customization of programs' X resources may also be supported
          with the provision of a file with the same name as that of the
          package placed in the <filename>/etc/X11/Xresources/</filename>
          directory, which must be registered as a
          <literal>conffile</literal> or handled as a configuration
          file.
          <footnote>
            <para>
              Note that this mechanism is not the same as using
              app-defaults; app-defaults are tied to the client binary on
              the local file system, whereas X resources are stored in the
              X server and affect all connecting clients.
            </para>
          </footnote>
        </para>
      </section>

      <section id="s11.8.7">
        <title>Installation directory issues</title>

        <para>
          Historically, packages using the X Window System used a separate
          set of installation directories from other packages.  This
          practice has been discontinued and packages using the X Window
          System should now generally be installed in the same directories
          as any other package.  Specifically, packages must not install
          files under the <filename>/usr/X11R6/</filename> directory and
          the <filename>/usr/X11R6/</filename> directory hierarchy should
          be regarded as obsolete.
        </para>
        <para>
          Include files previously installed under
          <filename>/usr/X11R6/include/X11/</filename> should be installed
          into <filename>/usr/include/X11/</filename>.  For files
          previously installed into subdirectories of
          <filename>/usr/X11R6/lib/X11/</filename>, package maintainers
          should determine if subdirectories of
          <filename>/usr/lib/</filename> and
          <filename>/usr/share/</filename> can be used.  If not, a
          subdirectory of <filename>/usr/lib/X11/</filename> should be
          used.
        </para>
        <para>
          Configuration files for window, display, or session managers or
          other applications that are tightly integrated with the X Window
          System may be placed in a subdirectory of
          <filename>/etc/X11/</filename> corresponding to the package
          name.  Other X Window System applications should use the
          <filename>/etc/</filename> directory unless otherwise mandated
          by policy (such as for <xref linkend="s-appdefaults"/>).
        </para>
      </section>
    </section>

    <section id="s-perl">
      <title>Perl programs and modules</title>

      <para>
        Perl programs and modules should follow the current Perl policy.
      </para>
      <para>
        The Perl policy can be found in the <literal>perl-policy</literal>
        files in the <literal>debian-policy</literal> package.  It is also
        available from the Debian web mirrors at <ulink
        url="https://www.debian.org/doc/packaging-manuals/perl-policy/">https://www.debian.org/doc/packaging-manuals/perl-policy/</ulink>.
      </para>
    </section>

    <section id="s-emacs">
      <title>Emacs lisp programs</title>

      <para>
        Please refer to the "Debian Emacs Policy" for details of how to
        package emacs lisp programs.
      </para>
      <para>
        The Emacs policy is available in
        <filename>debian-emacs-policy.gz</filename> of the <systemitem
        role="package">emacsen-common</systemitem> package.  It is also
        available from the Debian web mirrors at <ulink
        url="https://www.debian.org/doc/packaging-manuals/debian-emacs-policy">https://www.debian.org/doc/packaging-manuals/debian-emacs-policy</ulink>.
      </para>
    </section>

    <section id="s11.11">
      <title>Games</title>

      <para>
        The permissions on <filename>/var/games</filename> are mode 755,
        owner <literal>root</literal> and group <literal>root</literal>.
      </para>
      <para>
        Each game decides on its own security policy.
      </para>
      <para>
        Games which require protected, privileged access to high-score
        files, saved games, etc., may be made
        set-<emphasis>group</emphasis>-id (mode 2755) and owned by
        <literal>root:games</literal>, and use files and directories with
        appropriate permissions (770 <literal>root:games</literal>, for
        example).  They must not be made set-<emphasis>user</emphasis>-id,
        as this causes security problems.  (If an attacker can subvert any
        set-user-id game they can overwrite the executable of any other,
        causing other players of these games to run a Trojan horse
        program.  With a set-group-id game the attacker only gets access
        to less important game data, and if they can get at the other
        players' accounts at all it will take considerably more effort.)
      </para>
      <para>
        Some packages, for example some fortune cookie programs, are
        configured by the upstream authors to install with their data
        files or other static information made unreadable so that they can
        only be accessed through set-id programs provided.  You should not
        do this in a Debian package: anyone can download the
        <filename>.deb</filename> file and read the data from it, so there
        is no point making the files unreadable.  Not making the files
        unreadable also means that you don't have to make so many programs
        set-id, which reduces the risk of a security hole.
      </para>
      <para>
        As described in the FHS, binaries of games should be installed in
        the directory <filename>/usr/games</filename>.  This also applies
        to games that use the X Window System.  Manual pages for games (X
        and non-X games) should be installed in
        <filename>/usr/share/man/man6</filename>.
      </para>
    </section>
  </chapter>

  <chapter id="ch-docs">
    <title>Documentation</title>

    <section id="s12.1">
      <title>Manual pages</title>

      <para>
        You should install manual pages in <command>nroff</command> source
        form, in appropriate places under
        <filename>/usr/share/man</filename>.  You should only use sections
        1 to 9 (see the FHS for more details).  You must not install a
        pre-formatted "cat page".
      </para>
      <para>
        Each program, utility, and function should have an associated
        manual page included in the same package.  It is suggested that
        all configuration files also have a manual page included as well.
        Manual pages for protocols and other auxiliary things are
        optional.
      </para>
      <para>
        If no manual page is available, this is considered as a bug and
        should be reported to the Debian Bug Tracking System (the
        maintainer of the package is allowed to write this bug report
        themselves, if they so desire).  Do not close the bug report until
        a proper man page is available.
        <footnote>
          <para>
            It is not very hard to write a man page.  See the <ulink
            url="http://www.schweikhardt.net/man_page_howto.html">Man-Page-HOWTO</ulink>,
            <citerefentry><refentrytitle>man</refentrytitle><manvolnum>7</manvolnum></citerefentry>,
            the examples created by <command>dh_make</command>, the helper
            program <command>help2man</command>, or the directory
            <filename>/usr/share/doc/man-db/examples</filename>.
          </para>
        </footnote>
      </para>
      <para>
        You may forward a complaint about a missing man page to the
        upstream authors, and mark the bug as forwarded in the Debian bug
        tracking system.  Even though the GNU Project do not in general
        consider the lack of a man page to be a bug, we do; if they tell
        you that they don't consider it a bug you should leave the bug in
        our bug tracking system open anyway.
      </para>
      <para>
        Manual pages should be installed compressed using <literal>gzip
        -9</literal>.
      </para>
      <para>
        If one man page needs to be accessible via several names it is
        better to use a symbolic link than the <filename>.so</filename>
        feature, but there is no need to fiddle with the relevant parts of
        the upstream source to change from <filename>.so</filename> to
        symlinks: don't do it unless it's easy.  You should not create
        hard links in the manual page directories, nor put absolute
        filenames in <filename>.so</filename> directives.  The filename in
        a <filename>.so</filename> in a man page should be relative to the
        base of the man page tree (usually
        <filename>/usr/share/man</filename>).  If you do not create any
        links (whether symlinks, hard links, or <literal>.so</literal>
        directives) in the file system to the alternate names of the man
        page, then you should not rely on <command>man</command> finding
        your man page under those names based solely on the information in
        the man page's header.
        <footnote>
          <para>
            Supporting this in <command>man</command> often requires
            unreasonable processing time to find a manual page or to
            report that none exists, and moves knowledge into man's
            database that would be better left in the file system.  This
            support is therefore deprecated and will cease to be present
            in the future.
          </para>
        </footnote>
      </para>
      <para>
        Manual pages in locale-specific subdirectories of
        <filename>/usr/share/man</filename> should use either UTF-8 or the
        usual legacy encoding for that language (normally the one
        corresponding to the shortest relevant locale name in
        <filename>/usr/share/i18n/SUPPORTED</filename>).  For example,
        pages under <filename>/usr/share/man/fr</filename> should use
        either UTF-8 or ISO-8859-1.
        <footnote>
          <para>
            <command>man</command> will automatically detect whether UTF-8
            is in use.  In future, all manual pages will be required to
            use UTF-8.
          </para>
        </footnote>
      </para>
      <para>
        A country name (the <literal>DE</literal> in
        <literal>de_DE</literal>) should not be included in the
        subdirectory name unless it indicates a significant difference in
        the language, as this excludes speakers of the language in other
        countries.
        <footnote>
          <para>
            At the time of writing, Chinese and Portuguese are the main
            languages with such differences, so
            <filename>pt_BR</filename>, <filename>zh_CN</filename>, and
            <filename>zh_TW</filename> are all allowed.
          </para>
        </footnote>
      </para>
      <para>
        If a localized version of a manual page is provided, it should
        either be up-to-date or it should be obvious to the reader that it
        is outdated and the original manual page should be used instead.
        This can be done either by a note at the beginning of the manual
        page or by showing the missing or changed portions in the original
        language instead of the target language.
      </para>
    </section>

    <section id="s12.2">
      <title>Info documents</title>

      <para>
        Info documents should be installed in
        <filename>/usr/share/info</filename>.  They should be compressed
        with <literal>gzip -9</literal>.
      </para>
      <para>
        The <command>install-info</command> program maintains a directory
        of installed info documents in
        <filename>/usr/share/info/dir</filename> for the use of info
        readers.  This file must not be included in packages other than
        <systemitem role="package">install-info</systemitem>.
      </para>
      <para>
        <command>install-info</command> is automatically invoked when
        appropriate using dpkg triggers.  Packages other than <systemitem
        role="package">install-info</systemitem> <emphasis>should
        not</emphasis> invoke <command>install-info</command> directly and
        <emphasis>should not</emphasis> depend on, recommend, or suggest
        <systemitem role="package">install-info</systemitem> for this
        purpose.
      </para>
      <para>
        Info readers requiring the
        <filename>/usr/share/info/dir</filename> file should depend on
        <systemitem role="package">install-info</systemitem>.
      </para>
      <para>
        Info documents should contain section and directory entry
        information in the document for the use of
        <command>install-info</command>.  The section should be specified
        via a line starting with <literal>INFO-DIR-SECTION</literal>
        followed by a space and the section of this info page.  The
        directory entry or entries should be included between a
        <literal>START-INFO-DIR-ENTRY</literal> line and an
        <literal>END-INFO-DIR-ENTRY</literal> line.  For example:
      </para>
      <programlisting>
INFO-DIR-SECTION Individual utilities
START-INFO-DIR-ENTRY
* example: (example).               An example info directory entry.
END-INFO-DIR-ENTRY</programlisting>
      <para>
        To determine which section to use, you should look at
        <filename>/usr/share/info/dir</filename> on your system and choose
        the most relevant (or create a new section if none of the current
        sections are relevant).
        <footnote>
          <para>
            Normally, info documents are generated from Texinfo source.
            To include this information in the generated info document, if
            it is absent, add commands like:
          </para>
          <programlisting>
@dircategory Individual utilities
@direntry
* example: (example).  An example info directory entry.
@end direntry</programlisting>
          <para>
            to the Texinfo source of the document and ensure that the info
            documents are rebuilt from source during the package build.
          </para>
        </footnote>
      </para>
    </section>

    <section id="s-docs-additional">
      <title>Additional documentation</title>

      <para>
        Any additional documentation that comes with the package may be
        installed at the discretion of the package maintainer.  It is
        often a good idea to include text information files
        (<filename>README</filename>s, FAQs, and so forth) that come with
        the source package in the binary package.  However, you don't need
        to install the instructions for building and installing the
        package, of course!
      </para>
      <para>
        Plain text documentation should be compressed with <literal>gzip
        -9</literal> unless it is small.
      </para>
      <para>
        If a package comes with large amounts of documentation that many
        users of the package will not require, you should create a
        separate binary package to contain it so that it does not take up
        disk space on the machines of users who do not need or want it
        installed.  As a special case of this rule, shared library
        documentation of any appreciable size should always be packaged
        with the library development package (<xref
        linkend="s-sharedlibs-dev"/>) or in a separate documentation
        package, since shared libraries are frequently installed as
        dependencies of other packages by users who have little interest
        in documentation of the library itself.  The documentation package
        for the package <replaceable>package</replaceable> is
        conventionally named <replaceable>package</replaceable>-doc (or
        <replaceable>package</replaceable>-doc-<replaceable>language-code</replaceable>
        if there are separate documentation packages for multiple
        languages).
      </para>
      <para>
        If <replaceable>package</replaceable> is a build tool, development
        tool, command-line tool, or library development package,
        <replaceable>package</replaceable> (or
        <replaceable>package</replaceable>-dev in the case of a library
        development package) already provides documentation in man, info,
        or plain text format, and <replaceable>package</replaceable>-doc
        provides HTML or other formats, <replaceable>package</replaceable>
        should declare at most a <literal>Suggests</literal> on
        <replaceable>package</replaceable>-doc.  Otherwise,
        <replaceable>package</replaceable> should declare at most a
        <literal>Recommends</literal> on
        <replaceable>package</replaceable>-doc.
      </para>
      <para>
        Additional documentation included in the package should be
        installed under
        <filename>/usr/share/doc/<replaceable>package</replaceable></filename>.
        If the documentation is packaged separately, as
        <replaceable>package</replaceable>-doc for example, it may be
        installed under either that path or into the documentation
        directory for the separate documentation package
        (<filename>/usr/share/doc/<replaceable>package</replaceable>-doc</filename>
        in this example).  However, installing the documentation into the
        documentation directory of the main package is preferred since it
        is independent of the packaging method and will be easier for
        users to find.
      </para>
      <para>
        Any separate package providing documentation must still install
        standard documentation files in its own
        <filename>/usr/share/doc</filename> directory as specified in the
        rest of this policy.  See, for example, <xref
        linkend="s-copyrightfile"/> and <xref linkend="s-changelogs"/>.
      </para>
      <para>
        Packages must not require the existence of any files in
        <filename>/usr/share/doc/</filename> in order to function.
        <footnote>
          <para>
            The system administrator should be able to delete files in
            <filename>/usr/share/doc/</filename> without causing any
            programs to break.
          </para>
        </footnote>
        Any files that are used or read by programs but are also useful as
        stand alone documentation should be installed elsewhere, such as
        under
        <filename>/usr/share/<replaceable>package</replaceable>/</filename>,
        and then included via symbolic links in
        <filename>/usr/share/doc/<replaceable>package</replaceable></filename>.
      </para>
      <para>
        <filename>/usr/share/doc/<replaceable>package</replaceable></filename>
        may be a symbolic link to another directory in
        <filename>/usr/share/doc</filename> only if the two packages both
        come from the same source and the first package Depends on the
        second.
        <footnote>
          <para>
            Please note that this does not override the section on
            changelog files below, so the file
            <filename>/usr/share/doc/<replaceable>package</replaceable>/changelog.Debian.gz</filename>
            must refer to the changelog for the current version of
            <replaceable>package</replaceable> in question.  In practice,
            this means that the sources of the target and the destination
            of the symlink must be the same (same source package and
            version).
          </para>
        </footnote>
      </para>
    </section>

    <section id="s12.4">
      <title>Preferred documentation formats</title>

      <para>
        The unification of Debian documentation is being carried out via
        HTML.
      </para>
      <para>
        If the package comes with extensive documentation in a markup
        format that can be converted to various other formats you should
        if possible ship HTML versions in a binary
        package.
        <footnote>
          <para>
            Rationale: The important thing here is that HTML documentation
            should be available from <emphasis>some</emphasis> binary
            package.
          </para>
        </footnote>
        The documentation must be installed as specified in <xref
        linkend="s-docs-additional"/>.
      </para>
      <para>
        Other formats such as PostScript may be provided at the package
        maintainer's discretion.
      </para>
    </section>

    <section id="s-copyrightfile">
      <title>Copyright information</title>

      <para>
        Every package must be accompanied by a verbatim copy of its
        copyright information and distribution license in the file
        <filename>/usr/share/doc/<replaceable>package</replaceable>/copyright</filename>.
        This file must neither be compressed nor be a symbolic link.
      </para>
      <para>
        In addition, the copyright file must say where the upstream
        sources (if any) were obtained, and should include a name or
        contact address for the upstream authors.  This can be the
        name of an individual or an organization, an email address, a
        web forum or bugtracker, or any other means to unambiguously
        identify who to contact to participate in the development of
        the upstream source code.
      </para>
      <para>
        Packages in the <emphasis>contrib</emphasis> or
        <emphasis>non-free</emphasis> archive areas should state in the
        copyright file that the package is not part of the Debian
        distribution and briefly explain why.
      </para>
      <para>
        A copy of the file which will be installed in
        <filename>/usr/share/doc/<replaceable>package</replaceable>/copyright</filename>
        should be in <filename>debian/copyright</filename> in the source
        package.
      </para>
      <para>
        <filename>/usr/share/doc/<replaceable>package</replaceable></filename>
        may be a symbolic link to another directory in
        <filename>/usr/share/doc</filename> only if the two packages both
        come from the same source and the first package Depends on the
        second.  These rules are important because
        <filename>copyright</filename> files must be extractable by
        mechanical means.
      </para>
      <para>
        Packages distributed under the Apache license (version 2.0), the
        Artistic license, the GNU GPL (versions 1, 2, or 3), the GNU LGPL
        (versions 2, 2.1, or 3), the GNU FDL (versions 1.2 or 1.3), and
        the Mozilla Public License (version 1.1 or 2.0) should refer to
        the corresponding files under
        <filename>/usr/share/common-licenses</filename>,
        <footnote>
          <para>
            In particular,
            <filename>/usr/share/common-licenses/Apache-2.0</filename>,
            <filename>/usr/share/common-licenses/Artistic</filename>,
            <filename>/usr/share/common-licenses/GPL-1</filename>,
            <filename>/usr/share/common-licenses/GPL-2</filename>,
            <filename>/usr/share/common-licenses/GPL-3</filename>,
            <filename>/usr/share/common-licenses/LGPL-2</filename>,
            <filename>/usr/share/common-licenses/LGPL-2.1</filename>,
            <filename>/usr/share/common-licenses/LGPL-3</filename>,
            <filename>/usr/share/common-licenses/GFDL-1.2</filename>,
            <filename>/usr/share/common-licenses/GFDL-1.3</filename>,
            <filename>/usr/share/common-licenses/MPL-1.1</filename>, and
            <filename>/usr/share/common-licenses/MPL-2.0</filename>
            respectively.  The University of California BSD license is
            also included in <systemitem
            role="package">base-files</systemitem> as
            <filename>/usr/share/common-licenses/BSD</filename>, but given
            the brevity of this license, its specificity to code whose
            copyright is held by the Regents of the University of
            California, and the frequency of minor wording changes, its
            text should be included in the copyright file rather than
            referencing this file.
          </para>
        </footnote>
        rather than quoting them in the copyright file.
      </para>
      <para>
        You should not use the copyright file as a general
        <filename>README</filename> file.  If your package has such a file
        it should be installed in
        <filename>/usr/share/doc/<replaceable>package</replaceable>/README</filename>
        or <filename>README.Debian</filename> or some other appropriate
        place.
      </para>
      <para>
        All copyright files must be encoded in UTF-8.
      </para>

      <section id="s-copyrightformat">
        <title>Machine-readable copyright information</title>

        <para>
          A specification for a standard, machine-readable format for
          <filename>debian/copyright</filename> files is maintained as
          part of the <systemitem
          role="package">debian-policy</systemitem> package.  This
          document may be found in the
          <filename>copyright-format</filename> files in the <systemitem
          role="package">debian-policy</systemitem> package.  It is also
          available from the Debian web mirrors at <ulink
          url="https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/">https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/</ulink>.
        </para>
        <para>
          Use of this format is optional.
        </para>
      </section>
    </section>

    <section id="s12.6">
      <title>Examples</title>

      <para>
        Any examples (configurations, source files, whatever), should be
        installed in a directory
        <filename>/usr/share/doc/<replaceable>package</replaceable>/examples</filename>.
        These files should not be referenced by any program: they're there
        for the benefit of the system administrator and users as
        documentation only.  Architecture-specific example files should be
        installed in a directory
        <filename>/usr/lib/<replaceable>package</replaceable>/examples</filename>
        with symbolic links to them from
        <filename>/usr/share/doc/<replaceable>package</replaceable>/examples</filename>,
        or the latter directory itself may be a symbolic link to the
        former.
      </para>
      <para>
        If the purpose of a package is to provide examples, then the
        example files may be installed into
        <filename>/usr/share/doc/<replaceable>package</replaceable></filename>.
      </para>
    </section>

    <section id="s-changelogs">
      <title>Changelog files</title>

      <para>
        Packages that are not Debian-native must contain a compressed copy
        of the <filename>debian/changelog</filename> file from the Debian
        source tree in
        <filename>/usr/share/doc/<replaceable>package</replaceable></filename>
        with the name <filename>changelog.Debian.gz</filename>.
      </para>
      <para>
        If an upstream changelog is available, it should be accessible as
        <filename>/usr/share/doc/<replaceable>package</replaceable>/changelog.gz</filename>
        in plain text.  If the upstream changelog is distributed in HTML,
        it should be made available in that form as
        <filename>/usr/share/doc/<replaceable>package</replaceable>/changelog.html.gz</filename>
        and a plain text <filename>changelog.gz</filename> should be
        generated from it using, for example, <literal>lynx -dump
        -nolist</literal>.  If the upstream changelog files do not already
        conform to this naming convention, then this may be achieved
        either by renaming the files, or by adding a symbolic link, at the
        maintainer's discretion.
        <footnote>
          <para>
            Rationale: People should not have to look in places for
            upstream changelogs merely because they are given different
            names or are distributed in HTML format.
          </para>
        </footnote>
      </para>
      <para>
        All of these files should be installed compressed using
        <literal>gzip -9</literal>, as they will become large with time
        even if they start out small.
      </para>
      <para>
        If the package has only one changelog which is used both as the
        Debian changelog and the upstream one because there is no separate
        upstream maintainer then that changelog should usually be
        installed as
        <filename>/usr/share/doc/<replaceable>package</replaceable>/changelog.gz</filename>;
        if there is a separate upstream maintainer, but no upstream
        changelog, then the Debian changelog should still be called
        <filename>changelog.Debian.gz</filename>.
      </para>
      <para>
        For details about the format and contents of the Debian changelog
        file, please see <xref linkend="s-dpkgchangelog"/>.
      </para>
    </section>
  </chapter>

  <appendix id="ap-pkg-scope">
    <title>Introduction and scope of these appendices</title>

    <para>
      These appendices, except the final two, are taken essentially
      verbatim from the now-deprecated Packaging Manual, version
      3.2.1.0.  They are the chapters which are likely to be of use to
      package maintainers and which have not already been included in
      the policy document itself.  Most of these sections are very
      likely not relevant to policy; they should be treated as
      documentation for the packaging system.  Please note that these
      appendices are included for convenience, and for historical
      reasons: they used to be part of policy package, and they have
      not yet been incorporated into dpkg documentation.  However,
      they still have value, and hence they are presented here.
    </para>
    <para>
      They have not yet been checked to ensure that they are compatible
      with the contents of policy, and if there are any contradictions,
      the version in the main policy document takes precedence.  The
      remaining chapters of the old Packaging Manual have also not been
      read in detail to ensure that there are not parts which have been
      left out.  Both of these will be done in due course.
    </para>
    <para>
      Certain parts of the Packaging manual were integrated into the
      Policy Manual proper, and removed from the appendices.  Links have
      been placed from the old locations to the new ones.
    </para>
    <para>
      <command>dpkg</command> is a suite of programs for creating binary
      package files and installing and removing them on Unix
      systems.
      <footnote>
        <para>
          <command>dpkg</command> is targeted primarily at Debian, but may
          work on or be ported to other systems.
        </para>
      </footnote>
    </para>
    <para>
      The binary packages are designed for the management of installed
      executable programs (usually compiled binaries) and their associated
      data, though source code examples and documentation are provided as
      part of some packages.
    </para>
    <para>
      This manual describes the technical aspects of creating Debian
      binary packages (<filename>.deb</filename> files).  It documents the
      behavior of the package management programs <command>dpkg</command>,
      <command>dselect</command> et al.  and the way they interact with
      packages.
    </para>
    <para>
      This manual does not go into detail about the options and usage of
      the package building and installation tools.  It should therefore be
      read in conjunction with those programs' man pages.
    </para>
    <para>
      The utility programs which are provided with <command>dpkg</command>
      not described in detail here, are documented in their man pages.
    </para>
    <para>
      It is assumed that the reader is reasonably familiar with the
      <command>dpkg</command> System Administrators' manual.
      Unfortunately this manual does not yet exist.
    </para>
    <para>
      The Debian version of the FSF's GNU hello program is provided as an
      example for people wishing to create Debian packages.  However,
      while the examples are helpful, they do not replace the need to read
      and follow the Policy and Programmer's Manual.
    </para>
  </appendix>

  <appendix id="ap-pkg-binarypkg">
    <title>Binary packages (from old Packaging Manual)</title>

    <para>
      See
      <citerefentry><refentrytitle>deb</refentrytitle><manvolnum>5</manvolnum></citerefentry>
      and <xref linkend="s-pkg-controlarea"/>.
    </para>

    <section id="s-pkg-bincreating">
      <title>Creating package files - <command>dpkg-deb</command></title>

      <para>
        All manipulation of binary package files is done by
        <command>dpkg-deb</command>; it's the only program that has
        knowledge of the format.  (<command>dpkg-deb</command> may be
        invoked by calling <command>dpkg</command>, as
        <command>dpkg</command> will spot that the options requested are
        appropriate to <command>dpkg-deb</command> and invoke that instead
        with the same arguments.)
      </para>
      <para>
        In order to create a binary package, you must make a directory
        tree which contains all the files and directories you want to have
        in the file system data part of the package.  In Debian-format
        source packages, this directory is usually either
        <filename>debian/tmp</filename> or
        <filename>debian/<replaceable>pkg</replaceable></filename>,
        relative to the top of the package's source tree.
      </para>
      <para>
        They should have the locations (relative to the root of the
        directory tree you're constructing) ownerships and permissions
        which you want them to have on the system when they are installed.
      </para>
      <para>
        With current versions of <command>dpkg</command> the uid/username
        and gid/groupname mappings for the users and groups being used
        should be the same on the system where the package is built and
        the one where it is installed.
      </para>
      <para>
        You need to add one special directory to the root of the miniature
        file system tree you're creating: <command>DEBIAN</command>.  It
        should contain the control information files, notably the binary
        package control file (see <xref linkend="s-pkg-controlfile"/>).
      </para>
      <para>
        The <command>DEBIAN</command> directory will not appear in the
        file system archive of the package, and so won't be installed by
        <command>dpkg</command> when the package is unpacked.
      </para>
      <para>
        When you've prepared the package, you should invoke:
      </para>
      <screen>dpkg --build <replaceable>directory</replaceable></screen>
      <para>
        This will build the package in
        <filename><replaceable>directory</replaceable>.deb</filename>.
        (<command>dpkg</command> knows that <literal>--build</literal> is
        a <command>dpkg-deb</command> option, so it invokes
        <command>dpkg-deb</command> with the same arguments to build the
        package.)
      </para>
      <para>
        See the man page
        <citerefentry><refentrytitle>dpkg-deb</refentrytitle><manvolnum>8</manvolnum></citerefentry>
        for details of how to examine the contents of this newly-created
        file.  You may find the output of following commands enlightening:
      </para>
      <screen>
dpkg-deb --info <replaceable>filename</replaceable>.deb
dpkg-deb --contents <replaceable>filename</replaceable>.deb
dpkg --contents <replaceable>filename</replaceable>.deb</screen>
      <para>
        To view the copyright file for a package you could use this command:
      </para>
      <screen>
dpkg --fsys-tarfile <replaceable>filename</replaceable>.deb | tar xOf - --wildcards \*/copyright | pager</screen>
    </section>

    <section id="s-pkg-controlarea">
      <title>Package control information files</title>

      <para>
        The control information portion of a binary package is a
        collection of files with names known to <command>dpkg</command>.
        It will treat the contents of these files specially - some of them
        contain information used by <command>dpkg</command> when
        installing or removing the package; others are scripts which the
        package maintainer wants <command>dpkg</command> to run.
      </para>
      <para>
        It is possible to put other files in the package control
        information file area, but this is not generally a good idea
        (though they will largely be ignored).
      </para>
      <para>
        Here is a brief list of the control information files supported by
        <command>dpkg</command> and a summary of what they're used for.
      </para>
      <variablelist>
        <varlistentry>
          <term><literal>control</literal></term>
          <listitem>
            <para>
              This is the key description file used by
              <command>dpkg</command>.  It specifies the package's name
              and version, gives its description for the user, states its
              relationships with other packages, and so forth.  See <xref
              linkend="s-sourcecontrolfiles"/> and <xref
              linkend="s-binarycontrolfiles"/>.
            </para>
            <para>
              It is usually generated automatically from information in
              the source package by the <command>dpkg-gencontrol</command>
              program, and with assistance from
              <command>dpkg-shlibdeps</command>.  See <xref
              linkend="s-pkg-sourcetools"/>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>postinst</literal>, <literal>preinst</literal>,
            <literal>postrm</literal>, <literal>prerm</literal>
          </term>
          <listitem>
            <para>
              These are executable files (usually scripts) which
              <command>dpkg</command> runs during installation, upgrade
              and removal of packages.  They allow the package to deal
              with matters which are particular to that package or require
              more complicated processing than that provided by
              <command>dpkg</command>.  Details of when and how they are
              called are in <xref linkend="ch-maintainerscripts"/>.
            </para>
            <para>
              It is very important to make these scripts idempotent.  See
              <xref linkend="s-idempotency"/>.
            </para>
            <para>
              The maintainer scripts are not guaranteed to run with a
              controlling terminal and may not be able to interact with
              the user.  See <xref linkend="s-controllingterminal"/>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>conffiles</literal></term>
          <listitem>
            <para>
              This file contains a list of configuration files which are
              to be handled automatically by <command>dpkg</command> (see
              <xref linkend="ap-pkg-conffiles"/>).  Note that not
              necessarily every configuration file should be listed here.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>shlibs</literal></term>
          <listitem>
            <para>
              This file contains a list of the shared libraries supplied
              by the package, with dependency details for each.  This is
              used by <command>dpkg-shlibdeps</command> when it determines
              what dependencies are required in a package control file.
              The <literal>shlibs</literal> file format is described on
              <xref linkend="s-shlibs"/>.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="s-pkg-controlfile">
      <title>
        The main control information file: <literal>control</literal>
      </title>
      <para>
        The most important control information file used by
        <command>dpkg</command> when it installs a package is
        <literal>control</literal>.  It contains all the package's "vital
        statistics".
      </para>
      <para>
        The binary package control files of packages built from Debian
        sources are made by a special tool,
        <command>dpkg-gencontrol</command>, which reads
        <filename>debian/control</filename> and
        <filename>debian/changelog</filename> to find the information it
        needs.  See <xref linkend="ap-pkg-sourcepkg"/> for more details.
      </para>
      <para>
        The fields in binary package control files are listed in <xref
        linkend="s-binarycontrolfiles"/>.
      </para>
      <para>
        A description of the syntax of control files and the purpose of
        the fields is available in <xref linkend="ch-controlfields"/>.
      </para>
    </section>

    <section id="s-sB.4">
      <title>Time Stamps</title>

      <para>
        See <xref linkend="s-timestamps"/>.
      </para>
    </section>
  </appendix>

  <appendix id="ap-pkg-sourcepkg">
    <title>Source packages (from old Packaging Manual)</title>

    <para>
      The Debian binary packages in the distribution are generated from
      Debian sources, which are in a special format to assist the easy and
      automatic building of binaries.
    </para>
    <section id="s-pkg-sourcetools">
      <title>Tools for processing source packages</title>

      <para>
        Various tools are provided for manipulating source packages; they
        pack and unpack sources and help build of binary packages and help
        manage the distribution of new versions.
      </para>
      <para>
        They are introduced and typical uses described here; see
        <citerefentry><refentrytitle>dpkg-source</refentrytitle><manvolnum>1</manvolnum></citerefentry>
        for full documentation about their arguments and operation.
      </para>
      <para>
        For examples of how to construct a Debian source package, and how
        to use those utilities that are used by Debian source packages,
        please see the <command>hello</command> example package.
      </para>

      <section id="s-pkg-dpkg-source">
        <title>
          <command>dpkg-source</command> - packs and unpacks Debian source
          packages
        </title>

        <para>
          This program is frequently used by hand, and is also called from
          package-independent automated building scripts such as
          <command>dpkg-buildpackage</command>.
        </para>
        <para>
          To unpack a package it is typically invoked with
        </para>
        <screen>
dpkg-source -x <replaceable>.../path/to/filename</replaceable>.dsc</screen>
        <para>
          with the
          <filename><replaceable>filename</replaceable>.tar.gz</filename>
          and
          <filename><replaceable>filename</replaceable>.diff.gz</filename>
          (if applicable) in the same directory.  It unpacks into
          <filename><replaceable>package</replaceable>-<replaceable>version</replaceable></filename>,
          and if applicable
          <filename><replaceable>package</replaceable>-<replaceable>version</replaceable>.orig</filename>,
          in the current directory.
        </para>
        <para>
          To create a packed source archive it is typically invoked:
        </para>
        <screen>
dpkg-source -b <replaceable>package</replaceable>-<replaceable>version</replaceable></screen>
        <para>
          This will create the <filename>.dsc</filename>,
          <filename>.tar.gz</filename> and <filename>.diff.gz</filename>
          (if appropriate) in the current directory.
          <command>dpkg-source</command> does not clean the source tree
          first - this must be done separately if it is required.
        </para>
        <para>
          See also <xref linkend="s-pkg-sourcearchives"/>.
        </para>
      </section>

      <section id="s-pkg-dpkg-buildpackage">
        <title>
          <command>dpkg-buildpackage</command> - overall package-building
          control script
        </title>

        <para>
          See
          <citerefentry><refentrytitle>dpkg-buildpackage</refentrytitle><manvolnum>1</manvolnum></citerefentry>.
        </para>
      </section>

      <section id="s-pkg-dpkg-gencontrol">
        <title>
          <command>dpkg-gencontrol</command> - generates binary package
          control files
        </title>

        <para>
          This program is usually called from
          <filename>debian/rules</filename> (see <xref
          linkend="s-pkg-sourcetree"/>) in the top level of the source
          tree.
        </para>
        <para>
          This is usually done just before the files and directories in
          the temporary directory tree where the package is being built
          have their permissions and ownerships set and the package is
          constructed using <command>dpkg-deb/</command>.
          <footnote>
            <para>
              This is so that the control file which is produced has the
              right permissions
            </para>
          </footnote>
        </para>
        <para>
          <command>dpkg-gencontrol</command> must be called after all the
          files which are to go into the package have been placed in the
          temporary build directory, so that its calculation of the
          installed size of a package is correct.
        </para>
        <para>
          It is also necessary for <command>dpkg-gencontrol</command> to
          be run after <command>dpkg-shlibdeps</command> so that the
          variable substitutions created by
          <command>dpkg-shlibdeps</command> in
          <filename>debian/substvars</filename> are available.
        </para>
        <para>
          For a package which generates only one binary package, and which
          builds it in <filename>debian/tmp</filename> relative to the top
          of the source package, it is usually sufficient to call
          <command>dpkg-gencontrol</command>.
        </para>
        <para>
          Sources which build several binaries will typically need
          something like:
        </para>
        <screen>
dpkg-gencontrol -Pdebian/<replaceable>pkg</replaceable> -p<replaceable>package</replaceable></screen>
        <para>
          The <literal>-P</literal> tells
          <command>dpkg-gencontrol</command> that the package is being
          built in a non-default directory, and the <literal>-p</literal>
          tells it which package's control file should be generated.
        </para>
        <para>
          <command>dpkg-gencontrol</command> also adds information to the
          list of files in <filename>debian/files</filename>, for the
          benefit of (for example) a future invocation of
          <command>dpkg-genchanges</command>.
        </para>
      </section>

      <section id="s-pkg-dpkg-shlibdeps">
        <title>
          <command>dpkg-shlibdeps</command> - calculates shared library
          dependencies
        </title>

        <para>
          See
          <citerefentry><refentrytitle>dpkg-shlibdeps</refentrytitle><manvolnum>1</manvolnum></citerefentry>.
        </para>
      </section>

      <section id="s-pkg-dpkg-distaddfile">
        <title>
          <command>dpkg-distaddfile</command> - adds a file to
          <filename>debian/files</filename>
        </title>

        <para>
          Some packages' uploads need to include files other than the
          source and binary package files.
        </para>
        <para>
          <command>dpkg-distaddfile</command> adds a file to the
          <filename>debian/files</filename> file so that it will be
          included in the <filename>.changes</filename> file when
          <command>dpkg-genchanges</command> is run.
        </para>
        <para>
          It is usually invoked from the <literal>binary</literal> target
          of <filename>debian/rules</filename>:
        </para>
        <screen>
dpkg-distaddfile <replaceable>filename</replaceable> <replaceable>section</replaceable> <replaceable>priority</replaceable></screen>
        <para>
          The <replaceable>filename</replaceable> is relative to the
          directory where <command>dpkg-genchanges</command> will expect
          to find it - this is usually the directory above the top level
          of the source tree.  The <filename>debian/rules</filename>
          target should put the file there just before or just after
          calling <command>dpkg-distaddfile</command>.
        </para>
        <para>
          The <replaceable>section</replaceable> and
          <replaceable>priority</replaceable> are passed unchanged into
          the resulting <filename>.changes</filename> file.
        </para>
      </section>

      <section id="s-pkg-dpkg-genchanges">
        <title>
          <command>dpkg-genchanges</command> - generates a
          <filename>.changes</filename> upload control file
        </title>
        <para>
          See
          <citerefentry><refentrytitle>dpkg-genchanges</refentrytitle><manvolnum>1</manvolnum></citerefentry>.
        </para>
      </section>

      <section id="s-pkg-dpkg-parsechangelog">
        <title>
          <command>dpkg-parsechangelog</command> - produces parsed
          representation of a changelog
        </title>

        <para>
          See
          <citerefentry><refentrytitle>dpkg-parsechangelog</refentrytitle><manvolnum>1</manvolnum></citerefentry>.
        </para>
      </section>

      <section id="s-pkg-dpkg-architecture">
        <title>
          <command>dpkg-architecture</command> - information about the
          build and host system
        </title>

        <para>
          See
          <citerefentry><refentrytitle>dpkg-architecture</refentrytitle><manvolnum>1</manvolnum></citerefentry>.
        </para>
      </section>
    </section>

    <section id="s-pkg-sourcetree">
      <title>The Debian package source tree</title>

      <para>
        The source archive scheme described later is intended to allow a
        Debian package source tree with some associated control
        information to be reproduced and transported easily.  The Debian
        package source tree is a version of the original program with
        certain files added for the benefit of the packaging process, and
        with any other changes required made to the rest of the source
        code and installation scripts.
      </para>
      <para>
        The extra files created for Debian are in the subdirectory
        <filename>debian</filename> of the top level of the Debian package
        source tree.  They are described below.
      </para>

      <section id="s-pkg-debianrules">
        <title>
          <filename>debian/rules</filename> - the main building script
        </title>

        <para>
          See <xref linkend="s-debianrules"/>.
        </para>
      </section>

      <section id="s-pkg-srcsubstvars">
        <title>
          <filename>debian/substvars</filename> and variable substitutions
        </title>

        <para>
          See <xref linkend="s-substvars"/>.
        </para>
      </section>

      <section id="s-sC.2.3">
        <title><filename>debian/files</filename></title>

        <para>
          See <xref linkend="s-debianfiles"/>.
        </para>
      </section>

      <section id="s-sC.2.4">
        <title><filename>debian/tmp</filename></title>

        <para>
          This is the default temporary location for the construction of
          binary packages by the <literal>binary</literal> target.  The
          directory <filename>tmp</filename> serves as the root of the
          file system tree as it is being constructed (for example, by
          using the package's upstream makefiles install targets and
          redirecting the output there), and it also contains the
          <literal>DEBIAN</literal> subdirectory.  See <xref
          linkend="s-pkg-bincreating"/>.
        </para>
        <para>
          This is only a default and can be easily overridden.  Most
          packaging tools no longer use <filename>debian/tmp</filename>,
          instead preferring
          <filename>debian/<replaceable>pkg</replaceable></filename> for
          the common case of a source package building only one binary
          package.  Such tools usually only use
          <filename>debian/tmp</filename> as a temporary staging area for
          built files and do not construct packages from it.
        </para>
        <para>
          If several binary packages are generated from the same source
          tree, it is usual to use a separate
          <filename>debian/<replaceable>pkg</replaceable></filename>
          directory for each binary package as the temporary construction
          locations.
        </para>
        <para>
          Whatever temporary directories are created and used by the
          <literal>binary</literal> target must of course be removed by the
          <literal>clean</literal> target.
        </para>
      </section>
    </section>

    <section id="s-pkg-sourcearchives">
      <title>Source packages as archives</title>

      <para>
        As it exists on the FTP site, a Debian source package consists of
        three related files.  You must have the right versions of all
        three to be able to use them.
      </para>
      <variablelist>
        <varlistentry>
          <term>Debian source control file - <literal>.dsc</literal></term>
          <listitem>
            <para>
              This file is a control file used by
              <command>dpkg-source</command> to extract a source package.
              See <xref linkend="s-debiansourcecontrolfiles"/>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            Original source archive -
            <filename><replaceable>package</replaceable>_<replaceable>upstream-version</replaceable>.orig.tar.gz</filename>
          </term>
          <listitem>
            <para>
              This is a compressed (with <literal>gzip -9</literal>)
              <command>tar</command> file containing the source code from
              the upstream authors of the program.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            Debian package diff -
            <filename><replaceable>package</replaceable>_<replaceable>upstream_version-revision</replaceable>.diff.gz</filename>
          </term>
          <listitem>
            <para>
              This is a unified context diff (<literal>diff -u</literal>)
              giving the changes which are required to turn the original
              source into the Debian source.  These changes may only
              include editing and creating plain files.  The permissions
              of files, the targets of symbolic links and the
              characteristics of special files or pipes may not be changed
              and no files may be removed or renamed.
            </para>
            <para>
              All the directories in the diff must exist, except the
              <filename>debian</filename> subdirectory of the top of the
              source tree, which will be created by
              <command>dpkg-source</command> if necessary when unpacking.
            </para>
            <para>
              The <command>dpkg-source</command> program will
              automatically make the <filename>debian/rules</filename>
              file executable (see below).
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>
        If there is no original source code - for example, if the package
        is specially prepared for Debian or the Debian maintainer is the
        same as the upstream maintainer - the format is slightly
        different: then there is no diff, and the tarfile is named
        <filename><replaceable>package</replaceable>_<replaceable>version</replaceable>.tar.gz</filename>,
        and preferably contains a directory named
        <filename><replaceable>package</replaceable>-<replaceable>version</replaceable></filename>.
      </para>
    </section>

    <section id="s-sC.4">
      <title>
        Unpacking a Debian source package without
        <command>dpkg-source</command>
      </title>

      <para>
        <literal>dpkg-source -x</literal> is the recommended way to unpack
        a Debian source package.  However, if it is not available it is
        possible to unpack a Debian source archive as follows:
      </para>
      <orderedlist numeration="arabic">
        <listitem>
          <para>
            Untar the tarfile, which will create a
            <filename>.orig</filename> directory.
          </para>
        </listitem>
        <listitem>
          <para>
            Rename the <filename>.orig</filename> directory to
            <filename><replaceable>package</replaceable>-<replaceable>version</replaceable></filename>.
          </para>
        </listitem>
        <listitem>
          <para>
            Create the subdirectory <filename>debian</filename> at the top
            of the source tree.
          </para>
        </listitem>
        <listitem>
          <para>
            Apply the diff using <literal>patch -p0</literal>.
          </para>
        </listitem>
        <listitem>
          <para>
            Untar the tarfile again if you want a copy of the original
            source code alongside the Debian version.
          </para>
        </listitem>
      </orderedlist>
      <para>
        It is not possible to generate a valid Debian source archive
        without using <command>dpkg-source</command>.  In particular,
        attempting to use <command>diff</command> directly to generate the
        <filename>.diff.gz</filename> file will not work.
      </para>

      <section id="s-sC.4.1">
        <title>Restrictions on objects in source packages</title>

        <para>
          The source package may not contain any hard links,
          <footnote>
            <para>
              This is not currently detected when building
              source packages, but only when extracting them.
            </para>
          </footnote>
          <footnote>
            <para>
              Hard links may be permitted at some point in the future, but
              would require a fair amount of work.
            </para>
          </footnote>
          device special files, sockets or setuid or setgid files.
          <footnote>
            <para>
              Setgid directories are allowed.
            </para>
          </footnote>
        </para>
        <para>
          The source packaging tools manage the changes between the
          original and Debian source using <command>diff</command> and
          <command>patch</command>.  Turning the original source tree as
          included in the <filename>.orig.tar.gz</filename> into the
          Debian package source must not involve any changes which cannot
          be handled by these tools.  Problematic changes which cause
          <command>dpkg-source</command> to halt with an error when
          building the source package are:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              Adding or removing symbolic links, sockets or pipes.
            </para>
          </listitem>
          <listitem>
            <para>
              Changing the targets of symbolic links.
            </para>
          </listitem>
          <listitem>
            <para>
              Creating directories, other than <filename>debian</filename>.
            </para>
          </listitem>
          <listitem>
            <para>
              Changes to the contents of binary files.
            </para>
          </listitem>
        </itemizedlist>
        <para>
          Changes which cause <command>dpkg-source</command> to print a
          warning but continue anyway are:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              Removing files, directories or symlinks.
              <footnote>
                <para>
                  Renaming a file is not treated specially - it is seen as
                  the removal of the old file (which generates a warning,
                  but is otherwise ignored), and the creation of the new
                  one.
                </para>
              </footnote>
            </para>
          </listitem>
          <listitem>
            <para>
              Changed text files which are missing the usual final newline
              (either in the original or the modified source tree).
            </para>
          </listitem>
        </itemizedlist>
        <para>
          Changes which are not represented, but which are not detected by
          <command>dpkg-source</command>, are:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              Changing the permissions of files (other than
              <filename>debian/rules</filename>) and directories.
            </para>
          </listitem>
        </itemizedlist>
        <para>
          The <filename>debian</filename> directory and
          <filename>debian/rules</filename> are handled specially by
          <command>dpkg-source</command> - before applying the changes it
          will create the <filename>debian</filename> directory, and
          afterwards it will make <filename>debian/rules</filename>
          world-executable.
        </para>
      </section>
    </section>
  </appendix>

  <appendix id="ap-pkg-controlfields">
    <title>Control files and their fields (from old Packaging Manual)</title>

    <para>
      Many of the tools in the <command>dpkg</command> suite manipulate
      data in a common format, known as control files.  Binary and source
      packages have control data as do the <filename>.changes</filename>
      files which control the installation of uploaded files, and
      <command>dpkg</command>'s internal databases are in a similar
      format.
    </para>

    <section id="s-sD.1">
      <title>Syntax of control files</title>

      <para>
        See <xref linkend="s-controlsyntax"/>.
      </para>
      <para>
        It is important to note that there are several fields which are
        optional as far as <command>dpkg</command> and the related tools
        are concerned, but which must appear in every Debian package, or
        whose omission may cause problems.
      </para>
    </section>

    <section id="s-sD.2">
      <title>List of fields</title>

      <para>
        See <xref linkend="s-controlfieldslist"/>.
      </para>
      <para>
        This section now contains only the fields that didn't belong to
        the Policy manual.
      </para>

      <section id="s-pkg-f-Filename">
        <title>
          <literal>Filename</literal> and <literal>MSDOS-Filename</literal>
        </title>

        <para>
          These fields in <literal>Packages</literal> files give the
          filename(s) of (the parts of) a package in the distribution
          directories, relative to the root of the Debian hierarchy.  If
          the package has been split into several parts the parts are all
          listed in order, separated by spaces.
        </para>
      </section>

      <section id="s-pkg-f-Size">
        <title><literal>Size</literal> and <literal>MD5sum</literal></title>

        <para>
          These fields in <filename>Packages</filename> files give the
          size (in bytes, expressed in decimal) and MD5 checksum of the
          file(s) which make(s) up a binary package in the distribution.
          If the package is split into several parts the values for the
          parts are listed in order, separated by spaces.
        </para>
      </section>

      <section id="s-pkg-f-Status">
        <title><literal>Status</literal></title>

        <para>
          This field in <command>dpkg</command>'s status file records
          whether the user wants a package installed, removed or left
          alone, whether it is broken (requiring re-installation) or not
          and what its current state on the system is.  Each of these
          pieces of information is a single word.
        </para>
      </section>

      <section id="s-pkg-f-Config-Version">
        <title><literal>Config-Version</literal></title>

        <para>
          If a package is not installed or not configured, this field in
          <command>dpkg</command>'s status file records the last version
          of the package which was successfully configured.
        </para>
      </section>

      <section id="s-pkg-f-Conffiles">
        <title><literal>Conffiles</literal></title>

        <para>
          This field in <command>dpkg</command>'s status file contains
          information about the automatically-managed configuration files
          held by a package.  This field should <emphasis>not</emphasis>
          appear anywhere in a package!
        </para>
      </section>

      <section id="s-sD.2.6">
        <title>Obsolete fields</title>

        <para>
          These are still recognized by <command>dpkg</command> but should
          not appear anywhere any more.
        </para>
        <variablelist>
          <varlistentry>
            <term><literal>Revision</literal></term>
            <term><literal>Package-Revision</literal></term>
            <term><literal>Package_Revision</literal></term>
            <listitem>
              <para>
                The Debian revision part of the package version was at one
                point in a separate control field.  This field went
                through several names.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>Recommended</literal></term>
            <listitem>
              <para>
                Old name for <literal>Recommends</literal>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>Optional</literal></term>
            <listitem>
              <para>
                Old name for <literal>Suggests</literal>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>Class</literal></term>
            <listitem>
              <para>
                Old name for <literal>Priority</literal>.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>
  </appendix>

  <appendix id="ap-pkg-conffiles">
    <title>Configuration file handling (from old Packaging Manual)</title>

    <para>
      <command>dpkg</command> can do a certain amount of automatic
      handling of package configuration files.
    </para>
    <para>
      Whether this mechanism is appropriate depends on a number of
      factors, but basically there are two approaches to any particular
      configuration file.
    </para>
    <para>
      The easy method is to ship a best-effort configuration in the
      package, and use <command>dpkg</command>'s conffile mechanism to
      handle updates.  If the user is unlikely to want to edit the file,
      but you need them to be able to without losing their changes, and a
      new package with a changed version of the file is only released
      infrequently, this is a good approach.
    </para>
    <para>
      The hard method is to build the configuration file from scratch in
      the <command>postinst</command> script, and to take the
      responsibility for fixing any mistakes made in earlier versions of
      the package automatically.  This will be appropriate if the file is
      likely to need to be different on each system.
    </para>

    <section id="s-sE.1">
      <title>
        Automatic handling of configuration files by
        <command>dpkg</command>
      </title> 

      <para>
        A package may contain a control information file called
        <literal>conffiles</literal>.  This file should be a list of
        filenames of configuration files needing automatic handling,
        separated by newlines.  The filenames should be absolute
        pathnames, and the files referred to should actually exist in the
        package.
      </para>
      <para>
        When a package is upgraded <command>dpkg</command> will process
        the configuration files during the configuration stage, shortly
        before it runs the package's <command>postinst</command> script,
      </para>
      <para>
        For each file it checks to see whether the version of the file
        included in the package is the same as the one that was included
        in the last version of the package (the one that is being upgraded
        from); it also compares the version currently installed on the
        system with the one shipped with the last version.
      </para>
      <para>
        If neither the user nor the package maintainer has changed the
        file, it is left alone.  If one or the other has changed their
        version, then the changed version is preferred - i.e., if the user
        edits their file, but the package maintainer doesn't ship a
        different version, the user's changes will stay, silently, but if
        the maintainer ships a new version and the user hasn't edited it
        the new version will be installed (with an informative message).
        If both have changed their version the user is prompted about the
        problem and must resolve the differences themselves.
      </para>
      <para>
        The comparisons are done by calculating the MD5 message digests of
        the files, and storing the MD5 of the file as it was included in
        the most recent version of the package.
      </para>
      <para>
        When a package is installed for the first time
        <command>dpkg</command> will install the file that comes with it,
        unless that would mean overwriting a file already on the file
        system.
      </para>
      <para>
        However, note that <command>dpkg</command> will
        <emphasis>not</emphasis> replace a conffile that was removed by
        the user (or by a script).  This is necessary because with some
        programs a missing file produces an effect hard or impossible to
        achieve in another way, so that a missing file needs to be kept
        that way if the user did it.
      </para>
      <para>
        Note that a package should <emphasis>not</emphasis> modify a
        <command>dpkg</command>-handled conffile in its maintainer
        scripts.  Doing this will lead to <command>dpkg</command> giving
        the user confusing and possibly dangerous options for conffile
        update when the package is upgraded.
      </para>
    </section>

    <section id="s-sE.2">
      <title>Fully-featured maintainer script configuration handling</title>

      <para>
        For files which contain site-specific information such as the
        hostname and networking details and so forth, it is better to
        create the file in the package's <command>postinst</command>
        script.
      </para>
      <para>
        This will typically involve examining the state of the rest of the
        system to determine values and other information, and may involve
        prompting the user for some information which can't be obtained
        some other way.
      </para>
      <para>
        When using this method there are a couple of important issues
        which should be considered:
      </para>
      <para>
        If you discover a bug in the program which generates the
        configuration file, or if the format of the file changes from one
        version to the next, you will have to arrange for the postinst
        script to do something sensible - usually this will mean editing
        the installed configuration file to remove the problem or change
        the syntax.  You will have to do this very carefully, since the
        user may have changed the file, perhaps to fix the very problem
        that your script is trying to deal with - you will have to detect
        these situations and deal with them correctly.
      </para>
      <para>
        If you do go down this route it's probably a good idea to make the
        program that generates the configuration file(s) a separate
        program in <filename>/usr/sbin</filename>, by convention called
        <filename><replaceable>package</replaceable>config</filename> and
        then run that if appropriate from the post-installation script.
        The <literal><replaceable>package</replaceable>config</literal>
        program should not unquestioningly overwrite an existing
        configuration - if its mode of operation is geared towards setting
        up a package for the first time (rather than any arbitrary
        reconfiguration later) you should have it check whether the
        configuration already exists, and require a
        <literal>--force</literal> flag to overwrite it.
      </para>
    </section>
  </appendix>

  <appendix id="ap-pkg-alternatives">
    <title>
      Alternative versions of an interface -
      <command>update-alternatives</command> (from old Packaging Manual)
    </title>

    <para>
      When several packages all provide different versions of the same
      program or file it is useful to have the system select a default,
      but to allow the system administrator to change it and have their
      decisions respected.
    </para>
    <para>
      For example, there are several versions of the <command>vi</command>
      editor, and there is no reason to prevent all of them from being
      installed at once, each under their own name
      (<command>nvi</command>, <command>vim</command> or whatever).
      Nevertheless it is desirable to have the name <literal>vi</literal>
      refer to something, at least by default.
    </para>
    <para>
      If all the packages involved cooperate, this can be done with
      <command>update-alternatives</command>.
    </para>
    <para>
      Each package provides its own version under its own name, and calls
      <command>update-alternatives</command> in its postinst to register
      its version (and again in its prerm to deregister it).
    </para>
    <para>
      See the man page
      <citerefentry><refentrytitle>update-alternatives</refentrytitle><manvolnum>8</manvolnum></citerefentry>
      for details.
    </para>
    <para>
      If <command>update-alternatives</command> does not seem appropriate
      you may wish to consider using diversions instead.
    </para>
  </appendix>

  <appendix id="ap-pkg-diversions">
    <title>
      Diversions - overriding a package's version of a file (from old
      Packaging Manual)
    </title>

    <para>
      It is possible to have <command>dpkg</command> not overwrite a file
      when it reinstalls the package it belongs to, and to have it put the
      file from the package somewhere else instead.
    </para>
    <para>
      This can be used locally to override a package's version of a file,
      or by one package to override another's version (or provide a
      wrapper for it).
    </para>
    <para>
      Before deciding to use a diversion, read <xref
      linkend="ap-pkg-alternatives"/> to see if you really want a
      diversion rather than several alternative versions of a program.
    </para>
    <para>
      There is a diversion list, which is read by <command>dpkg</command>,
      and updated by a special program <command>dpkg-divert</command>.
      Please see
      <citerefentry><refentrytitle>dpkg-divert</refentrytitle><manvolnum>8</manvolnum></citerefentry>
      for full details of its operation.
    </para>
    <para>
      When a package wishes to divert a file from another, it should call
      <command>dpkg-divert</command> in its preinst to add the diversion
      and rename the existing file.  For example, supposing that a
      <command>smailwrapper</command> package wishes to install a wrapper
      around <filename>/usr/sbin/smail</filename>:
    </para>
    <screen>
dpkg-divert --package smailwrapper --add --rename \
    --divert /usr/sbin/smail.real /usr/sbin/smail</screen>
    <para>
      The <literal>--package smailwrapper</literal> ensures that
      <command>smailwrapper</command>'s copy of
      <filename>/usr/sbin/smail</filename> can bypass the diversion and
      get installed as the true version.  It's safe to add the diversion
      unconditionally on upgrades since it will be left unchanged if it
      already exists, but <command>dpkg-divert</command> will display a
      message.  To suppress that message, make the command conditional on
      the version from which the package is being upgraded:
    </para>
    <programlisting>
if [ upgrade != "$1" ] || dpkg --compare-versions "$2" lt 1.0-2; then
    dpkg-divert --package smailwrapper --add --rename \
        --divert /usr/sbin/smail.real /usr/sbin/smail
fi</programlisting>
    <para>
      where <literal>1.0-2</literal> is the version at which the diversion
      was first added to the package.  Running the command during
      abort-upgrade is pointless but harmless.
    </para>
    <para>
      The postrm has to do the reverse:
    </para>
    <programlisting>
if [ remove = "$1" -o abort-install = "$1" -o disappear = "$1" ]; then
    dpkg-divert --package smailwrapper --remove --rename \
        --divert /usr/sbin/smail.real /usr/sbin/smail
fi</programlisting>
    <para>
      If the diversion was added at a particular version, the postrm
      should also handle the failure case of upgrading from an older
      version (unless the older version is so old that direct upgrades are
      no longer supported):
    </para>
    <programlisting>
if [ abort-upgrade = "$1" ] &amp;&amp; dpkg --compare-versions "$2" lt 1.0-2; then
    dpkg-divert --package smailwrapper --remove --rename \
        --divert /usr/sbin/smail.real /usr/sbin/smail
fi</programlisting>
    <para>
      where <literal>1.0-2</literal> is the version at which the diversion
      was first added to the package.  The postrm should not remove the
      diversion on upgrades both because there's no reason to remove the
      diversion only to immediately re-add it and since the postrm of the
      old package is run after unpacking so the removal of the diversion
      will fail.
    </para>
    <para>
      Do not attempt to divert a file which is vitally important for the
      system's operation - when using <command>dpkg-divert</command> there
      is a time, after it has been diverted but before
      <command>dpkg</command> has installed the new version, when the file
      does not exist.
    </para>
    <para>
      Do not attempt to divert a conffile, as <command>dpkg</command> does
      not handle it well.
    </para>
  </appendix>

  <appendix id="ap-process">
    <title>
      Debian Policy changes process
    </title>

    <section id="process-introduction">
      <title>Introduction</title>
      <para>
      To introduce a change in the current Debian Policy, the change
      proposal has to go through a certain process.
      <footnote>
        <para>
          This process was originally developed by Margarita
          Manterola, Clint Adams, Russ Allbery and Manoj Srivastava.
        </para>
      </footnote>
    </para>
    </section>

    <section id="process-change-goals">
      <title>Change Goals</title>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            The change should be technically correct, and consistent with
            the rest of the policy document. This means no legislating the
            value of π. This also means that the proposed solution be
            known to work; iterative design processes do not belong in
            policy.
          </para>
        </listitem>
        <listitem>
          <para>
            The change should not be too disruptive; if very many packages
            become instantly buggy, then instead there should be a
            transition plan. Exceptions should be rare (only if the
            current state is really untenable), and probably blessed by
            the TC.
          </para>
        </listitem>
        <listitem>
          <para>
            The change has to be reviewed in depth, in the open, where any
            one may contribute; a publicly accessible, archived, open
            mailing list.
          </para>
        </listitem>
        <listitem>
          <para>
            Proposal should be addressed in a timely fashion.
          </para>
        </listitem>
        <listitem>
          <para>
            Any domain experts should be consulted, since not every policy
            mailing list subscriber is an expert on everything, including
            policy maintainers.
          </para>
        </listitem>
        <listitem>
          <para>
            The goal is rough consensus on the change, which should not be
            hard if the matter is technical. Technical issues where there
            is no agreement should be referred to the TC; non-technical
            issues should be referred to the whole developer body, and
            perhaps general resolutions lie down that path.
          </para>
        </listitem>
        <listitem>
          <para>
            Package maintainers whose packages may be impacted should have
            access to policy change proposals, even if they do not
            subscribe to policy mailing lists (policy gazette?).
          </para>
        </listitem>
      </itemizedlist>
    </section>

    <section id="process-current">
      <title>Current Process</title>
      <para>
        Each suggested change goes through different states. These
        states are denoted through either usertags of the
        <email>debian-policy@packages.debian.org</email> user or, for
        <literal>patch</literal>, <literal>pending</literal>, and
        <literal>wontfix</literal>, regular tags.
      </para>
      <para>
        <ulink url="https://bugs.debian.org/cgi-bin/pkgreport.cgi?src=debian-policy&amp;pend-exc=done">Current
        list of bugs</ulink>
      </para>
      <para>
        The Policy delegates are responsible for managing the tags on bugs
        and will update tags as new bugs are submitted or as activity
        happens on bugs. All Debian Developers should feel free to add the
        seconded tag as described below. Other tags should be changed with
        the coordination of the Policy Team.
      </para>
      <section id="state-a-issue-raised">
        <title>State A: Issue raised</title>
        <para>
          Detect need, like gaps/flaws in current policy, or a new rule
          should be added. Any user or developer may start this step.
          There is a decision point here; not all issues are in scope of
          policy.
        </para>
        <para>
          <ulink
          url="https://bugs.debian.org/cgi-bin/pkgreport.cgi?src=debian-policy&amp;tag=issue">TAG:
          <literal>issue</literal></ulink>
        </para>
        <para>
          What needs to happen next: If this is in scope for Policy,
          discuss the issue and possible solutions, moving to the
          discussion tag, or if the matter is sufficiently clear, go
          directly to a proposal for how to address it, moving to the
          proposal tag. If this is not in scope for Policy, close the bug.
        </para>
      </section>
      <section id="state-b-discussion">
        <title>State B: Discussion</title>
        <para>
          Discuss remedy. Alternate proposals. Discussion guided by
          delegates. There should be a clear time limit to this stage, but
          as yet we have not set one.
        </para>
        <para>
          <ulink
          url="https://bugs.debian.org/cgi-bin/pkgreport.cgi?src=debian-policy&amp;pend-exc=done&amp;tag=discussion">TAG:
          <literal>discussion</literal></ulink>
        </para>
        <para>
          What needs to happen next: Reach a conclusion and consensus in
          the discussion and make a final proposal for what should be
          changed (if anything), moving to the proposal tag.
        </para>
      </section>
      <section id="state-c-proposal">
        <title>State C: Proposal</title>
        <para>
          A final proposal has emerged from the discussion, and there is a
          rough consensus on how to proceed to resolve the issue.
        </para>
        <para>
          <ulink
          url="https://bugs.debian.org/cgi-bin/pkgreport.cgi?src=debian-policy&amp;pend-exc=done&amp;tag=proposal">TAG:
          <literal>proposal</literal></ulink>
        </para>
        <para>
          What needs to happen next: Provided that the rough consensus
          persists, develop a patch against the current Policy document
          with specific wording of the change. Often this is done in
          conjunction with the proposal, in which case one may skip this
          step and move directly to patch tag.
        </para>
      </section>
      <section id="state-d-wording-proposed">
        <title>State D: Wording proposed</title>
        <para>
          A patch against the Policy document reflecting the consensus has
          been created and is waiting for formal seconds. The standard
          patch tag is used for this state, since it's essentially
          equivalent to the standard meaning of that tag.
        </para>
        <para>
          <ulink
          url="https://bugs.debian.org/cgi-bin/pkgreport.cgi?src=debian-policy&amp;pend-exc=done&amp;tag=patch">TAG:
          <literal>patch</literal></ulink>
        </para>
        <para>
          What needs to happen next: The proposal needs to be reviewed and
          seconded. Any Debian developer who agrees with the change and
          the conclusion of rough consensus from the discussion should say
          so in the bug log by seconding the proposal.
        </para>
      </section>
      <section id="state-e-seconded">
        <title>State E: Seconded</title>
        <para>
          The proposal is signed off on by N Debian Developers. To start
          with, we're going with N=3, meaning that if three Debian
          Developers agree, not just with the proposal but with the
          conclusion that it reflects consensus and addresses the original
          issue -- it is considered eligible for inclusion in the next
          version of Policy. Since Policy is partly a technical project
          governance method, one must be a Debian Developer to formally
          second, although review and discussion is welcome from anyone.
          Once this tag has been applied, the bug is waiting for a Policy
          team member to apply the patch to the package repository.
        </para>
        <para>
          <ulink
          url="https://bugs.debian.org/cgi-bin/pkgreport.cgi?src=debian-policy&amp;pend-exc=done&amp;tag=seconded">TAG:
          <literal>seconded</literal></ulink>
        </para>
        <para>
          What needs to happen next: A Policy maintainer does the final
          review and confirmation, and then applies the patch for the next
          Policy release.
        </para>
        <para>
          This tag is not used very much because normally a Policy
          maintainer applies the patch and moves the proposal to the next
          state once enough seconds are reached.
        </para>
      </section>
      <section id="state-f-accepted">
        <title>State F: Accepted</title>
        <para>
          Change accepted, will be in next upload. The standard pending
          tag is used for this state since it matches the regular meaning
          of pending.
        </para>
        <para>
          <ulink
          url="https://bugs.debian.org/cgi-bin/pkgreport.cgi?src=debian-policy&amp;pend-exc=done&amp;tag=pending">TAG:
          <literal>pending</literal></ulink>
        </para>
        <para>
          What needs to happen next: The bug is now in the waiting queue
          for the next Policy release, and there's nothing left to do
          except for upload a new version of Policy.
        </para>
      </section>
      <section id="state-g-reject">
        <title>State G: Reject</title>
        <para>
          Rejected proposals. The standard wontfix is used for this state.
          Normally, bugs in this state will not remain open; instead, a
          Policy team member will close them with an explanation. The
          submitter may then appeal to the tech-ctte if they so desire.
          Alternately, issues appealed to the tech-ctte may remain open
          with this tag while that appeal proceeds.
        </para>
        <para>
          <ulink
          url="https://bugs.debian.org/cgi-bin/pkgreport.cgi?src=debian-policy&amp;pend-exc=done&amp;tag=rejected">TAG:
          <literal>wontfix</literal></ulink>
        </para>
        <para>
          We may use one of the following tags here, but to date we have
          only used dubious and ctte. It's not clear whether we need more
          tags for this stage.
        </para>
        <variablelist spacing="compact">
          <varlistentry>
            <term>
              <emphasis role="strong">dubious</emphasis>
            </term>
            <listitem>
              <para>
                Not a policy matter
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <emphasis role="strong">ctte</emphasis>
            </term>
            <listitem>
              <para>
                Referred to the Technical Committee (tech-ctte)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <emphasis role="strong">devel</emphasis>
            </term>
            <listitem>
              <para>
                Referred to the developer body
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <emphasis role="strong">delegate</emphasis>
            </term>
            <listitem>
              <para>
                Rejected by a Policy delegate
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <emphasis role="strong">obsolete</emphasis>
            </term>
            <listitem>
              <para>
                The proposal timed out without a conclusion
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
        <para>
          What needs to happen next: The bug should be closed once a final
          resolution is reached, or retagged to an appropriate state if
          that final resolution reverses the decision to reject the
          proposal.
        </para>
      </section>
    </section>

    <section id="process-other-tags">
      <title>Other Tags</title>
      <para>
        All Policy bugs are additionally categorized by class of bug.
      </para>
      <para>
        The normative tag is used for bugs that make normative changes to
        Policy, meaning that the dictates of Policy will change in some
        fashion as part of the resolution of the bug if the proposal is
        accepted. The full process is followed for such bugs.
      </para>
      <para>
        <ulink
        url="https://bugs.debian.org/cgi-bin/pkgreport.cgi?src=debian-policy&amp;pend-exc=done&amp;tag=normative">TAG:
        <literal>normative</literal></ulink>
      </para>
      <para>
        The informative tag is used for bugs about wording issues, typos,
        informative footnotes, or other changes that do not affect the
        formal dictates of Policy, just the presentation. The same tags
        are used for these bugs for convenience, but the Policy
        maintainers may make informative changes without following the
        full process. Informative bugs fall under their discretion.
      </para>
      <para>
        <ulink
        url="https://bugs.debian.org/cgi-bin/pkgreport.cgi?src=debian-policy&amp;pend-exc=done&amp;tag=informative">TAG:
        <literal>informative</literal></ulink>
      </para>
      <para>
        The packaging tag is used for bugs about the packaging and build
        process of the debian-policy Debian package. These bugs do not
        follow the normal process and will not have the other tags except
        for pending and wontfix (used with their normal meanings).
      </para>
      <para>
        <ulink
        url="https://bugs.debian.org/cgi-bin/pkgreport.cgi?src=debian-policy&amp;pend-exc=done&amp;tag=packaging">TAG:
        <literal>packaging</literal></ulink>
      </para>
    </section>

  </appendix>

  <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
              href="upgrading-checklist.xml" />

</book>
